{
"version":3,
"file":"module$node_modules$$rc_component$mini_decimal$lib$BigIntDecimal.js",
"lineCount":8,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzHC,MAAAA,CAAyBH,OAAA,CAAQ,kEAAR,CAAwDI,CAAAA,OACrFC,OAAOC,CAAAA,cAAP,CAAsBJ,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CK,MAAO,CAAA,CADoC,CAA7C,CAGAL,QAAQE,CAAAA,OAAR,CAAkB,IAAK,EACvB,KAAII,iBAAmBL,MAAA,CAAuBH,OAAA,CAAQ,2DAAR,CAAvB,CAAvB,CACIS,cAAgBN,MAAA,CAAuBH,OAAA,CAAQ,wDAAR,CAAvB,CADpB,CAEIU,iBAAmBP,MAAA,CAAuBH,OAAA,CAAQ,2DAAR,CAAvB,CAFvB;AAGIW,YAAcX,OAAA,CAAQ,+DAAR,CACdY,QAAAA,CAA6B,QAAS,EAAG,CAG3CA,QAASA,cAAa,CAACL,KAAD,CAAQ,CAC5B,GAAIC,gBAAiBJ,CAAAA,OAArB,EAA8B,IAA9B,CAAoCQ,aAApC,CACA,IAAIF,gBAAiBN,CAAAA,OAArB,EAA8B,IAA9B,CAAoC,QAApC,CAA8C,EAA9C,CACA,IAAIM,gBAAiBN,CAAAA,OAArB,EAA8B,IAA9B,CAAoC,UAApC,CAAgD,IAAK,EAArD,CACA,IAAIM,gBAAiBN,CAAAA,OAArB,EAA8B,IAA9B,CAAoC,SAApC,CAA+C,IAAK,EAApD,CACA,IAAIM,gBAAiBN,CAAAA,OAArB,EAA8B,IAA9B,CAAoC,SAApC,CAA+C,IAAK,EAApD,CACA,IAAIM,gBAAiBN,CAAAA,OAArB,EAA8B,IAA9B,CAAoC,YAApC,CAAkD,IAAK,EAAvD,CACA,IAAIM,gBAAiBN,CAAAA,OAArB,EAA8B,IAA9B,CAAoC,OAApC,CAA6C,IAAK,EAAlD,CACA,IAAIM,gBAAiBN,CAAAA,OAArB,EAA8B,IAA9B;AAAoC,KAApC,CAA2C,IAAK,EAAhD,CACI,IAAIO,WAAYE,CAAAA,OAAhB,EAAyBN,KAAzB,CAAJ,CACE,IAAKO,CAAAA,KADP,CACe,CAAA,CADf,EAIA,IAAKC,CAAAA,MAGL,CAHcC,MAAA,CAAOT,KAAP,CAGd,CAAc,GAAd,GAAIA,KAAJ,EAAqBU,MAAOC,CAAAA,KAAP,CAAaX,KAAb,CAArB,CACE,IAAKY,CAAAA,GADP,CACa,CAAA,CADb,EAOI,GAAIR,WAAYS,CAAAA,GAAhB,EAAqBC,KAArB,CAIJ,GAHEA,KAGF,CAHgBJ,MAAA,CAAOI,KAAP,CAGhB,EADAA,KACA,CADqC,QAAvB,GAAA,MAAOA,MAAP,CAAkCA,KAAlC,CAAgD,GAAIV,WAAYW,CAAAA,OAAhB,EAAyBD,KAAzB,CAC9D,CAAI,GAAIV,WAAYY,CAAAA,cAAhB,EAAgCF,KAAhC,CAAJ,EACMG,KAMJ,CANc,GAAIb,WAAYc,CAAAA,UAAhB,EAA4BJ,KAA5B,CAMd,CALA,IAAKK,CAAAA,QAKL,CALgBF,KAAQE,CAAAA,QAKxB,CAJIC,KAIJ,CAJcH,KAAQI,CAAAA,OAAQC,CAAAA,KAAhB,CAAsB,GAAtB,CAId,CAHA,IAAKC,CAAAA,OAGL,CAHeC,MAAA,CAAOJ,KAAA,CAAQ,CAAR,CAAP,CAGf,CAFIK,KAEJ,CAFiBL,KAAA,CAAQ,CAAR,CAEjB,EAF+B,GAE/B,CADA,IAAKM,CAAAA,OACL,CADeF,MAAA,CAAOC,KAAP,CACf,CAAA,IAAKE,CAAAA,UAAL,CAAkBF,KAAWG,CAAAA,MAP/B,EASE,IAAKhB,CAAAA,GATP;AASa,CAAA,CApBb,CAPA,CAT4B,CAuC9B,GAAIV,aAAcL,CAAAA,OAAlB,EAA2BQ,aAA3B,CAA0C,CAAC,CACzCwB,IAAK,SADoC,CAEzC7B,MAAO8B,QAAgB,EAAG,CACxB,MAAO,KAAKX,CAAAA,QAAL,CAAgB,GAAhB,CAAsB,EADL,CAFe,CAAD,CAKvC,CACDU,IAAK,eADJ,CAED7B,MAAO+B,QAAsB,EAAG,CAC9B,MAAO,KAAKR,CAAAA,OAAQS,CAAAA,QAAb,EADuB,CAF/B,CALuC,CAcvC,CACDH,IAAK,eADJ,CAED7B,MAAOiC,QAAsB,EAAG,CAC9B,MAAO,KAAKP,CAAAA,OAAQM,CAAAA,QAAb,EAAwBE,CAAAA,QAAxB,CAAiC,IAAKP,CAAAA,UAAtC,CAAkD,GAAlD,CADuB,CAF/B,CAduC,CAwBvC,CACDE,IAAK,cADJ,CAED7B,MAAOmC,QAAqB,CAACC,aAAD,CAAgB,CACtCC,aAAAA,CAAM,EAAGC,CAAAA,MAAH,CAAU,IAAKR,CAAAA,OAAL,EAAV,CAA0BQ,CAAAA,MAA1B,CAAiC,IAAKP,CAAAA,aAAL,EAAjC,CAAuDO,CAAAA,MAAvD,CAA8D,IAAKL,CAAAA,aAAL,EAAqBM,CAAAA,MAArB,CAA4BH,aAA5B,CAA2C,GAA3C,CAA9D,CACV,OAAOZ,OAAA,CAAOa,aAAP,CAFmC,CAF3C,CAxBuC,CA8BvC,CACDR,IAAK,QADJ,CAED7B,MAAOwC,QAAe,EAAG,CACvB,IAAIC;AAAQ,IAAIpC,aAAJ,CAAkB,IAAK2B,CAAAA,QAAL,EAAlB,CACZS,MAAMtB,CAAAA,QAAN,CAAiB,CAACsB,KAAMtB,CAAAA,QACxB,OAAOsB,MAHgB,CAFxB,CA9BuC,CAqCvC,CACDZ,IAAK,KADJ,CAED7B,MAAO0C,QAAY,CAACC,MAAD,CAASC,UAAT,CAAqBC,aAArB,CAAoC,CACrD,IAAIC,iBAAmBC,IAAKC,CAAAA,GAAL,CAAS,IAAKf,CAAAA,aAAL,EAAqBL,CAAAA,MAA9B,CAAsCe,MAAOV,CAAAA,aAAP,EAAuBL,CAAAA,MAA7D,CAAvB,CACIqB,iBAAmB,IAAKd,CAAAA,YAAL,CAAkBW,gBAAlB,CACnBI,OAAAA,CAAuBP,MAAOR,CAAAA,YAAP,CAAoBW,gBAApB,CACvBK,WAAAA,CAAWP,UAAA,CAAWK,gBAAX,CAA6BC,MAA7B,CAAmDlB,CAAAA,QAAnD,EACXoB,cAAAA,CAAoBP,aAAA,CAAcC,gBAAd,CAGpBO,iBAAAA,CAAc,GAAIjD,WAAYc,CAAAA,UAAhB,EAA4BiC,UAA5B,CAEhB9B,WAAAA,CAAUgC,gBAAYhC,CAAAA,OACpBiC;gBAAAA,CAAkB,EAAGhB,CAAAA,MAAH,CAFNe,gBAAYE,CAAAA,WAEN,CAAuBjB,CAAAA,MAAvB,CAA8BjB,UAAQa,CAAAA,QAAR,CAAiBkB,aAAjB,CAAqC,CAArC,CAAwC,GAAxC,CAA9B,CACtB,OAAO,KAAI/C,aAAJ,CAAkB,EAAGiC,CAAAA,MAAH,CAAUgB,gBAAgBE,CAAAA,KAAhB,CAAsB,CAAtB,CAAyB,CAACJ,aAA1B,CAAV,CAAwD,GAAxD,CAA6Dd,CAAAA,MAA7D,CAAoEgB,gBAAgBE,CAAAA,KAAhB,CAAsB,CAACJ,aAAvB,CAApE,CAAlB,CAZ8C,CAFtD,CArCuC,CAqDvC,CACDvB,IAAK,KADJ,CAED7B,MAAOyD,QAAY,CAACzD,KAAD,CAAQ,CACzB,GAAI,IAAK0D,CAAAA,YAAL,EAAJ,CACE,MAAO,KAAIrD,aAAJ,CAAkBL,KAAlB,CAEL2C,MAAAA,CAAS,IAAItC,aAAJ,CAAkBL,KAAlB,CACb,OAAI2C,MAAOe,CAAAA,YAAP,EAAJ,CACS,IADT,CAGO,IAAKhB,CAAAA,GAAL,CAASC,KAAT,CAAiB,QAAS,CAACgB,IAAD,CAAOC,IAAP,CAAa,CAC5C,MAAOD,KAAP,CAAcC,IAD8B,CAAvC,CAEJ,QAAS,CAACC,GAAD,CAAM,CAChB,MAAOA,IADS,CAFX,CARkB,CAF1B,CArDuC,CAqEvC,CACDhC,IAAK,OADJ,CAED7B,MAAO8D,QAAc,CAAC9D,KAAD,CAAQ,CACvB+D,KAAAA;AAAS,IAAI1D,aAAJ,CAAkBL,KAAlB,CACb,OAAI,KAAK0D,CAAAA,YAAL,EAAJ,EAA2BK,KAAOL,CAAAA,YAAP,EAA3B,CACS,IAAIrD,aAAJ,CAAkB2D,GAAlB,CADT,CAGO,IAAKtB,CAAAA,GAAL,CAASqB,KAAT,CAAiB,QAAS,CAACJ,IAAD,CAAOC,IAAP,CAAa,CAC5C,MAAOD,KAAP,CAAcC,IAD8B,CAAvC,CAEJ,QAAS,CAACC,GAAD,CAAM,CAChB,MAAa,EAAb,CAAOA,GADS,CAFX,CALoB,CAF5B,CArEuC,CAkFvC,CACDhC,IAAK,SADJ,CAED7B,MAAOM,QAAgB,EAAG,CACxB,MAAO,KAAKC,CAAAA,KADY,CAFzB,CAlFuC,CAuFvC,CACDsB,IAAK,OADJ,CAED7B,MAAOW,QAAc,EAAG,CACtB,MAAO,KAAKC,CAAAA,GADU,CAFvB,CAvFuC,CA4FvC,CACDiB,IAAK,cADJ,CAED7B,MAAO0D,QAAqB,EAAG,CAC7B,MAAO,KAAKpD,CAAAA,OAAL,EAAP,EAAyB,IAAKK,CAAAA,KAAL,EADI,CAF9B,CA5FuC,CAiGvC,CACDkB,IAAK,QADJ,CAED7B,MAAOiE,QAAe,CAACF,MAAD,CAAS,CAC7B,MAAO,KAAK/B,CAAAA,QAAL,EAAP,IAAuC,IAAX,GAAA+B,MAAA,EAA8B,IAAK,EAAnC,GAAmBA,MAAnB,CAAuC,IAAK,EAA5C,CAAgDA,MAAO/B,CAAAA,QAAP,EAA5E,CAD6B,CAF9B,CAjGuC,CAsGvC,CACDH,IAAK,YADJ,CAED7B,MAAOkE,QAAmB,CAACH,MAAD,CAAS,CACjC,MAA0D,EAA1D;AAAO,IAAKN,CAAAA,GAAL,CAASM,MAAOvB,CAAAA,MAAP,EAAgBR,CAAAA,QAAhB,EAAT,CAAqCmC,CAAAA,QAArC,EAD0B,CAFlC,CAtGuC,CA2GvC,CACDtC,IAAK,UADJ,CAED7B,MAAOmE,QAAiB,EAAG,CACzB,MAAI,KAAKxD,CAAAA,KAAL,EAAJ,CACSqD,GADT,CAGOtD,MAAA,CAAO,IAAKsB,CAAAA,QAAL,EAAP,CAJkB,CAF1B,CA3GuC,CAmHvC,CACDH,IAAK,UADJ,CAED7B,MAAOgC,QAAiB,EAAG,CAEzB,MAD8B,EAC9B,CADWoC,SAAUxC,CAAAA,MACrB,EADoDyC,IAAAA,EACpD,GADmCD,SAAA,CAAU,CAAV,CACnC,EADgE,CAAAA,SAAA,CAAU,CAAV,CAChE,CACS,IAAK5D,CAAAA,MADd,CAGI,IAAKkD,CAAAA,YAAL,EAAJ,CACS,EADT,CAGO,GAAItD,WAAYc,CAAAA,UAAhB,EAA4B,EAAGoB,CAAAA,MAAH,CAAU,IAAKR,CAAAA,OAAL,EAAV,CAA0BQ,CAAAA,MAA1B,CAAiC,IAAKP,CAAAA,aAAL,EAAjC,CAAuD,GAAvD,CAA4DO,CAAAA,MAA5D,CAAmE,IAAKL,CAAAA,aAAL,EAAnE,CAA5B,CAAsHqC,CAAAA,OARpG,CAF1B,CAnHuC,CAA1C,CAgIA,OAAOjE,cA1KoC,CAAZ,EA4KjCV,QAAQE,CAAAA,OAAR,CAAkBQ,OAxL2G;",
"sources":["node_modules/@rc-component/mini-decimal/lib/BigIntDecimal.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$rc_component$mini_decimal$lib$BigIntDecimal\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _numberUtil = require(\"./numberUtil\");\nvar BigIntDecimal = /*#__PURE__*/function () {\n  /** BigInt will convert `0009` to `9`. We need record the len of decimal */\n\n  function BigIntDecimal(value) {\n    (0, _classCallCheck2.default)(this, BigIntDecimal);\n    (0, _defineProperty2.default)(this, \"origin\", '');\n    (0, _defineProperty2.default)(this, \"negative\", void 0);\n    (0, _defineProperty2.default)(this, \"integer\", void 0);\n    (0, _defineProperty2.default)(this, \"decimal\", void 0);\n    (0, _defineProperty2.default)(this, \"decimalLen\", void 0);\n    (0, _defineProperty2.default)(this, \"empty\", void 0);\n    (0, _defineProperty2.default)(this, \"nan\", void 0);\n    if ((0, _numberUtil.isEmpty)(value)) {\n      this.empty = true;\n      return;\n    }\n    this.origin = String(value);\n\n    // Act like Number convert\n    if (value === '-' || Number.isNaN(value)) {\n      this.nan = true;\n      return;\n    }\n    var mergedValue = value;\n\n    // We need convert back to Number since it require `toFixed` to handle this\n    if ((0, _numberUtil.isE)(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : (0, _numberUtil.num2str)(mergedValue);\n    if ((0, _numberUtil.validateNumber)(mergedValue)) {\n      var trimRet = (0, _numberUtil.trimNumber)(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split('.');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || '0';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n  (0, _createClass2.default)(BigIntDecimal, [{\n    key: \"getMark\",\n    value: function getMark() {\n      return this.negative ? '-' : '';\n    }\n  }, {\n    key: \"getIntegerStr\",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n\n    /**\n     * @private get decimal string\n     */\n  }, {\n    key: \"getDecimalStr\",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, '0');\n    }\n\n    /**\n     * @private Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */\n  }, {\n    key: \"alignDecimal\",\n    value: function alignDecimal(decimalLength) {\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\n      return BigInt(str);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: \"cal\",\n    value: function cal(offset, calculator, calDecimalLen) {\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = calculator(myAlignedDecimal, offsetAlignedDecimal).toString();\n      var nextDecimalLength = calDecimalLen(maxDecimalLength);\n\n      // We need fill string length back to `maxDecimalLength` to avoid parser failed\n      var _trimNumber = (0, _numberUtil.trimNumber)(valueStr),\n        negativeStr = _trimNumber.negativeStr,\n        trimStr = _trimNumber.trimStr;\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(nextDecimalLength + 1, '0'));\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -nextDecimalLength), \".\").concat(hydrateValueStr.slice(-nextDecimalLength)));\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n      var offset = new BigIntDecimal(value);\n      if (offset.isInvalidate()) {\n        return this;\n      }\n      return this.cal(offset, function (num1, num2) {\n        return num1 + num2;\n      }, function (len) {\n        return len;\n      });\n    }\n  }, {\n    key: \"multi\",\n    value: function multi(value) {\n      var target = new BigIntDecimal(value);\n      if (this.isInvalidate() || target.isInvalidate()) {\n        return new BigIntDecimal(NaN);\n      }\n      return this.cal(target, function (num1, num2) {\n        return num1 * num2;\n      }, function (len) {\n        return len * 2;\n      });\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n      return Number(this.toString());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (!safe) {\n        return this.origin;\n      }\n      if (this.isInvalidate()) {\n        return '';\n      }\n      return (0, _numberUtil.trimNumber)(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n  return BigIntDecimal;\n}();\nexports.default = BigIntDecimal;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","default","Object","defineProperty","value","_classCallCheck2","_createClass2","_defineProperty2","_numberUtil","BigIntDecimal","isEmpty","empty","origin","String","Number","isNaN","nan","isE","mergedValue","num2str","validateNumber","trimRet","trimNumber","negative","numbers","trimStr","split","integer","BigInt","decimalStr","decimal","decimalLen","length","key","getMark","getIntegerStr","toString","getDecimalStr","padStart","alignDecimal","decimalLength","str","concat","padEnd","negate","clone","cal","offset","calculator","calDecimalLen","maxDecimalLength","Math","max","myAlignedDecimal","offsetAlignedDecimal","valueStr","nextDecimalLength","_trimNumber","hydrateValueStr","negativeStr","slice","add","isInvalidate","num1","num2","len","multi","target","NaN","equals","lessEquals","toNumber","arguments","undefined","fullStr"]
}
