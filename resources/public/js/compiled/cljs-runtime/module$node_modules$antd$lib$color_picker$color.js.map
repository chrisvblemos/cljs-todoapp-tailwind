{
"version":3,
"file":"module$node_modules$antd$lib$color_picker$color.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/antd/lib/color-picker/color.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$antd$lib$color_picker$color\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHexFormat = exports.getHex = exports.AggregationColor = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _colorPicker = require(\"@rc-component/color-picker\");\nconst toHexFormat = (value, alpha) => (value === null || value === void 0 ? void 0 : value.replace(/[^\\w/]/g, '').slice(0, alpha ? 8 : 6)) || '';\nexports.toHexFormat = toHexFormat;\nconst getHex = (value, alpha) => value ? toHexFormat(value, alpha) : '';\nexports.getHex = getHex;\nlet AggregationColor = exports.AggregationColor = /*#__PURE__*/function () {\n  function AggregationColor(color) {\n    (0, _classCallCheck2.default)(this, AggregationColor);\n    var _a;\n    this.cleared = false;\n    // Clone from another AggregationColor\n    if (color instanceof AggregationColor) {\n      this.metaColor = color.metaColor.clone();\n      this.colors = (_a = color.colors) === null || _a === void 0 ? void 0 : _a.map(info => ({\n        color: new AggregationColor(info.color),\n        percent: info.percent\n      }));\n      this.cleared = color.cleared;\n      return;\n    }\n    const isArray = Array.isArray(color);\n    if (isArray && color.length) {\n      this.colors = color.map(_ref => {\n        let {\n          color: c,\n          percent\n        } = _ref;\n        return {\n          color: new AggregationColor(c),\n          percent\n        };\n      });\n      this.metaColor = new _colorPicker.Color(this.colors[0].color.metaColor);\n    } else {\n      this.metaColor = new _colorPicker.Color(isArray ? '' : color);\n    }\n    if (!color || isArray && !this.colors) {\n      this.metaColor = this.metaColor.setA(0);\n      this.cleared = true;\n    }\n  }\n  return (0, _createClass2.default)(AggregationColor, [{\n    key: \"toHsb\",\n    value: function toHsb() {\n      return this.metaColor.toHsb();\n    }\n  }, {\n    key: \"toHsbString\",\n    value: function toHsbString() {\n      return this.metaColor.toHsbString();\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return getHex(this.toHexString(), this.metaColor.a < 1);\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      return this.metaColor.toHexString();\n    }\n  }, {\n    key: \"toRgb\",\n    value: function toRgb() {\n      return this.metaColor.toRgb();\n    }\n  }, {\n    key: \"toRgbString\",\n    value: function toRgbString() {\n      return this.metaColor.toRgbString();\n    }\n  }, {\n    key: \"isGradient\",\n    value: function isGradient() {\n      return !!this.colors && !this.cleared;\n    }\n  }, {\n    key: \"getColors\",\n    value: function getColors() {\n      return this.colors || [{\n        color: this,\n        percent: 0\n      }];\n    }\n  }, {\n    key: \"toCssString\",\n    value: function toCssString() {\n      const {\n        colors\n      } = this;\n      // CSS line-gradient\n      if (colors) {\n        const colorsStr = colors.map(c => `${c.color.toRgbString()} ${c.percent}%`).join(', ');\n        return `linear-gradient(90deg, ${colorsStr})`;\n      }\n      return this.metaColor.toRgbString();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(color) {\n      if (!color || this.isGradient() !== color.isGradient()) {\n        return false;\n      }\n      if (!this.isGradient()) {\n        return this.toHexString() === color.toHexString();\n      }\n      return this.colors.length === color.colors.length && this.colors.every((c, i) => {\n        const target = color.colors[i];\n        return c.percent === target.percent && c.color.equals(target.color);\n      });\n    }\n  }]);\n}();\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","default","Object","defineProperty","value","toHexFormat","getHex","AggregationColor","_classCallCheck2","_createClass2","_colorPicker","alpha","replace","slice","color","_a","cleared","metaColor","clone","colors","map","info","percent","isArray","Array","length","_ref","c","Color","setA","key","toHsb","toHsbString","toHex","toHexString","a","toRgb","toRgbString","isGradient","getColors","toCssString","join","colorsStr","equals","every","i","target"]
}
