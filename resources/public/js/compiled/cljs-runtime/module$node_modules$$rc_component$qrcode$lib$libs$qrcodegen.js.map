{
"version":3,
"file":"module$node_modules$$rc_component$qrcode$lib$libs$qrcodegen.js",
"lineCount":38,
"mappings":"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",
"sources":["node_modules/@rc-component/qrcode/lib/libs/qrcodegen.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$rc_component$qrcode$lib$libs$qrcodegen\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QrSegment = exports.QrCode = exports.Mode = exports.Ecc = void 0;\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _class, _class2;\n// Copyright (c) Project Nayuki. (MIT License)\n// https://www.nayuki.io/page/qr-code-generator-library\n\n// Modification with code reorder and prettier\n\n// --------------------------------------------\n\n// Appends the given number of low-order bits of the given value\n// to the given buffer. Requires 0 <= len <= 31 and 0 <= val < 2^len.\nfunction appendBits(val, len, bb) {\n  if (len < 0 || len > 31 || val >>> len != 0) throw new RangeError('Value out of range');\n  for (var i = len - 1; i >= 0; i-- // Append bit by bit\n  ) bb.push(val >>> i & 1);\n}\n\n// Returns true iff the i'th bit of x is set to 1.\nfunction getBit(x, i) {\n  return (x >>> i & 1) != 0;\n}\n\n// Throws an exception if the given condition is false.\nfunction assert(cond) {\n  if (!cond) throw new Error('Assertion error');\n}\n\n/*---- Public helper enumeration ----*/\n/*\n * Describes how a segment's data bits are numbererpreted. Immutable.\n */\nvar Mode = exports.Mode = /*#__PURE__*/function () {\n  function Mode(modeBits, numBitsCharCount) {\n    (0, _classCallCheck2.default)(this, Mode);\n    /*-- Constructor and fields --*/\n    // The mode indicator bits, which is a unumber4 value (range 0 to 15).\n    (0, _defineProperty2.default)(this, \"modeBits\", void 0);\n    // Number of character count bits for three different version ranges.\n    (0, _defineProperty2.default)(this, \"numBitsCharCount\", void 0);\n    this.modeBits = modeBits;\n    this.numBitsCharCount = numBitsCharCount;\n  }\n\n  /*-- Method --*/\n\n  // (Package-private) Returns the bit width of the character count field for a segment in\n  // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n  (0, _createClass2.default)(Mode, [{\n    key: \"numCharCountBits\",\n    value: function numCharCountBits(ver) {\n      return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n    }\n  }]);\n  return Mode;\n}();\n/*---- Public helper enumeration ----*/\n/*\n * The error correction level in a QR Code symbol. Immutable.\n */\n_class = Mode;\n/*-- Constants --*/\n(0, _defineProperty2.default)(Mode, \"NUMERIC\", new _class(0x1, [10, 12, 14]));\n(0, _defineProperty2.default)(Mode, \"ALPHANUMERIC\", new _class(0x2, [9, 11, 13]));\n(0, _defineProperty2.default)(Mode, \"BYTE\", new _class(0x4, [8, 16, 16]));\n(0, _defineProperty2.default)(Mode, \"KANJI\", new _class(0x8, [8, 10, 12]));\n(0, _defineProperty2.default)(Mode, \"ECI\", new _class(0x7, [0, 0, 0]));\nvar Ecc = exports.Ecc = /*#__PURE__*/(0, _createClass2.default)(function Ecc(ordinal, formatBits) {\n  (0, _classCallCheck2.default)(this, Ecc);\n  // The QR Code can tolerate about 30% erroneous codewords\n  /*-- Constructor and fields --*/\n  // In the range 0 to 3 (unsigned 2-bit numbereger).\n  (0, _defineProperty2.default)(this, \"ordinal\", void 0);\n  // (Package-private) In the range 0 to 3 (unsigned 2-bit numbereger).\n  (0, _defineProperty2.default)(this, \"formatBits\", void 0);\n  this.ordinal = ordinal;\n  this.formatBits = formatBits;\n});\n/*\n * A segment of character/binary/control data in a QR Code symbol.\n * Instances of this class are immutable.\n * The mid-level way to create a segment is to take the payload data\n * and call a static factory function such as QrSegment.makeNumeric().\n * The low-level way to create a segment is to custom-make the bit buffer\n * and call the QrSegment() constructor with appropriate values.\n * This segment class imposes no length restrictions, but QR Codes have restrictions.\n * Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.\n * Any segment longer than this is meaningless for the purpose of generating QR Codes.\n */\n_class2 = Ecc;\n/*-- Constants --*/\n(0, _defineProperty2.default)(Ecc, \"LOW\", new _class2(0, 1));\n// The QR Code can tolerate about  7% erroneous codewords\n(0, _defineProperty2.default)(Ecc, \"MEDIUM\", new _class2(1, 0));\n// The QR Code can tolerate about 15% erroneous codewords\n(0, _defineProperty2.default)(Ecc, \"QUARTILE\", new _class2(2, 3));\n// The QR Code can tolerate about 25% erroneous codewords\n(0, _defineProperty2.default)(Ecc, \"HIGH\", new _class2(3, 2));\nvar QrSegment = exports.QrSegment = /*#__PURE__*/function () {\n  // Creates a new QR Code segment with the given attributes and data.\n  // The character count (numChars) must agree with the mode and the bit buffer length,\n  // but the constranumber isn't checked. The given bit buffer is cloned and stored.\n  function QrSegment(mode, numChars, bitData) {\n    (0, _classCallCheck2.default)(this, QrSegment);\n    /*-- Constructor (low level) and fields --*/\n    // The mode indicator of this segment.\n    (0, _defineProperty2.default)(this, \"mode\", void 0);\n    // The length of this segment's unencoded data. Measured in characters for\n    // numeric/alphanumeric/kanji mode, bytes for byte mode, and 0 for ECI mode.\n    // Always zero or positive. Not the same as the data's bit length.\n    (0, _defineProperty2.default)(this, \"numChars\", void 0);\n    // The data bits of this segment. Accessed through getData().\n    (0, _defineProperty2.default)(this, \"bitData\", void 0);\n    this.mode = mode;\n    this.numChars = numChars;\n    this.bitData = bitData;\n    if (numChars < 0) throw new RangeError('Invalid argument');\n    this.bitData = bitData.slice(); // Make defensive copy\n  }\n\n  /*-- Methods --*/\n\n  // Returns a new copy of the data bits of this segment.\n  (0, _createClass2.default)(QrSegment, [{\n    key: \"getData\",\n    value: function getData() {\n      return this.bitData.slice(); // Make defensive copy\n    }\n\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\n  }], [{\n    key: \"makeBytes\",\n    value: /*-- Static factory functions (mid level) --*/\n\n    // Returns a segment representing the given binary data encoded in\n    // byte mode. All input byte arrays are acceptable. Any text string\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n    function makeBytes(data) {\n      var bb = [];\n      var _iterator = (0, _createForOfIteratorHelper2.default)(data),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var b = _step.value;\n          appendBits(b, 8, bb);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return new QrSegment(Mode.BYTE, data.length, bb);\n    }\n\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n  }, {\n    key: \"makeNumeric\",\n    value: function makeNumeric(digits) {\n      if (!QrSegment.isNumeric(digits)) throw new RangeError('String contains non-numeric characters');\n      var bb = [];\n      for (var i = 0; i < digits.length;) {\n        // Consume up to 3 digits per iteration\n        var n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new QrSegment(Mode.NUMERIC, digits.length, bb);\n    }\n\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n  }, {\n    key: \"makeAlphanumeric\",\n    value: function makeAlphanumeric(text) {\n      if (!QrSegment.isAlphanumeric(text)) throw new RangeError('String contains unencodable characters in alphanumeric mode');\n      var bb = [];\n      var i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        // Process groups of 2\n        var temp = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        // 1 character remaining\n        appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new QrSegment(Mode.ALPHANUMERIC, text.length, bb);\n    }\n\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n  }, {\n    key: \"makeSegments\",\n    value: function makeSegments(text) {\n      // Select the most efficient segment encoding automatically\n      if (text == '') return [];else if (QrSegment.isNumeric(text)) return [QrSegment.makeNumeric(text)];else if (QrSegment.isAlphanumeric(text)) return [QrSegment.makeAlphanumeric(text)];else return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];\n    }\n\n    // Returns a segment representing an Extended Channel Interpretation\n    // (ECI) designator with the given assignment value.\n  }, {\n    key: \"makeEci\",\n    value: function makeEci(assignVal) {\n      var bb = [];\n      if (assignVal < 0) throw new RangeError('ECI assignment value out of range');else if (assignVal < 1 << 7) appendBits(assignVal, 8, bb);else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1000000) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else throw new RangeError('ECI assignment value out of range');\n      return new QrSegment(Mode.ECI, 0, bb);\n    }\n\n    // Tests whether the given string can be encoded as a segment in numeric mode.\n    // A string is encodable iff each character is in the range 0 to 9.\n  }, {\n    key: \"isNumeric\",\n    value: function isNumeric(text) {\n      return QrSegment.NUMERIC_REGEX.test(text);\n    }\n\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n  }, {\n    key: \"isAlphanumeric\",\n    value: function isAlphanumeric(text) {\n      return QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n  }, {\n    key: \"getTotalBits\",\n    value: function getTotalBits(segs, version) {\n      var result = 0;\n      var _iterator2 = (0, _createForOfIteratorHelper2.default)(segs),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var seg = _step2.value;\n          var ccbits = seg.mode.numCharCountBits(version);\n          if (seg.numChars >= 1 << ccbits) return Infinity; // The segment's length doesn't fit the field's bit width\n          result += 4 + ccbits + seg.bitData.length;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return result;\n    }\n\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\n  }, {\n    key: \"toUtf8ByteArray\",\n    value: function toUtf8ByteArray(input) {\n      var str = encodeURI(input);\n      var result = [];\n      for (var i = 0; i < str.length; i++) {\n        if (str.charAt(i) != '%') result.push(str.charCodeAt(i));else {\n          result.push(parseInt(str.substring(i + 1, i + 3), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n\n    /*-- Constants --*/\n\n    // Describes precisely all strings that are encodable in numeric mode.\n  }]);\n  return QrSegment;\n}();\n/*\n * A QR Code symbol, which is a type of two-dimension barcode.\n * Invented by Denso Wave and described in the ISO/IEC 18004 standard.\n * Instances of this class represent an immutable square grid of dark and light cells.\n * The class provides static factory functions to create a QR Code from text or binary data.\n * The class covers the QR Code Model 2 specification, supporting all versions (sizes)\n * from 1 to 40, all 4 error correction levels, and 4 character encoding modes.\n *\n * Ways to create a QR Code object:\n * - High level: Take the payload data and call QrCode.encodeText() or QrCode.encodeBinary().\n * - Mid level: Custom-make the list of segments and call QrCode.encodeSegments().\n * - Low level: Custom-make the array of data codeword bytes (including\n *   segment headers and final padding, excluding error correction codewords),\n *   supply the appropriate version number, and call the QrCode() constructor.\n * (Note that all ways require supplying the desired error correction level.)\n */\n(0, _defineProperty2.default)(QrSegment, \"NUMERIC_REGEX\", /^[0-9]*$/);\n// Describes precisely all strings that are encodable in alphanumeric mode.\n(0, _defineProperty2.default)(QrSegment, \"ALPHANUMERIC_REGEX\", /^[A-Z0-9 $%*+.\\/:-]*$/);\n// The set of all legal characters in alphanumeric mode,\n// where each character value maps to the index in the string.\n(0, _defineProperty2.default)(QrSegment, \"ALPHANUMERIC_CHARSET\", '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:');\nvar QrCode = exports.QrCode = /*#__PURE__*/function () {\n  // Creates a new QR Code with the given version number,\n  // error correction level, data codeword bytes, and mask number.\n  // This is a low-level API that most users should not use directly.\n  // A mid-level API is the encodeSegments() function.\n  function QrCode(\n  // The version number of this QR Code, which is between 1 and 40 (inclusive).\n  // This determines the size of this barcode.\n  version,\n  // The error correction level used in this QR Code.\n  errorCorrectionLevel, dataCodewords, oriMsk) {\n    (0, _classCallCheck2.default)(this, QrCode);\n    /*-- Fields --*/\n    // The width and height of this QR Code, measured in modules, between\n    // 21 and 177 (inclusive). This is equal to version * 4 + 17.\n    (0, _defineProperty2.default)(this, \"size\", void 0);\n    // The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).\n    // Even if a QR Code is created with automatic masking requested (mask = -1),\n    // the resulting object still has a mask value between 0 and 7.\n    (0, _defineProperty2.default)(this, \"mask\", void 0);\n    // The modules of this QR Code (false = light, true = dark).\n    // Immutable after constructor finishes. Accessed through getModule().\n    (0, _defineProperty2.default)(this, \"modules\", []);\n    // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n    (0, _defineProperty2.default)(this, \"isFunction\", []);\n    /*-- Constructor (low level) and fields --*/\n    // The version number of this QR Code, which is between 1 and 40 (inclusive).\n    // This determines the size of this barcode.\n    (0, _defineProperty2.default)(this, \"version\", void 0);\n    // The error correction level used in this QR Code.\n    (0, _defineProperty2.default)(this, \"errorCorrectionLevel\", void 0);\n    var msk = oriMsk;\n    this.version = version;\n    this.errorCorrectionLevel = errorCorrectionLevel;\n    // Check scalar arguments\n    if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION) throw new RangeError('Version value out of range');\n    if (msk < -1 || msk > 7) throw new RangeError('Mask value out of range');\n    this.size = version * 4 + 17;\n\n    // Initialize both grids to be size*size arrays of Boolean false\n    var row = [];\n    for (var i = 0; i < this.size; i++) row.push(false);\n    for (var _i = 0; _i < this.size; _i++) {\n      this.modules.push(row.slice()); // Initially all light\n      this.isFunction.push(row.slice());\n    }\n\n    // Compute ECC, draw modules\n    this.drawFunctionPatterns();\n    var allCodewords = this.addEccAndInterleave(dataCodewords);\n    this.drawCodewords(allCodewords);\n\n    // Do masking\n    if (msk == -1) {\n      // Automatically choose best mask\n      var minPenalty = 1000000000;\n      for (var _i2 = 0; _i2 < 8; _i2++) {\n        this.applyMask(_i2);\n        this.drawFormatBits(_i2);\n        var penalty = this.getPenaltyScore();\n        if (penalty < minPenalty) {\n          msk = _i2;\n          minPenalty = penalty;\n        }\n        this.applyMask(_i2); // Undoes the mask due to XOR\n      }\n    }\n    assert(0 <= msk && msk <= 7);\n    this.mask = msk;\n    this.applyMask(msk); // Apply the final choice of mask\n    this.drawFormatBits(msk); // Overwrite old format bits\n\n    this.isFunction = [];\n  }\n\n  /*-- Accessor methods --*/\n\n  // Returns the color of the module (pixel) at the given coordinates, which is false\n  // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n  // If the given coordinates are out of bounds, then false (light) is returned.\n  (0, _createClass2.default)(QrCode, [{\n    key: \"getModule\",\n    value: function getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n\n    // Modified to expose modules for easy access\n  }, {\n    key: \"getModules\",\n    value: function getModules() {\n      return this.modules;\n    }\n\n    /*-- Private helper methods for constructor: Drawing function modules --*/\n\n    // Reads this object's version field, and draws and marks all function modules.\n  }, {\n    key: \"drawFunctionPatterns\",\n    value: function drawFunctionPatterns() {\n      // Draw horizontal and vertical timing patterns\n      for (var i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n\n      // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n\n      // Draw numerous alignment patterns\n      var alignPatPos = this.getAlignmentPatternPositions();\n      var numAlign = alignPatPos.length;\n      for (var _i3 = 0; _i3 < numAlign; _i3++) {\n        for (var j = 0; j < numAlign; j++) {\n          // Don't draw on the three finder corners\n          if (!(_i3 == 0 && j == 0 || _i3 == 0 && j == numAlign - 1 || _i3 == numAlign - 1 && j == 0)) this.drawAlignmentPattern(alignPatPos[_i3], alignPatPos[j]);\n        }\n      }\n\n      // Draw configuration data\n      this.drawFormatBits(0); // Dummy mask value; overwritten later in the constructor\n      this.drawVersion();\n    }\n\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n  }, {\n    key: \"drawFormatBits\",\n    value: function drawFormatBits(mask) {\n      // Calculate error correction code and pack bits\n      var data = this.errorCorrectionLevel.formatBits << 3 | mask; // errCorrLvl is unumber2, mask is unumber3\n      var rem = data;\n      for (var i = 0; i < 10; i++) rem = rem << 1 ^ (rem >>> 9) * 0x537;\n      var bits = (data << 10 | rem) ^ 0x5412; // unumber15\n      assert(bits >>> 15 == 0);\n\n      // Draw first copy\n      for (var _i4 = 0; _i4 <= 5; _i4++) this.setFunctionModule(8, _i4, getBit(bits, _i4));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (var _i5 = 9; _i5 < 15; _i5++) this.setFunctionModule(14 - _i5, 8, getBit(bits, _i5));\n\n      // Draw second copy\n      for (var _i6 = 0; _i6 < 8; _i6++) this.setFunctionModule(this.size - 1 - _i6, 8, getBit(bits, _i6));\n      for (var _i7 = 8; _i7 < 15; _i7++) this.setFunctionModule(8, this.size - 15 + _i7, getBit(bits, _i7));\n      this.setFunctionModule(8, this.size - 8, true); // Always dark\n    }\n\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n  }, {\n    key: \"drawVersion\",\n    value: function drawVersion() {\n      if (this.version < 7) return;\n\n      // Calculate error correction code and pack bits\n      var rem = this.version; // version is unumber6, in the range [7, 40]\n      for (var i = 0; i < 12; i++) rem = rem << 1 ^ (rem >>> 11) * 0x1f25;\n      var bits = this.version << 12 | rem; // unumber18\n      assert(bits >>> 18 == 0);\n\n      // Draw two copies\n      for (var _i8 = 0; _i8 < 18; _i8++) {\n        var color = getBit(bits, _i8);\n        var a = this.size - 11 + _i8 % 3;\n        var b = Math.floor(_i8 / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n  }, {\n    key: \"drawFinderPattern\",\n    value: function drawFinderPattern(x, y) {\n      for (var dy = -4; dy <= 4; dy++) {\n        for (var dx = -4; dx <= 4; dx++) {\n          var dist = Math.max(Math.abs(dx), Math.abs(dy)); // Chebyshev/infinity norm\n          var xx = x + dx;\n          var yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size) this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n  }, {\n    key: \"drawAlignmentPattern\",\n    value: function drawAlignmentPattern(x, y) {\n      for (var dy = -2; dy <= 2; dy++) {\n        for (var dx = -2; dx <= 2; dx++) this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n  }, {\n    key: \"setFunctionModule\",\n    value: function setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n\n    /*-- Private helper methods for constructor: Codewords and masking --*/\n\n    // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n  }, {\n    key: \"addEccAndInterleave\",\n    value: function addEccAndInterleave(data) {\n      var ver = this.version;\n      var ecl = this.errorCorrectionLevel;\n      if (data.length != QrCode.getNumDataCodewords(ver, ecl)) throw new RangeError('Invalid argument');\n\n      // Calculate parameter numbers\n      var numBlocks = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      var blockEccLen = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      var rawCodewords = Math.floor(QrCode.getNumRawDataModules(ver) / 8);\n      var numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      var shortBlockLen = Math.floor(rawCodewords / numBlocks);\n\n      // Split data numbero blocks and append ECC to each block\n      var blocks = [];\n      var rsDiv = QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (var i = 0, k = 0; i < numBlocks; i++) {\n        var dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        var ecc = QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks) dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n\n      // Interleave (not concatenate) the bytes from every block numbero a single sequence\n      var result = [];\n      var _loop = function _loop(_i9) {\n        blocks.forEach(function (block, j) {\n          // Skip the padding byte in short blocks\n          if (_i9 != shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[_i9]);\n        });\n      };\n      for (var _i9 = 0; _i9 < blocks[0].length; _i9++) {\n        _loop(_i9);\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n  }, {\n    key: \"drawCodewords\",\n    value: function drawCodewords(data) {\n      if (data.length != Math.floor(QrCode.getNumRawDataModules(this.version) / 8)) throw new RangeError('Invalid argument');\n      var i = 0; // Bit index numbero the data\n      // Do the funny zigzag scan\n      for (var right = this.size - 1; right >= 1; right -= 2) {\n        // Index of right column in each column pair\n        if (right == 6) right = 5;\n        for (var vert = 0; vert < this.size; vert++) {\n          // Vertical counter\n          for (var j = 0; j < 2; j++) {\n            var x = right - j; // Actual x coordinate\n            var upward = (right + 1 & 2) == 0;\n            var y = upward ? this.size - 1 - vert : vert; // Actual y coordinate\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n            // If this QR Code has any remainder bits (0 to 7), they were assigned as\n            // 0/false/light by the constructor and are left unchanged by this method\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n  }, {\n    key: \"applyMask\",\n    value: function applyMask(mask) {\n      if (mask < 0 || mask > 7) throw new RangeError('Mask value out of range');\n      for (var y = 0; y < this.size; y++) {\n        for (var x = 0; x < this.size; x++) {\n          var invert = void 0;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error('Unreachable');\n          }\n          if (!this.isFunction[y][x] && invert) this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n  }, {\n    key: \"getPenaltyScore\",\n    value: function getPenaltyScore() {\n      var result = 0;\n\n      // Adjacent modules in row having same color, and finder-like patterns\n      for (var y = 0; y < this.size; y++) {\n        var runColor = false;\n        var runX = 0;\n        var runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (var x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5) result += QrCode.PENALTY_N1;else if (runX > 5) result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3;\n      }\n      // Adjacent modules in column having same color, and finder-like patterns\n      for (var _x = 0; _x < this.size; _x++) {\n        var _runColor = false;\n        var runY = 0;\n        var _runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (var _y = 0; _y < this.size; _y++) {\n          if (this.modules[_y][_x] == _runColor) {\n            runY++;\n            if (runY == 5) result += QrCode.PENALTY_N1;else if (runY > 5) result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, _runHistory);\n            if (!_runColor) result += this.finderPenaltyCountPatterns(_runHistory) * QrCode.PENALTY_N3;\n            _runColor = this.modules[_y][_x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(_runColor, runY, _runHistory) * QrCode.PENALTY_N3;\n      }\n\n      // 2*2 blocks of modules having same color\n      for (var _y2 = 0; _y2 < this.size - 1; _y2++) {\n        for (var _x2 = 0; _x2 < this.size - 1; _x2++) {\n          var color = this.modules[_y2][_x2];\n          if (color == this.modules[_y2][_x2 + 1] && color == this.modules[_y2 + 1][_x2] && color == this.modules[_y2 + 1][_x2 + 1]) result += QrCode.PENALTY_N2;\n        }\n      }\n\n      // Balance of dark and light modules\n      var dark = 0;\n      var _iterator3 = (0, _createForOfIteratorHelper2.default)(this.modules),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var row = _step3.value;\n          dark = row.reduce(function (sum, color) {\n            return sum + (color ? 1 : 0);\n          }, dark);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      var total = this.size * this.size; // Note that size is odd, so dark/total != 1/2\n      // Compute the smallest numbereger k >= 0 such that (45-5k)% <= dark/total <= (55+5k)%\n      var k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888); // Non-tight upper bound based on default values of PENALTY_N1, ..., N4\n      return result;\n    }\n\n    /*-- Private helper functions --*/\n\n    // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of numberegers.\n  }, {\n    key: \"getAlignmentPatternPositions\",\n    value: function getAlignmentPatternPositions() {\n      if (this.version == 1) return [];else {\n        var numAlign = Math.floor(this.version / 7) + 2;\n        var step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        var result = [6];\n        for (var pos = this.size - 7; result.length < numAlign; pos -= step) result.splice(1, 0, pos);\n        return result;\n      }\n    }\n\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n  }, {\n    key: \"finderPenaltyCountPatterns\",\n    value:\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    function finderPenaltyCountPatterns(runHistory) {\n      var n = runHistory[1];\n      assert(n <= this.size * 3);\n      var core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n  }, {\n    key: \"finderPenaltyTerminateAndCount\",\n    value: function finderPenaltyTerminateAndCount(currentRunColor, oriCurrentRunLength, runHistory) {\n      var currentRunLength = oriCurrentRunLength;\n      if (currentRunColor) {\n        // Terminate dark run\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size; // Add light border to final run\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n  }, {\n    key: \"finderPenaltyAddHistory\",\n    value: function finderPenaltyAddHistory(oriCurrentRunLength, runHistory) {\n      var currentRunLength = oriCurrentRunLength;\n      if (runHistory[0] == 0) currentRunLength += this.size; // Add light border to initial run\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n\n    /*-- Constants and tables --*/\n\n    // The minimum version number supported in the QR Code Model 2 standard.\n  }], [{\n    key: \"encodeText\",\n    value: /*-- Static factory functions (high level) --*/\n\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n    // Unicode code ponumbers (not UTF-16 code units) if the low error correction level is used. The smallest possible\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n    // ecl argument if it can be done without increasing the version.\n    function encodeText(text, ecl) {\n      var segs = QrSegment.makeSegments(text);\n      return QrCode.encodeSegments(segs, ecl);\n    }\n\n    // Returns a QR Code representing the given binary data at the given error correction level.\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n  }, {\n    key: \"encodeBinary\",\n    value: function encodeBinary(data, ecl) {\n      var seg = QrSegment.makeBytes(data);\n      return QrCode.encodeSegments([seg], ecl);\n    }\n\n    /*-- Static factory functions (mid level) --*/\n\n    // Returns a QR Code representing the given segments with the given encoding parameters.\n    // The smallest possible QR Code version within the given range is automatically\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n    // may be higher than the ecl argument if it can be done without increasing the\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n    // This function allows the user to create a custom sequence of segments that switches\n    // between modes (such as alphanumeric and byte) to encode text in less space.\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n  }, {\n    key: \"encodeSegments\",\n    value: function encodeSegments(segs, oriEcl) {\n      var minVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var maxVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;\n      var mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n      var boostEcl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n      if (!(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION) || mask < -1 || mask > 7) throw new RangeError('Invalid value');\n\n      // Find the minimal version number to use\n      var version;\n      var dataUsedBits;\n      for (version = minVersion;; version++) {\n        var _dataCapacityBits = QrCode.getNumDataCodewords(version, oriEcl) * 8; // Number of data bits available\n        var usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= _dataCapacityBits) {\n          dataUsedBits = usedBits;\n          break; // This version number is found to be suitable\n        }\n        if (version >= maxVersion)\n          // All versions in the range could not fit the given data\n          throw new RangeError('Data too long');\n      }\n      var ecl = oriEcl;\n      // Increase the error correction level while the data still fits in the current version number\n      for (var _i10 = 0, _arr = [Ecc.MEDIUM, Ecc.QUARTILE, Ecc.HIGH]; _i10 < _arr.length; _i10++) {\n        var newEcl = _arr[_i10];\n        // From low to high\n        if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) ecl = newEcl;\n      }\n\n      // Concatenate all segments to create the data bit string\n      var bb = [];\n      var _iterator4 = (0, _createForOfIteratorHelper2.default)(segs),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var seg = _step4.value;\n          appendBits(seg.mode.modeBits, 4, bb);\n          appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n          var _iterator5 = (0, _createForOfIteratorHelper2.default)(seg.getData()),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var b = _step5.value;\n              bb.push(b);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      assert(bb.length == dataUsedBits);\n\n      // Add terminator and pad up to a byte if applicable\n      var dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n\n      // Pad with alternating bytes until data capacity is reached\n      for (var padByte = 0xec; bb.length < dataCapacityBits; padByte ^= 0xec ^ 0x11) appendBits(padByte, 8, bb);\n\n      // Pack bits numbero bytes in big endian\n      var dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length) dataCodewords.push(0);\n      bb.forEach(function (b, i) {\n        return dataCodewords[i >>> 3] |= b << 7 - (i & 7);\n      });\n\n      // Create the QR Code object\n      return new QrCode(version, ecl, dataCodewords, mask);\n    }\n  }, {\n    key: \"getNumRawDataModules\",\n    value: function getNumRawDataModules(ver) {\n      if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION) throw new RangeError('Version number out of range');\n      var result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        var numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7) result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n  }, {\n    key: \"getNumDataCodewords\",\n    value: function getNumDataCodewords(ver, ecl) {\n      return Math.floor(QrCode.getNumRawDataModules(ver) / 8) - QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n  }, {\n    key: \"reedSolomonComputeDivisor\",\n    value: function reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255) throw new RangeError('Degree out of range');\n      // Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\n      // For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the unumber8 array [255, 8, 93].\n      var result = [];\n      for (var i = 0; i < degree - 1; i++) result.push(0);\n      result.push(1); // Start off with the monomial x^0\n\n      // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),\n      // and drop the highest monomial term which is always 1x^degree.\n      // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).\n      var root = 1;\n      for (var _i11 = 0; _i11 < degree; _i11++) {\n        // Multiply the current product by (x - r^i)\n        for (var j = 0; j < result.length; j++) {\n          result[j] = QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length) result[j] ^= result[j + 1];\n        }\n        root = QrCode.reedSolomonMultiply(root, 0x02);\n      }\n      return result;\n    }\n\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n  }, {\n    key: \"reedSolomonComputeRemainder\",\n    value: function reedSolomonComputeRemainder(data, divisor) {\n      var result = divisor.map(function () {\n        return 0;\n      });\n      var _iterator6 = (0, _createForOfIteratorHelper2.default)(data),\n        _step6;\n      try {\n        var _loop2 = function _loop2() {\n          var b = _step6.value;\n          // Polynomial division\n          var factor = b ^ result.shift();\n          result.push(0);\n          divisor.forEach(function (coef, i) {\n            return result[i] ^= QrCode.reedSolomonMultiply(coef, factor);\n          });\n        };\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          _loop2();\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return result;\n    }\n\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n    // are unsigned 8-bit numberegers. This could be implemented as a lookup table of 256*256 entries of unumber8.\n  }, {\n    key: \"reedSolomonMultiply\",\n    value: function reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0) throw new RangeError('Byte out of range');\n      // Russian peasant multiplication\n      var z = 0;\n      for (var i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 0x11d;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n  }]);\n  return QrCode;\n}();\n(0, _defineProperty2.default)(QrCode, \"MIN_VERSION\", 1);\n// The maximum version number supported in the QR Code Model 2 standard.\n(0, _defineProperty2.default)(QrCode, \"MAX_VERSION\", 40);\n// For use in getPenaltyScore(), when evaluating which mask is best.\n(0, _defineProperty2.default)(QrCode, \"PENALTY_N1\", 3);\n(0, _defineProperty2.default)(QrCode, \"PENALTY_N2\", 3);\n(0, _defineProperty2.default)(QrCode, \"PENALTY_N3\", 40);\n(0, _defineProperty2.default)(QrCode, \"PENALTY_N4\", 10);\n(0, _defineProperty2.default)(QrCode, \"ECC_CODEWORDS_PER_BLOCK\", [\n// Version: (note that index 0 is for padding, and is set to an illegal value)\n//0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n[-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n// Low\n[-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n// Medium\n[-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n// Quartile\n[-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30] // High\n]);\n(0, _defineProperty2.default)(QrCode, \"NUM_ERROR_CORRECTION_BLOCKS\", [\n// Version: (note that index 0 is for padding, and is set to an illegal value)\n//0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n[-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n// Low\n[-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n// Medium\n[-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n// Quartile\n[-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81] // High\n]);\n};"],
"names":["shadow$provide","global","require","module","exports","appendBits","val","len","bb","RangeError","i","push","assert","cond","Error","_interopRequireDefault","default","Object","defineProperty","value","QrSegment","QrCode","Mode","Ecc","_createForOfIteratorHelper2","_classCallCheck2","_createClass2","_defineProperty2","modeBits","numBitsCharCount","key","numCharCountBits","ver","Math","floor","ordinal","formatBits","mode","numChars","bitData","slice","getData","makeBytes","data","_iterator","_step","s","done","n","err","e","f","BYTE","length","makeNumeric","digits","isNumeric","min","parseInt","substring","NUMERIC","makeAlphanumeric","text","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","indexOf","charAt","ALPHANUMERIC","makeSegments","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","getTotalBits","segs","version","result","_iterator2","_step2","seg","ccbits","Infinity","input","str","encodeURI","charCodeAt","errorCorrectionLevel","dataCodewords","oriMsk","MIN_VERSION","MAX_VERSION","msk","size","row","_i","modules","isFunction","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","_i2","applyMask","drawFormatBits","penalty","getPenaltyScore","mask","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","_i3","j","drawAlignmentPattern","drawVersion","rem","bits","_i4","_i5","_i6","_i7","_i8","color","a","b","dy","dx","dist","max","abs","xx","yy","isDark","ecl","getNumDataCodewords","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","_loop","_i9","forEach","block","right","vert","invert","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","_x","_runColor","runY","_runHistory","_y","_y2","_x2","PENALTY_N2","dark","_iterator3","_step3","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","core","currentRunColor","oriCurrentRunLength","currentRunLength","pop","unshift","encodeText","encodeSegments","encodeBinary","oriEcl","minVersion","arguments","undefined","maxVersion","boostEcl","dataUsedBits","_dataCapacityBits","usedBits","_i10","_arr","MEDIUM","QUARTILE","HIGH","newEcl","_iterator4","_step4","_iterator5","_step5","dataCapacityBits","padByte","degree","root","_i11","reedSolomonMultiply","divisor","map","_iterator6","_step6","_loop2","factor","shift","coef","z"]
}
