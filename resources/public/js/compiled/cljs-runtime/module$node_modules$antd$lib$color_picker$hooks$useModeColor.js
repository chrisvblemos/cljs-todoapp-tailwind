shadow$provide.module$node_modules$antd$lib$color_picker$hooks$useModeColor=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=function(defaultValue,value,mode){const [locale]=(0,_locale.useLocale)("ColorPicker"),[mergedColor,setMergedColor]=(0,_useMergedState.default)(defaultValue,
{value}),[modeState,setModeState]=React.useState("single"),[modeOptionList,modeSet]=React.useMemo(()=>{var list=(Array.isArray(mode)?mode:[mode]).filter(m=>m);list.length||list.push("single");const modes=new Set(list),optionList=[];list=(modeType,localeTxt)=>{modes.has(modeType)&&optionList.push({label:localeTxt,value:modeType})};list("single",locale.singleColor);list("gradient",locale.gradientColor);return[optionList,modes]},[mode]),[cacheColor,setCacheColor]=React.useState(null);defaultValue=(0,_useEvent.default)(nextColor=>
{setCacheColor(nextColor);setMergedColor(nextColor)});const postColor=React.useMemo(()=>{const colorObj=(0,_util.generateColor)(mergedColor||"");return colorObj.equals(cacheColor)?cacheColor:colorObj},[mergedColor,cacheColor]);value=React.useMemo(()=>{var _a;return modeSet.has(modeState)?modeState:null===(_a=modeOptionList[0])||void 0===_a?void 0:_a.value},[modeSet,modeState,modeOptionList]);React.useEffect(()=>{setModeState(postColor.isGradient()?"gradient":"single")},[postColor]);return[postColor,
defaultValue,value,setModeState,modeOptionList]};var React=module(require("module$node_modules$react$index")),_useEvent=global(require("module$node_modules$rc_util$lib$hooks$useEvent")),_useMergedState=global(require("module$node_modules$rc_util$lib$hooks$useMergedState")),_locale=require("module$node_modules$antd$lib$locale$index"),_util=require("module$node_modules$antd$lib$color_picker$util")}
//# sourceMappingURL=module$node_modules$antd$lib$color_picker$hooks$useModeColor.js.map
