shadow$provide.module$node_modules$antd$lib$form$FormItem$index=function(global,require,module,exports){function isSimilarControl(a,b){const keysA=Object.keys(a),keysB=Object.keys(b);return keysA.length===keysB.length&&keysA.every(key=>{const propValueA=a[key];key=b[key];return propValueA===key||"function"===typeof propValueA||"function"===typeof key})}function genEmptyMeta(){return{errors:[],warnings:[],touched:!1,validating:!1,name:[],validated:!1}}"use client";module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _toConsumableArray2=global(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),React=module(require("module$node_modules$react$index")),_classnames=global(require("module$node_modules$classnames$index")),_rcFieldForm=require("module$node_modules$rc_field_form$lib$index"),_useState=global(require("module$node_modules$rc_util$lib$hooks$useState")),
_ref2=require("module$node_modules$rc_util$lib$ref"),_reactNode=require("module$node_modules$antd$lib$_util$reactNode"),_warning=require("module$node_modules$antd$lib$_util$warning"),_configProvider=require("module$node_modules$antd$lib$config_provider$index"),_useCSSVarCls=global(require("module$node_modules$antd$lib$config_provider$hooks$useCSSVarCls")),_context=require("module$node_modules$antd$lib$form$context"),_useChildren=global(require("module$node_modules$antd$lib$form$hooks$useChildren"));
module=global(require("module$node_modules$antd$lib$form$hooks$useFormItemStatus"));var _useFrameState=global(require("module$node_modules$antd$lib$form$hooks$useFrameState")),_useItemRef=global(require("module$node_modules$antd$lib$form$hooks$useItemRef")),_style=global(require("module$node_modules$antd$lib$form$style$index")),_util=require("module$node_modules$antd$lib$form$util"),_ItemHolder=global(require("module$node_modules$antd$lib$form$FormItem$ItemHolder")),_StatusProvider=global(require("module$node_modules$antd$lib$form$FormItem$StatusProvider"));
const MemoInput=React.memo(_ref=>{({children:_ref}=_ref);return _ref},(prev,next)=>isSimilarControl(prev.control,next.control)&&prev.update===next.update&&prev.childProps.length===next.childProps.length&&prev.childProps.every((value,index)=>value===next.childProps[index]));require=function(props){function renderLayout(baseChildren,fieldId,isRequired){return noStyle&&!hidden?React.createElement(_StatusProvider.default,{prefixCls,hasFeedback:props.hasFeedback,validateStatus:props.validateStatus,meta,
errors:mergedErrors,warnings:mergedWarnings,noStyle:!0},baseChildren):React.createElement(_ItemHolder.default,Object.assign({key:"row"},props,{className:(0,_classnames.default)(className,cssVarCls,rootCls,hashId),prefixCls,fieldId,isRequired,errors:mergedErrors,warnings:mergedWarnings,meta,onSubItemMetaChange,layout}),baseChildren)}const {name,noStyle,className,dependencies,prefixCls:customizePrefixCls,shouldUpdate,rules,children,required,label,messageVariables,trigger="onChange",validateTrigger,
hidden,help,layout}=props;var {getPrefixCls}=React.useContext(_configProvider.ConfigContext);const {name:formName}=React.useContext(_context.FormContext),mergedChildren=(0,_useChildren.default)(children),isRenderProps="function"===typeof mergedChildren,notifyParentMetaChange=React.useContext(_context.NoStyleItemContext),{validateTrigger:contextValidateTrigger}=React.useContext(_rcFieldForm.FieldContext),mergedValidateTrigger=void 0!==validateTrigger?validateTrigger:contextValidateTrigger,hasName=
!(void 0===name||null===name),prefixCls=getPrefixCls("form",customizePrefixCls),rootCls=(0,_useCSSVarCls.default)(prefixCls),[wrapCSSVar,hashId,cssVarCls]=(0,_style.default)(prefixCls,rootCls),warning=(0,_warning.devUseWarning)("Form.Item");warning(null!==name,"usage","`null` is passed as `name` property");const listContext=React.useContext(_rcFieldForm.ListContext),fieldKeyPathRef=React.useRef(null),[subFieldErrors,setSubFieldErrors]=(0,_useFrameState.default)({}),[meta,setMeta]=(0,_useState.default)(()=>
genEmptyMeta()),onSubItemMetaChange=(subMeta,uniqueKeys)=>{setSubFieldErrors(prevSubFieldErrors=>{prevSubFieldErrors=Object.assign({},prevSubFieldErrors);const mergedNameKey=[].concat((0,_toConsumableArray2.default)(subMeta.name.slice(0,-1)),(0,_toConsumableArray2.default)(uniqueKeys)).join("__SPLIT__");subMeta.destroy?delete prevSubFieldErrors[mergedNameKey]:prevSubFieldErrors[mergedNameKey]=subMeta;return prevSubFieldErrors})},[mergedErrors,mergedWarnings]=React.useMemo(()=>{const errorList=(0,_toConsumableArray2.default)(meta.errors),
warningList=(0,_toConsumableArray2.default)(meta.warnings);Object.values(subFieldErrors).forEach(subFieldError=>{errorList.push.apply(errorList,(0,_toConsumableArray2.default)(subFieldError.errors||[]));warningList.push.apply(warningList,(0,_toConsumableArray2.default)(subFieldError.warnings||[]))});return[errorList,warningList]},[subFieldErrors,meta.errors,meta.warnings]),getItemRef=(0,_useItemRef.default)();if(!hasName&&!isRenderProps&&!dependencies)return wrapCSSVar(renderLayout(mergedChildren));
getPrefixCls={};"string"===typeof label?getPrefixCls.label=label:name&&(getPrefixCls.label=String(name));messageVariables&&(getPrefixCls=Object.assign(Object.assign({},getPrefixCls),messageVariables));return wrapCSSVar(React.createElement(_rcFieldForm.Field,Object.assign({},props,{messageVariables:getPrefixCls,trigger,validateTrigger:mergedValidateTrigger,onMetaChange:nextMeta=>{const keyInfo=null===listContext||void 0===listContext?void 0:listContext.getKey(nextMeta.name);setMeta(nextMeta.destroy?
genEmptyMeta():nextMeta,!0);if(noStyle&&!1!==help&&notifyParentMetaChange){let namePath=nextMeta.name;if(nextMeta.destroy)namePath=fieldKeyPathRef.current||namePath;else if(void 0!==keyInfo){const [fieldKey,restPath]=keyInfo;namePath=[fieldKey].concat((0,_toConsumableArray2.default)(restPath));fieldKeyPathRef.current=namePath}notifyParentMetaChange(nextMeta,namePath)}}}),(control,renderMeta,context)=>{renderMeta=(0,_util.toArray)(name).length&&renderMeta?renderMeta.name:[];const fieldId=(0,_util.getFieldId)(renderMeta,
formName),isRequired=void 0!==required?required:!(null===rules||void 0===rules||!rules.some(rule=>rule&&"object"===typeof rule&&rule.required&&!rule.warningOnly?!0:"function"===typeof rule?(rule=rule(context),(null===rule||void 0===rule?void 0:rule.required)&&!(null===rule||void 0===rule?0:rule.warningOnly)):!1)),mergedControl=Object.assign({},control);control=null;warning(!(shouldUpdate&&dependencies),"usage","`shouldUpdate` and `dependencies` shouldn't be used together. See https://u.ant.design/form-deps.");
if(Array.isArray(mergedChildren)&&hasName)warning(!1,"usage","A `Form.Item` with a `name` prop must have a single child element. For information on how to render more complex form items, see https://u.ant.design/complex-form-item."),control=mergedChildren;else if(isRenderProps&&(!shouldUpdate&&!dependencies||hasName))warning(!(!shouldUpdate&&!dependencies),"usage","A `Form.Item` with a render function must have either `shouldUpdate` or `dependencies`."),warning(!hasName,"usage","A `Form.Item` with a render function cannot be a field, and thus cannot have a `name` prop.");
else if(!dependencies||isRenderProps||hasName)if(React.isValidElement(mergedChildren)){warning(void 0===mergedChildren.props.defaultValue,"usage","`defaultValue` will not work on controlled Field. You should use `initialValues` of Form instead.");const childProps=Object.assign(Object.assign({},mergedChildren.props),mergedControl);childProps.id||(childProps.id=fieldId);if(help||0<mergedErrors.length||0<mergedWarnings.length||props.extra)control=[],(help||0<mergedErrors.length)&&control.push(`${fieldId}_help`),
props.extra&&control.push(`${fieldId}_extra`),childProps["aria-describedby"]=control.join(" ");0<mergedErrors.length&&(childProps["aria-invalid"]="true");isRequired&&(childProps["aria-required"]="true");(0,_ref2.supportRef)(mergedChildren)&&(childProps.ref=getItemRef(renderMeta,mergedChildren));(new Set([].concat((0,_toConsumableArray2.default)((0,_util.toArray)(trigger)),(0,_toConsumableArray2.default)((0,_util.toArray)(mergedValidateTrigger))))).forEach(eventName=>{childProps[eventName]=function(){for(var _a,
_b,_c,_len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];null===(_a=mergedControl[eventName])||void 0===_a?void 0:_a.call.apply(_a,[mergedControl].concat(args));null===(_c=(_b=mergedChildren.props)[eventName])||void 0===_c?void 0:_c.call.apply(_c,[_b].concat(args))}});control=React.createElement(MemoInput,{control:mergedControl,update:mergedChildren,childProps:[childProps["aria-required"],childProps["aria-invalid"],childProps["aria-describedby"]]},(0,_reactNode.cloneElement)(mergedChildren,
childProps))}else isRenderProps&&(shouldUpdate||dependencies)&&!hasName?control=mergedChildren(context):(warning(!renderMeta.length||!!noStyle,"usage","`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead."),control=mergedChildren);else warning(!1,"usage","Must set `name` or use a render function when `dependencies` is set.");return renderLayout(control,fieldId,isRequired)}))};require.useStatus=module.default;exports.default=require}
//# sourceMappingURL=module$node_modules$antd$lib$form$FormItem$index.js.map
