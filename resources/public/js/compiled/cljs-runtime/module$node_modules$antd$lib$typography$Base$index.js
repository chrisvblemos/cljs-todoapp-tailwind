shadow$provide.module$node_modules$antd$lib$typography$Base$index=function(global,require,module,exports){function wrapperDecorations(_ref,content){function wrap(tag,needed){needed&&(currentContent=React.createElement(tag,{},currentContent))}let {mark,code,underline,delete:del,strong,keyboard,italic}=_ref,currentContent=content;wrap("strong",strong);wrap("u",underline);wrap("del",del);wrap("code",code);wrap("mark",mark);wrap("kbd",keyboard);wrap("i",italic);return currentContent}"use client";global=
require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var React=module(require("module$node_modules$react$index")),_EditOutlined=global(require("module$node_modules$$ant_design$icons$EditOutlined")),_classnames=global(require("module$node_modules$classnames$index")),_rcResizeObserver=global(require("module$node_modules$rc_resize_observer$lib$index")),
_toArray=global(require("module$node_modules$rc_util$lib$Children$toArray")),_useLayoutEffect=global(require("module$node_modules$rc_util$lib$hooks$useLayoutEffect")),_useMergedState=global(require("module$node_modules$rc_util$lib$hooks$useMergedState")),_omit=global(require("module$node_modules$rc_util$lib$omit")),_ref3=require("module$node_modules$rc_util$lib$ref"),_styleChecker=require("module$node_modules$antd$lib$_util$styleChecker"),_configProvider=require("module$node_modules$antd$lib$config_provider$index"),
_useLocale=global(require("module$node_modules$antd$lib$locale$useLocale")),_tooltip=global(require("module$node_modules$antd$lib$tooltip$index")),_Editable=global(require("module$node_modules$antd$lib$typography$Editable")),_useCopyClick=global(require("module$node_modules$antd$lib$typography$hooks$useCopyClick")),_useMergedConfig=global(require("module$node_modules$antd$lib$typography$hooks$useMergedConfig")),_usePrevious=global(require("module$node_modules$antd$lib$typography$hooks$usePrevious")),
_useTooltipProps=global(require("module$node_modules$antd$lib$typography$hooks$useTooltipProps")),_Typography=global(require("module$node_modules$antd$lib$typography$Typography")),_CopyBtn=global(require("module$node_modules$antd$lib$typography$Base$CopyBtn")),_Ellipsis=global(require("module$node_modules$antd$lib$typography$Base$Ellipsis")),_EllipsisTooltip=global(require("module$node_modules$antd$lib$typography$Base$EllipsisTooltip")),_util=require("module$node_modules$antd$lib$typography$Base$util"),
__rest=function(s,e){var t={},p;for(p in s)Object.prototype.hasOwnProperty.call(s,p)&&0>e.indexOf(p)&&(t[p]=s[p]);if(null!=s&&"function"===typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)0>e.indexOf(p[i])&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};require=React.forwardRef((props,ref)=>{var _a;const {prefixCls:customizePrefixCls,className,style,type,disabled,children,ellipsis,editable,copyable,component,title}=
props;var restProps=__rest(props,"prefixCls className style type disabled children ellipsis editable copyable component title".split(" "));const {getPrefixCls,direction}=React.useContext(_configProvider.ConfigContext),[textLocale]=(0,_useLocale.default)("Text"),typographyRef=React.useRef(null),editIconRef=React.useRef(null),prefixCls=getPrefixCls("typography",customizePrefixCls),textProps=(0,_omit.default)(restProps,"mark code delete underline strong keyboard italic".split(" ")),[enableEdit,editConfig]=
(0,_useMergedConfig.default)(editable),[editing,setEditing]=(0,_useMergedState.default)(!1,{value:editConfig.editing}),{triggerType=["icon"]}=editConfig,triggerEdit=edit=>{var _a;edit&&(null===(_a=editConfig.onStart)||void 0===_a?void 0:_a.call(editConfig));setEditing(edit)},prevEditing=(0,_usePrevious.default)(editing);(0,_useLayoutEffect.default)(()=>{var _a;!editing&&prevEditing&&(null===(_a=editIconRef.current)||void 0===_a?void 0:_a.focus())},[editing]);const onEditClick=e=>{null===e||void 0===
e?void 0:e.preventDefault();triggerEdit(!0)};restProps=value=>{var _a;null===(_a=editConfig.onChange)||void 0===_a?void 0:_a.call(editConfig,value);triggerEdit(!1)};const onEditCancel=()=>{var _a;null===(_a=editConfig.onCancel)||void 0===_a?void 0:_a.call(editConfig);triggerEdit(!1)},[enableCopy,copyConfig]=(0,_useMergedConfig.default)(copyable),{copied,copyLoading,onClick:onCopyClick}=(0,_useCopyClick.default)({copyConfig,children}),[isLineClampSupport,setIsLineClampSupport]=React.useState(!1),[isTextOverflowSupport,
setIsTextOverflowSupport]=React.useState(!1),[isJsEllipsis,setIsJsEllipsis]=React.useState(!1),[isNativeEllipsis,setIsNativeEllipsis]=React.useState(!1),[isNativeVisible,setIsNativeVisible]=React.useState(!0),[enableEllipsis,ellipsisConfig]=(0,_useMergedConfig.default)(ellipsis,{expandable:!1,symbol:isExpanded=>isExpanded?null===textLocale||void 0===textLocale?void 0:textLocale.collapse:null===textLocale||void 0===textLocale?void 0:textLocale.expand}),[expanded,setExpanded]=(0,_useMergedState.default)(ellipsisConfig.defaultExpanded||
!1,{value:ellipsisConfig.expanded}),mergedEnableEllipsis=enableEllipsis&&(!expanded||"collapsible"===ellipsisConfig.expandable),{rows=1}=ellipsisConfig,needMeasureEllipsis=React.useMemo(()=>mergedEnableEllipsis&&(void 0!==ellipsisConfig.suffix||ellipsisConfig.onEllipsis||ellipsisConfig.expandable||enableEdit||enableCopy),[mergedEnableEllipsis,ellipsisConfig,enableEdit,enableCopy]);(0,_useLayoutEffect.default)(()=>{enableEllipsis&&!needMeasureEllipsis&&(setIsLineClampSupport((0,_styleChecker.isStyleSupport)("webkitLineClamp")),
setIsTextOverflowSupport((0,_styleChecker.isStyleSupport)("textOverflow")))},[needMeasureEllipsis,enableEllipsis]);const [cssEllipsis,setCssEllipsis]=React.useState(mergedEnableEllipsis),canUseCssEllipsis=React.useMemo(()=>needMeasureEllipsis?!1:1===rows?isTextOverflowSupport:isLineClampSupport,[needMeasureEllipsis,isTextOverflowSupport,isLineClampSupport]);(0,_useLayoutEffect.default)(()=>{setCssEllipsis(canUseCssEllipsis&&mergedEnableEllipsis)},[canUseCssEllipsis,mergedEnableEllipsis]);const isMergedEllipsis=
mergedEnableEllipsis&&(cssEllipsis?isNativeEllipsis:isJsEllipsis),cssTextOverflow=mergedEnableEllipsis&&1===rows&&cssEllipsis,cssLineClamp=mergedEnableEllipsis&&1<rows&&cssEllipsis,[ellipsisWidth,setEllipsisWidth]=React.useState(0),onJsEllipsis=jsEllipsis=>{var _a;setIsJsEllipsis(jsEllipsis);isJsEllipsis!==jsEllipsis&&(null===(_a=ellipsisConfig.onEllipsis)||void 0===_a?void 0:_a.call(ellipsisConfig,jsEllipsis))};React.useEffect(()=>{var textEle=typographyRef.current;enableEllipsis&&cssEllipsis&&textEle&&
(textEle=(0,_util.isEleEllipsis)(textEle),isNativeEllipsis!==textEle&&setIsNativeEllipsis(textEle))},[enableEllipsis,cssEllipsis,children,cssLineClamp,isNativeVisible,ellipsisWidth]);React.useEffect(()=>{const textEle=typographyRef.current;if("undefined"!==typeof IntersectionObserver&&textEle&&cssEllipsis&&mergedEnableEllipsis){var observer=new IntersectionObserver(()=>{setIsNativeVisible(!!textEle.offsetParent)});observer.observe(textEle);return()=>{observer.disconnect()}}},[cssEllipsis,mergedEnableEllipsis]);
const tooltipProps=(0,_useTooltipProps.default)(ellipsisConfig.tooltip,editConfig.text,children),topAriaLabel=React.useMemo(()=>{if(enableEllipsis&&!cssEllipsis)return[editConfig.text,children,title,tooltipProps.title].find(_util.isValidText)},[enableEllipsis,cssEllipsis,title,tooltipProps.title,isMergedEllipsis]);if(editing)return React.createElement(_Editable.default,{value:null!==(_a=editConfig.text)&&void 0!==_a?_a:"string"===typeof children?children:"",onSave:restProps,onCancel:onEditCancel,
onEnd:editConfig.onEnd,prefixCls,className,style,direction,component,maxLength:editConfig.maxLength,autoSize:editConfig.autoSize,enterIcon:editConfig.enterIcon});const renderExpand=()=>{const {expandable,symbol}=ellipsisConfig;return expandable?React.createElement("button",{type:"button",key:"expand",className:`${prefixCls}-${expanded?"collapse":"expand"}`,onClick:e=>{var info={expanded:!expanded},_a;setExpanded(info.expanded);null===(_a=ellipsisConfig.onExpand)||void 0===_a?void 0:_a.call(ellipsisConfig,
e,info)},"aria-label":expanded?textLocale.collapse:null===textLocale||void 0===textLocale?void 0:textLocale.expand},"function"===typeof symbol?symbol(expanded):symbol):null};return React.createElement(_rcResizeObserver.default,{onResize:_ref2=>{({offsetWidth:_ref2}=_ref2);setEllipsisWidth(_ref2)},disabled:!mergedEnableEllipsis},resizeRef=>React.createElement(_EllipsisTooltip.default,{tooltipProps,enableEllipsis:mergedEnableEllipsis,isEllipsis:isMergedEllipsis},React.createElement(_Typography.default,
Object.assign({className:(0,_classnames.default)({[`${prefixCls}-${type}`]:type,[`${prefixCls}-disabled`]:disabled,[`${prefixCls}-ellipsis`]:enableEllipsis,[`${prefixCls}-ellipsis-single-line`]:cssTextOverflow,[`${prefixCls}-ellipsis-multiple-line`]:cssLineClamp},className),prefixCls:customizePrefixCls,style:Object.assign(Object.assign({},style),{WebkitLineClamp:cssLineClamp?rows:void 0}),component,ref:(0,_ref3.composeRef)(resizeRef,typographyRef,ref),direction,onClick:triggerType.includes("text")?
onEditClick:void 0,"aria-label":null===topAriaLabel||void 0===topAriaLabel?void 0:topAriaLabel.toString(),title},textProps),React.createElement(_Ellipsis.default,{enableMeasure:mergedEnableEllipsis&&!cssEllipsis,text:children,rows,width:ellipsisWidth,onEllipsis:onJsEllipsis,expanded,miscDeps:[copied,expanded,copyLoading,enableEdit,enableCopy,textLocale]},(node,canEllipsis)=>{var JSCompiler_temp_const=React,JSCompiler_temp_const$jscomp$0=JSCompiler_temp_const.createElement,JSCompiler_temp_const$jscomp$1=
React.Fragment;node=0<node.length&&canEllipsis&&!expanded&&topAriaLabel?React.createElement("span",{key:"show-content","aria-hidden":!0},node):node;var JSCompiler_inline_result=canEllipsis&&!expanded&&React.createElement("span",{"aria-hidden":!0,key:"ellipsis"},"...");var JSCompiler_temp_const$jscomp$2=ellipsisConfig.suffix;canEllipsis=canEllipsis&&renderExpand();if(enableEdit){var {icon,tooltip,tabIndex}=editConfig;var JSCompiler_inline_result$jscomp$0=(0,_toArray.default)(tooltip)[0]||(null===textLocale||
void 0===textLocale?void 0:textLocale.edit);var ariaLabel="string"===typeof JSCompiler_inline_result$jscomp$0?JSCompiler_inline_result$jscomp$0:"";JSCompiler_inline_result$jscomp$0=triggerType.includes("icon")?React.createElement(_tooltip.default,{key:"edit",title:!1===tooltip?"":JSCompiler_inline_result$jscomp$0},React.createElement("button",{type:"button",ref:editIconRef,className:`${prefixCls}-edit`,onClick:onEditClick,"aria-label":ariaLabel,tabIndex},icon||React.createElement(_EditOutlined.default,
{role:"button"}))):null}else JSCompiler_inline_result$jscomp$0=void 0;JSCompiler_inline_result=[JSCompiler_inline_result,JSCompiler_temp_const$jscomp$2,[canEllipsis,JSCompiler_inline_result$jscomp$0,enableCopy?React.createElement(_CopyBtn.default,Object.assign({key:"copy"},copyConfig,{prefixCls,copied,locale:textLocale,onCopy:onCopyClick,loading:copyLoading,iconOnly:null===children||void 0===children})):null]];return wrapperDecorations(props,JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,
JSCompiler_temp_const$jscomp$1,null,node,JSCompiler_inline_result))}))))});exports.default=require}
//# sourceMappingURL=module$node_modules$antd$lib$typography$Base$index.js.map
