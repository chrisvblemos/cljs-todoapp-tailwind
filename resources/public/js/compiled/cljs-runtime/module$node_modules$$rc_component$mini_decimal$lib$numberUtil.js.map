{
"version":3,
"file":"module$node_modules$$rc_component$mini_decimal$lib$numberUtil.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@rc-component/mini-decimal/lib/numberUtil.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$rc_component$mini_decimal$lib$numberUtil\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNumberPrecision = getNumberPrecision;\nexports.isE = isE;\nexports.isEmpty = isEmpty;\nexports.num2str = num2str;\nexports.trimNumber = trimNumber;\nexports.validateNumber = validateNumber;\nvar _supportUtil = require(\"./supportUtil\");\nfunction isEmpty(value) {\n  return !value && value !== 0 && !Number.isNaN(value) || !String(value).trim();\n}\n\n/**\n * Format string number to readable number\n */\nfunction trimNumber(numStr) {\n  var str = numStr.trim();\n  var negative = str.startsWith('-');\n  if (negative) {\n    str = str.slice(1);\n  }\n  str = str\n  // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`\n  .replace(/(\\.\\d*[^0])0*$/, '$1')\n  // Remove useless decimal. `1.` => `1`\n  .replace(/\\.0*$/, '')\n  // Remove integer 0. `0001` => `1`, 000.1' => `.1`\n  .replace(/^0+/, '');\n  if (str.startsWith('.')) {\n    str = \"0\".concat(str);\n  }\n  var trimStr = str || '0';\n  var splitNumber = trimStr.split('.');\n  var integerStr = splitNumber[0] || '0';\n  var decimalStr = splitNumber[1] || '0';\n  if (integerStr === '0' && decimalStr === '0') {\n    negative = false;\n  }\n  var negativeStr = negative ? '-' : '';\n  return {\n    negative: negative,\n    negativeStr: negativeStr,\n    trimStr: trimStr,\n    integerStr: integerStr,\n    decimalStr: decimalStr,\n    fullStr: \"\".concat(negativeStr).concat(trimStr)\n  };\n}\nfunction isE(number) {\n  var str = String(number);\n  return !Number.isNaN(Number(str)) && str.includes('e');\n}\n\n/**\n * [Legacy] Convert 1e-9 to 0.000000001.\n * This may lose some precision if user really want 1e-9.\n */\nfunction getNumberPrecision(number) {\n  var numStr = String(number);\n  if (isE(number)) {\n    var precision = Number(numStr.slice(numStr.indexOf('e-') + 2));\n    var decimalMatch = numStr.match(/\\.(\\d+)/);\n    if (decimalMatch !== null && decimalMatch !== void 0 && decimalMatch[1]) {\n      precision += decimalMatch[1].length;\n    }\n    return precision;\n  }\n  return numStr.includes('.') && validateNumber(numStr) ? numStr.length - numStr.indexOf('.') - 1 : 0;\n}\n\n/**\n * Convert number (includes scientific notation) to -xxx.yyy format\n */\nfunction num2str(number) {\n  var numStr = String(number);\n  if (isE(number)) {\n    if (number > Number.MAX_SAFE_INTEGER) {\n      return String((0, _supportUtil.supportBigInt)() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);\n    }\n    if (number < Number.MIN_SAFE_INTEGER) {\n      return String((0, _supportUtil.supportBigInt)() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);\n    }\n    numStr = number.toFixed(getNumberPrecision(numStr));\n  }\n  return trimNumber(numStr).fullStr;\n}\nfunction validateNumber(num) {\n  if (typeof num === 'number') {\n    return !Number.isNaN(num);\n  }\n\n  // Empty\n  if (!num) {\n    return false;\n  }\n  return (\n    // Normal type: 11.28\n    /^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num) ||\n    // Pre-number: 1.\n    /^\\s*-?\\d+\\.\\s*$/.test(num) ||\n    // Post-number: .1\n    /^\\s*-?\\.\\d+\\s*$/.test(num)\n  );\n}\n};"],
"names":["shadow$provide","global","require","module","exports","trimNumber","numStr","str","trim","negative","startsWith","slice","replace","concat","trimStr","splitNumber","split","integerStr","decimalStr","negativeStr","fullStr","isE","number","String","Number","isNaN","includes","getNumberPrecision","precision","indexOf","decimalMatch","match","length","validateNumber","num","test","Object","defineProperty","value","isEmpty","num2str","MAX_SAFE_INTEGER","_supportUtil","supportBigInt","BigInt","toString","MIN_SAFE_INTEGER","toFixed"]
}
