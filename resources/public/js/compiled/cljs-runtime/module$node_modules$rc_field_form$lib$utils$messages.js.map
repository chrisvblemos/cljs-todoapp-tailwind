{
"version":3,
"file":"module$node_modules$rc_field_form$lib$utils$messages.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAK8BH,QAAQI,CAAAA,uBAAR,CAAkC,CAC9DC,QAAS,qCADqD,CAE9DC,SAAU,uBAFoD,CAG9DC,KAAM,oCAHwD,CAI9DC,WAAY,2BAJkD,CAK9DC,KAAM,CACJC,OAAQ,sCADJ,CAEJC,MAAO,uCAFH,CAGJC,QAAS,2BAHL,CALwD,CAU9DC,MAAO,CACLC,OAZeC,kCAWV;AAELC,OAbeD,kCAWV,CAGLE,MAdeF,kCAWV,CAILG,OAfeH,kCAWV,CAKLI,OAhBeJ,kCAWV,CAMLN,KAjBeM,kCAWV,CAOLK,QAlBeL,kCAWV,CAQLM,QAnBeN,kCAWV,CASLO,MApBeP,kCAWV,CAULQ,OArBeR,kCAWV,CAWLS,MAtBeT,kCAWV,CAYLU,IAvBeV,kCAWV,CAaLW,IAxBeX,kCAWV,CAVuD,CAyB9DD,OAAQ,CACNa,IAAK,6CADC;AAENC,IAAK,8CAFC,CAGNC,IAAK,mDAHC,CAINC,MAAO,wDAJD,CAzBsD,CA+B9DX,OAAQ,CACNQ,IAAK,6BADC,CAENC,IAAK,sCAFC,CAGNC,IAAK,yCAHC,CAINC,MAAO,6CAJD,CA/BsD,CAqC9Db,MAAO,CACLU,IAAK,4CADA,CAELC,IAAK,gDAFA,CAGLC,IAAK,mDAHA;AAILC,MAAO,uDAJF,CArCuD,CA2C9DC,QAAS,CACPC,SAAU,6CADH,CA3CqD,CARiD;",
"sources":["node_modules/rc-field-form/lib/utils/messages.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$rc_field_form$lib$utils$messages\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultValidateMessages = void 0;\nvar typeTemplate = \"'${name}' is not a valid ${type}\";\nvar defaultValidateMessages = exports.defaultValidateMessages = {\n  default: \"Validation error on field '${name}'\",\n  required: \"'${name}' is required\",\n  enum: \"'${name}' must be one of [${enum}]\",\n  whitespace: \"'${name}' cannot be empty\",\n  date: {\n    format: \"'${name}' is invalid for format date\",\n    parse: \"'${name}' could not be parsed as date\",\n    invalid: \"'${name}' is invalid date\"\n  },\n  types: {\n    string: typeTemplate,\n    method: typeTemplate,\n    array: typeTemplate,\n    object: typeTemplate,\n    number: typeTemplate,\n    date: typeTemplate,\n    boolean: typeTemplate,\n    integer: typeTemplate,\n    float: typeTemplate,\n    regexp: typeTemplate,\n    email: typeTemplate,\n    url: typeTemplate,\n    hex: typeTemplate\n  },\n  string: {\n    len: \"'${name}' must be exactly ${len} characters\",\n    min: \"'${name}' must be at least ${min} characters\",\n    max: \"'${name}' cannot be longer than ${max} characters\",\n    range: \"'${name}' must be between ${min} and ${max} characters\"\n  },\n  number: {\n    len: \"'${name}' must equal ${len}\",\n    min: \"'${name}' cannot be less than ${min}\",\n    max: \"'${name}' cannot be greater than ${max}\",\n    range: \"'${name}' must be between ${min} and ${max}\"\n  },\n  array: {\n    len: \"'${name}' must be exactly ${len} in length\",\n    min: \"'${name}' cannot be less than ${min} in length\",\n    max: \"'${name}' cannot be greater than ${max} in length\",\n    range: \"'${name}' must be between ${min} and ${max} in length\"\n  },\n  pattern: {\n    mismatch: \"'${name}' does not match pattern ${pattern}\"\n  }\n};\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","defaultValidateMessages","default","required","enum","whitespace","date","format","parse","invalid","types","string","typeTemplate","method","array","object","number","boolean","integer","float","regexp","email","url","hex","len","min","max","range","pattern","mismatch"]
}
