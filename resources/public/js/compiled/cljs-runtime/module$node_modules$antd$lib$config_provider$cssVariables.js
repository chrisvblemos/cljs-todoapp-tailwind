shadow$provide.module$node_modules$antd$lib$config_provider$cssVariables=function(global,require,module,exports){function getStyle(globalPrefixCls,theme){const variables={},formatColor=(color,updater)=>{color=color.clone();color=(null===updater||void 0===updater?void 0:updater(color))||color;return color.toRgbString()},fillColor=(colorVal,type)=>{colorVal=new _fastColor.FastColor(colorVal);const colorPalettes=(0,_colors.generate)(colorVal.toRgbString());variables[`${type}-color`]=formatColor(colorVal);
variables[`${type}-color-disabled`]=colorPalettes[1];variables[`${type}-color-hover`]=colorPalettes[4];variables[`${type}-color-active`]=colorPalettes[6];variables[`${type}-color-outline`]=colorVal.clone().setA(.2).toRgbString();variables[`${type}-color-deprecated-bg`]=colorPalettes[0];variables[`${type}-color-deprecated-border`]=colorPalettes[2]};if(theme.primaryColor){fillColor(theme.primaryColor,"primary");var primaryColor=new _fastColor.FastColor(theme.primaryColor);const primaryColors=(0,_colors.generate)(primaryColor.toRgbString());
primaryColors.forEach((color,index)=>{variables[`primary-${index+1}`]=color});variables["primary-color-deprecated-l-35"]=formatColor(primaryColor,c=>c.lighten(35));variables["primary-color-deprecated-l-20"]=formatColor(primaryColor,c=>c.lighten(20));variables["primary-color-deprecated-t-20"]=formatColor(primaryColor,c=>c.tint(20));variables["primary-color-deprecated-t-50"]=formatColor(primaryColor,c=>c.tint(50));variables["primary-color-deprecated-f-12"]=formatColor(primaryColor,c=>c.setA(.12*c.a));
primaryColor=new _fastColor.FastColor(primaryColors[0]);variables["primary-color-active-deprecated-f-30"]=formatColor(primaryColor,c=>c.setA(.3*c.a));variables["primary-color-active-deprecated-d-02"]=formatColor(primaryColor,c=>c.darken(2))}theme.successColor&&fillColor(theme.successColor,"success");theme.warningColor&&fillColor(theme.warningColor,"warning");theme.errorColor&&fillColor(theme.errorColor,"error");theme.infoColor&&fillColor(theme.infoColor,"info");return`
  :root {
    ${Object.keys(variables).map(key=>`--${globalPrefixCls}-${key}: ${variables[key]};`).join("\n")}
  }
  `.trim()}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.getStyle=getStyle;exports.registerTheme=function(globalPrefixCls,theme){globalPrefixCls=getStyle(globalPrefixCls,theme);(0,_canUseDom.default)()?(0,_dynamicCSS.updateCSS)(globalPrefixCls,`${dynamicStyleMark}-dynamic-theme`):(0,_warning.default)(!1,"ConfigProvider","SSR do not support dynamic theme with css variables.")};var _colors=require("module$node_modules$$ant_design$colors$lib$index"),
_fastColor=require("module$node_modules$$ant_design$fast_color$lib$index"),_canUseDom=global(require("module$node_modules$rc_util$lib$Dom$canUseDom")),_dynamicCSS=require("module$node_modules$rc_util$lib$Dom$dynamicCSS"),_warning=global(require("module$node_modules$antd$lib$_util$warning"));const dynamicStyleMark=`-ant-${Date.now()}-${Math.random()}`}
//# sourceMappingURL=module$node_modules$antd$lib$config_provider$cssVariables.js.map
