{
"version":3,
"file":"module$node_modules$$rc_component$async_validator$lib$rule$pattern.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,kEAAA,CAAuF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAAkB,IAAK,EACvB,KAAIC,MAAQP,OAAA,CAAQ,4DAAR,CAmBGE,QAAQI,CAAAA,OAAR,CAlBDE,QAAgB,CAACC,IAAD,CAAOJ,KAAP,CAAcK,MAAd,CAAsBC,MAAtB,CAA8BC,OAA9B,CAAuC,CAC/DH,IAAKD,CAAAA,OAAT,GACMC,IAAKD,CAAAA,OAAT,WAA4BK,OAA5B,EAIEJ,IAAKD,CAAAA,OAAQM,CAAAA,SACb,CADyB,CACzB,CAAKL,IAAKD,CAAAA,OAAQO,CAAAA,IAAb,CAAkBV,KAAlB,CAAL,EACEM,MAAOK,CAAAA,IAAP,CAAY,GAAIT,KAAMU,CAAAA,MAAV,EAAkBL,OAAQM,CAAAA,QAASV,CAAAA,OAAQW,CAAAA,QAA3C,CAAqDV,IAAKW,CAAAA,SAA1D;AAAqEf,KAArE,CAA4EI,IAAKD,CAAAA,OAAjF,CAAZ,CANJ,EAQmC,QARnC,GAQW,MAAOC,KAAKD,CAAAA,OARvB,GAUgBO,CADCM,IAAIR,MAAJQ,CAAWZ,IAAKD,CAAAA,OAAhBa,CACDN,EAAAA,IAAT,CAAcV,KAAd,CAVP,EAWIM,MAAOK,CAAAA,IAAP,CAAY,GAAIT,KAAMU,CAAAA,MAAV,EAAkBL,OAAQM,CAAAA,QAASV,CAAAA,OAAQW,CAAAA,QAA3C,CAAqDV,IAAKW,CAAAA,SAA1D,CAAqEf,KAArE,CAA4EI,IAAKD,CAAAA,OAAjF,CAAZ,CAXJ,CADF,CADmE,CAR0D;",
"sources":["node_modules/@rc-component/async-validator/lib/rule/pattern.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$rc_component$async_validator$lib$rule$pattern\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _util = require(\"../util\");\nvar pattern = function pattern(rule, value, source, errors, options) {\n  if (rule.pattern) {\n    if (rule.pattern instanceof RegExp) {\n      // if a RegExp instance is passed, reset `lastIndex` in case its `global`\n      // flag is accidentally set to `true`, which in a validation scenario\n      // is not necessary and the result might be misleading\n      rule.pattern.lastIndex = 0;\n      if (!rule.pattern.test(value)) {\n        errors.push((0, _util.format)(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    } else if (typeof rule.pattern === 'string') {\n      var _pattern = new RegExp(rule.pattern);\n      if (!_pattern.test(value)) {\n        errors.push((0, _util.format)(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    }\n  }\n};\nvar _default = exports.default = pattern;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","_util","pattern","rule","source","errors","options","RegExp","lastIndex","test","push","format","messages","mismatch","fullField","_pattern"]
}
