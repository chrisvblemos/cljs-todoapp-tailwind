shadow$provide.module$node_modules$antd$lib$splitter$hooks$useResize=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=function(items,resizableInfos,percentSizes,containerSize,updateSizes){function getLimitSize(str,defaultLimit){return"string"===typeof str?
(0,_useSizes.getPtg)(str)*mergedContainerSize:null!==str&&void 0!==str?str:defaultLimit}const limitSizes=items.map(item=>[item.min,item.max]),mergedContainerSize=containerSize||0,ptg2px=ptg=>ptg*mergedContainerSize,[cacheSizes,setCacheSizes]=React.useState([]),cacheCollapsedSize=React.useRef([]),[movingIndex,setMovingIndex]=React.useState(null);return[index=>{setCacheSizes(percentSizes.map(ptg2px));setMovingIndex({index,confirmed:!1})},(index,offset)=>{var _a,confirmedIndex=null;if(!(movingIndex&&
movingIndex.confirmed||0===offset))if(0<offset)confirmedIndex=index,setMovingIndex({index,confirmed:!0});else for(var i=index;0<=i;--i)if(0<cacheSizes[i]&&resizableInfos[i].resizable){confirmedIndex=i;setMovingIndex({index:i,confirmed:!0});break}confirmedIndex=null!==(_a=null!==confirmedIndex&&void 0!==confirmedIndex?confirmedIndex:null===movingIndex||void 0===movingIndex?void 0:movingIndex.index)&&void 0!==_a?_a:index;index=(0,_toConsumableArray2.default)(cacheSizes);_a=confirmedIndex+1;i=getLimitSize(limitSizes[confirmedIndex][0],
0);const endMinSize=getLimitSize(limitSizes[_a][0],0),startMaxSize=getLimitSize(limitSizes[confirmedIndex][1],mergedContainerSize),endMaxSize=getLimitSize(limitSizes[_a][1],mergedContainerSize);index[confirmedIndex]+offset<i&&(offset=i-index[confirmedIndex]);index[_a]-offset<endMinSize&&(offset=index[_a]-endMinSize);index[confirmedIndex]+offset>startMaxSize&&(offset=startMaxSize-index[confirmedIndex]);index[_a]-offset>endMaxSize&&(offset=index[_a]-endMaxSize);index[confirmedIndex]+=offset;index[_a]-=
offset;updateSizes(index);return index},()=>{setMovingIndex(null)},(index,type)=>{const currentSizes=percentSizes.map(ptg2px),currentIndex="start"===type?index:index+1;type="start"===type?index+1:index;var currentSize=currentSizes[currentIndex],targetSize=currentSizes[type];if(0!==currentSize&&0!==targetSize)currentSizes[currentIndex]=0,currentSizes[type]+=currentSize,cacheCollapsedSize.current[index]=currentSize;else{var totalSize=currentSize+targetSize;currentSize=getLimitSize(limitSizes[currentIndex][0],
0);targetSize=getLimitSize(limitSizes[currentIndex][1],mergedContainerSize);const targetSizeMin=getLimitSize(limitSizes[type][0],0),targetSizeMax=getLimitSize(limitSizes[type][1],mergedContainerSize),halfOffset=(Math.min(targetSize,totalSize-targetSizeMin)-Math.max(currentSize,totalSize-targetSizeMax))/2;index=cacheCollapsedSize.current[index];totalSize-=index;index&&index<=targetSizeMax&&index>=targetSizeMin&&totalSize<=targetSize&&totalSize>=currentSize?(currentSizes[type]=index,currentSizes[currentIndex]=
totalSize):(currentSizes[currentIndex]-=halfOffset,currentSizes[type]+=halfOffset)}updateSizes(currentSizes);return currentSizes},null===movingIndex||void 0===movingIndex?void 0:movingIndex.index]};var _toConsumableArray2=module(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),React=global(require("module$node_modules$react$index")),_useSizes=require("module$node_modules$antd$lib$splitter$hooks$useSizes")}
//# sourceMappingURL=module$node_modules$antd$lib$splitter$hooks$useResize.js.map
