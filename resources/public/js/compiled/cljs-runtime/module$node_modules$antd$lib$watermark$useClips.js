shadow$provide.module$node_modules$antd$lib$watermark$useClips=function(global,require,module,exports){function prepareCanvas(width,height){var ratio=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1;const canvas=document.createElement("canvas"),ctx=canvas.getContext("2d"),realWidth=width*ratio;ratio*=height;canvas.setAttribute("width",`${realWidth}px`);canvas.setAttribute("height",`${ratio}px`);ctx.save();return[ctx,canvas,realWidth,ratio]}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
Object.defineProperty(exports,"__esModule",{value:!0});exports.FontGap=void 0;exports.default=function(){return function(content,rotate,ratio,width,height,font,gapX,gapY){function drawImg(){fCtx.drawImage(rCanvas,cutLeft,cutTop,cutWidth,cutHeight,0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,cutWidth,cutHeight)}const [ctx,canvas,contentWidth,contentHeight]=prepareCanvas(width,height,ratio);if(content instanceof HTMLImageElement)ctx.drawImage(content,
0,0,contentWidth,contentHeight);else{const {color,fontSize,fontStyle,fontWeight,fontFamily,textAlign}=font,mergedFontSize=Number(fontSize)*ratio;ctx.font=`${fontStyle} normal ${fontWeight} ${mergedFontSize}px/${height}px ${fontFamily}`;ctx.fillStyle=color;ctx.textAlign=textAlign;ctx.textBaseline="top";content=(0,_toList.default)(content);null===content||void 0===content?void 0:content.forEach((item,index)=>{ctx.fillText(null!==item&&void 0!==item?item:"",contentWidth/2,index*(mergedFontSize+FontGap*
ratio))})}const angle=Math.PI/180*Number(rotate);rotate=Math.max(width,height);const [rCtx,rCanvas,realMaxSize]=prepareCanvas(rotate,rotate,ratio);rCtx.translate(realMaxSize/2,realMaxSize/2);rCtx.rotate(angle);0<contentWidth&&0<contentHeight&&rCtx.drawImage(canvas,-contentWidth/2,-contentHeight/2);let left=0,right=0,top=0,bottom=0;rotate=contentWidth/2;width=contentHeight/2;[[0-rotate,0-width],[0+rotate,0-width],[0+rotate,0+width],[0-rotate,0+width]].forEach(_ref=>{let [x,y]=_ref;const [targetX,targetY]=
[x*Math.cos(angle)-y*Math.sin(angle),x*Math.sin(angle)+y*Math.cos(angle)];left=Math.min(left,targetX);right=Math.max(right,targetX);top=Math.min(top,targetY);bottom=Math.max(bottom,targetY)});const cutLeft=left+realMaxSize/2,cutTop=top+realMaxSize/2,cutWidth=right-left,cutHeight=bottom-top;gapX*=ratio;gapY*=ratio;rotate=2*(cutWidth+gapX);width=cutHeight+gapY;const [fCtx,fCanvas]=prepareCanvas(rotate,width);drawImg();drawImg(cutWidth+gapX,-cutHeight/2-gapY/2);drawImg(cutWidth+gapX,+cutHeight/2+gapY/
2);return[fCanvas.toDataURL(),rotate/ratio,width/ratio]}};var _toList=global(require("module$node_modules$antd$lib$_util$toList"));const FontGap=exports.FontGap=3}
//# sourceMappingURL=module$node_modules$antd$lib$watermark$useClips.js.map
