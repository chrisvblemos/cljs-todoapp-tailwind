shadow$provide.module$node_modules$antd$lib$calendar$Header=function(global,require,module,exports){function YearSelect(props){const {fullscreen,validRange,generateConfig,locale,prefixCls,value,onChange,divRef}=props;props=generateConfig.getYear(value||generateConfig.getNow());var start=props-10;let end=start+20;validRange&&(start=generateConfig.getYear(validRange[0]),end=generateConfig.getYear(validRange[1])+1);const suffix=locale&&"年"===locale.year?"年":"",options=[];for(;start<end;start++)options.push({label:`${start}${suffix}`,
value:start});return React.createElement(_select.default,{size:fullscreen?void 0:"small",options,value:props,className:`${prefixCls}-year-select`,onChange:numYear=>{numYear=generateConfig.setYear(value,numYear);if(validRange){const [startDate,endDate]=validRange,newYear=generateConfig.getYear(numYear),newMonth=generateConfig.getMonth(numYear);newYear===generateConfig.getYear(endDate)&&newMonth>generateConfig.getMonth(endDate)&&(numYear=generateConfig.setMonth(numYear,generateConfig.getMonth(endDate)));
newYear===generateConfig.getYear(startDate)&&newMonth<generateConfig.getMonth(startDate)&&(numYear=generateConfig.setMonth(numYear,generateConfig.getMonth(startDate)))}onChange(numYear)},getPopupContainer:()=>divRef.current})}function MonthSelect(props){const {prefixCls,fullscreen,validRange,value,generateConfig,locale,onChange,divRef}=props;props=generateConfig.getMonth(value||generateConfig.getNow());var start=0;let end=11;if(validRange){const [rangeStart,rangeEnd]=validRange;var currentYear=generateConfig.getYear(value);
generateConfig.getYear(rangeEnd)===currentYear&&(end=generateConfig.getMonth(rangeEnd));generateConfig.getYear(rangeStart)===currentYear&&(start=generateConfig.getMonth(rangeStart))}currentYear=locale.shortMonths||generateConfig.locale.getShortMonths(locale.locale);const options=[];for(;start<=end;start+=1)options.push({label:currentYear[start],value:start});return React.createElement(_select.default,{size:fullscreen?void 0:"small",className:`${prefixCls}-month-select`,value:props,options,onChange:newMonth=>
{onChange(generateConfig.setMonth(value,newMonth))},getPopupContainer:()=>divRef.current})}function ModeSwitch(props){const {prefixCls,locale,mode,fullscreen,onModeChange}=props;return React.createElement(_radio.Group,{onChange:_ref=>{({target:{value:_ref}}=_ref);onModeChange(_ref)},value:mode,size:fullscreen?void 0:"small",className:`${prefixCls}-mode-switch`},React.createElement(_radio.Button,{value:"month"},locale.month),React.createElement(_radio.Button,{value:"year"},locale.year))}"use client";
global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _react=module(require("module$node_modules$react$index")),React=_react,_context=require("module$node_modules$antd$lib$form$context"),_radio=require("module$node_modules$antd$lib$radio$index"),_select=global(require("module$node_modules$antd$lib$select$index"));
exports.default=function(props){const {prefixCls,fullscreen,mode,onChange,onModeChange}=props,divRef=React.useRef(null),formItemInputContext=(0,_react.useContext)(_context.FormItemInputContext),mergedFormItemInputContext=(0,_react.useMemo)(()=>Object.assign(Object.assign({},formItemInputContext),{isFormItemInput:!1}),[formItemInputContext]);props=Object.assign(Object.assign({},props),{fullscreen,divRef});return React.createElement("div",{className:`${prefixCls}-header`,ref:divRef},React.createElement(_context.FormItemInputContext.Provider,
{value:mergedFormItemInputContext},React.createElement(YearSelect,Object.assign({},props,{onChange:v=>{onChange(v,"year")}})),"month"===mode&&React.createElement(MonthSelect,Object.assign({},props,{onChange:v=>{onChange(v,"month")}}))),React.createElement(ModeSwitch,Object.assign({},props,{onModeChange})))}}
//# sourceMappingURL=module$node_modules$antd$lib$calendar$Header.js.map
