shadow$provide.module$node_modules$antd$lib$typography$Text=function(global,require,module,exports){"use client";global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var React=module(require("module$node_modules$react$index")),_omit=global(require("module$node_modules$rc_util$lib$omit")),_warning=
require("module$node_modules$antd$lib$_util$warning"),_Base=global(require("module$node_modules$antd$lib$typography$Base$index")),__rest=function(s,e){var t={},p;for(p in s)Object.prototype.hasOwnProperty.call(s,p)&&0>e.indexOf(p)&&(t[p]=s[p]);if(null!=s&&"function"===typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)0>e.indexOf(p[i])&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};exports.default=React.forwardRef((_a,
ref)=>{var {ellipsis}=_a;_a=__rest(_a,["ellipsis"]);const mergedEllipsis=React.useMemo(()=>ellipsis&&"object"===typeof ellipsis?(0,_omit.default)(ellipsis,["expandable","rows"]):ellipsis,[ellipsis]);(0,_warning.devUseWarning)("Typography.Text")("object"!==typeof ellipsis||!ellipsis||!("expandable"in ellipsis)&&!("rows"in ellipsis),"usage","`ellipsis` do not support `expandable` or `rows` props.");return React.createElement(_Base.default,Object.assign({ref},_a,{ellipsis:mergedEllipsis,component:"span"}))})}
//# sourceMappingURL=module$node_modules$antd$lib$typography$Text.js.map
