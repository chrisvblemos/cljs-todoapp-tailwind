{
"version":3,
"file":"module$node_modules$rc_tree_select$lib$hooks$useDataEntities.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrHC,MAAAA,CAA0BH,OAAA,CAAQ,mEAAR,CAAyDI,CAAAA,OACnFC,OAAAA,CAAyBL,OAAA,CAAQ,kEAAR,CAAwDI,CAAAA,OACrFE,OAAOC,CAAAA,cAAP,CAAsBL,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CM,MAAO,CAAA,CADoC,CAA7C,CAGAN,QAAQE,CAAAA,OAAR,CAAkB,IAAK,EACvB,KAAIK,eAAiBJ,MAAA,CAAuBL,OAAA,CAAQ,0DAAR,CAAvB,CAArB,CACIU,MAAQP,MAAA,CAAwBH,OAAA,CAAQ,iCAAR,CAAxB,CADZ;AAEIW,UAAYX,OAAA,CAAQ,gDAAR,CAFhB,CAGIY,SAAWP,MAAA,CAAuBL,OAAA,CAAQ,yCAAR,CAAvB,CAHf,CAIIa,WAAab,OAAA,CAAQ,wDAAR,CACFE,QAAQE,CAAAA,OAAR,CAAkBU,QAAiB,CAACC,QAAD,CAAWC,UAAX,CAAuB,CACvE,MAAON,MAAMO,CAAAA,OAAN,CAAc,QAAS,EAAG,CAqB/B,MApBiBC,GAAIP,SAAUQ,CAAAA,qBAAdD,EAAqCH,QAArCG,CAA+C,CAClDF,UADkD,CAE9DI,YAAaA,QAAoB,CAACC,OAAD,CAAU,CACzC,MAAO,GAAIZ,cAAeL,CAAAA,OAAnB,EAA4B,GAAIK,cAAeL,CAAAA,OAAnB,EAA4B,EAA5B,CAAgCiB,OAAhC,CAA5B,CAAsE,EAAtE,CAA0E,CAC/EC,cAAe,IAAIC,GAD4D,CAA1E,CADkC,CAFmB,CAO9DC,cAAeA,QAAsB,CAACC,MAAD;AAASJ,OAAT,CAAkB,CACrD,IAAIK,IAAMD,MAAOE,CAAAA,IAAP,CAAYX,UAAWR,CAAAA,KAAvB,CAAV,CAIMoB,IAAMH,MAAOE,CAAAA,IAAKC,CAAAA,GACtB,IAAIhB,QAASR,CAAAA,OAAb,EAAsB,CAAC,GAAIS,UAAWgB,CAAAA,KAAf,EAAsBH,GAAtB,CAAvB,CAAmD,2CAAnD,CACA,IAAId,QAASR,CAAAA,OAAb,EAAsB,CAACiB,OAAQC,CAAAA,aAAcQ,CAAAA,GAAtB,CAA0BJ,GAA1B,CAAvB,CAAuD,kCAAmCK,CAAAA,MAAnC,CAA0CL,GAA1C,CAAvD,CACA,IAAId,QAASR,CAAAA,OAAb,EAAsB,CAACwB,GAAvB,EAA8BI,MAAA,CAAOJ,GAAP,CAA9B,GAA8CI,MAAA,CAAON,GAAP,CAA9C,CAA2D,sFAAuFK,CAAAA,MAAvF,CAA8FH,GAA9F,CAAmG,WAAnG,CAAgHG,CAAAA,MAAhH,CAAuHL,GAAvH,CAA4H,GAA5H,CAA3D,CAEFL,QAAQC,CAAAA,aAAcW,CAAAA,GAAtB,CAA0BP,GAA1B,CAA+BD,MAA/B,CAVqD,CAPO,CAA/CP,CADc,CAA1B,CAsBJ,CAACH,QAAD,CAAWC,UAAX,CAtBI,CADgE,CAdgD;",
"sources":["node_modules/rc-tree-select/lib/hooks/useDataEntities.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$rc_tree_select$lib$hooks$useDataEntities\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _treeUtil = require(\"rc-tree/lib/utils/treeUtil\");\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\nvar _valueUtil = require(\"../utils/valueUtil\");\nvar _default = exports.default = function _default(treeData, fieldNames) {\n  return React.useMemo(function () {\n    var collection = (0, _treeUtil.convertDataToEntities)(treeData, {\n      fieldNames: fieldNames,\n      initWrapper: function initWrapper(wrapper) {\n        return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, wrapper), {}, {\n          valueEntities: new Map()\n        });\n      },\n      processEntity: function processEntity(entity, wrapper) {\n        var val = entity.node[fieldNames.value];\n\n        // Check if exist same value\n        if (process.env.NODE_ENV !== 'production') {\n          var key = entity.node.key;\n          (0, _warning.default)(!(0, _valueUtil.isNil)(val), 'TreeNode `value` is invalidate: undefined');\n          (0, _warning.default)(!wrapper.valueEntities.has(val), \"Same `value` exist in the tree: \".concat(val));\n          (0, _warning.default)(!key || String(key) === String(val), \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(val, \".\"));\n        }\n        wrapper.valueEntities.set(val, entity);\n      }\n    });\n    return collection;\n  }, [treeData, fieldNames]);\n};\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireWildcard","default","_interopRequireDefault","Object","defineProperty","value","_objectSpread2","React","_treeUtil","_warning","_valueUtil","exports.default","treeData","fieldNames","useMemo","collection","convertDataToEntities","initWrapper","wrapper","valueEntities","Map","processEntity","entity","val","node","key","isNil","has","concat","String","set"]
}
