shadow$provide.module$node_modules$antd$lib$button$style$index=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _cssinjs=require("module$node_modules$$ant_design$cssinjs$lib$index"),_style=require("module$node_modules$antd$lib$style$index"),_interface=require("module$node_modules$antd$lib$theme$interface$index"),_internal=require("module$node_modules$antd$lib$theme$internal"),
_group=global(require("module$node_modules$antd$lib$button$style$group")),_token=require("module$node_modules$antd$lib$button$style$token");const genSharedButtonStyle=token=>{const {componentCls,iconCls,fontWeight,opacityLoading,motionDurationSlow,motionEaseInOut,marginXS,calc}=token;return{[componentCls]:{outline:"none",position:"relative",display:"inline-flex",gap:token.marginXS,alignItems:"center",justifyContent:"center",fontWeight,whiteSpace:"nowrap",textAlign:"center",backgroundImage:"none",
background:"transparent",border:`${(0,_cssinjs.unit)(token.lineWidth)} ${token.lineType} transparent`,cursor:"pointer",transition:`all ${token.motionDurationMid} ${token.motionEaseInOut}`,userSelect:"none",touchAction:"manipulation",color:token.colorText,"\x26:disabled \x3e *":{pointerEvents:"none"},[`${componentCls}-icon > svg`]:(0,_style.resetIcon)(),"\x3e a":{color:"currentColor"},"\x26:not(:disabled)":(0,_style.genFocusStyle)(token),[`&${componentCls}-two-chinese-chars::first-letter`]:{letterSpacing:"0.34em"},
[`&${componentCls}-two-chinese-chars > *:not(${iconCls})`]:{marginInlineEnd:"-0.34em",letterSpacing:"0.34em"},[`&${componentCls}-icon-only`]:{paddingInline:0,[`&${componentCls}-compact-item`]:{flex:"none"},[`&${componentCls}-round`]:{width:"auto"}},[`&${componentCls}-loading`]:{opacity:opacityLoading,cursor:"default"},[`${componentCls}-loading-icon`]:{transition:["width","opacity","margin"].map(transition=>`${transition} ${motionDurationSlow} ${motionEaseInOut}`).join(",")},[`&:not(${componentCls}-icon-end)`]:{[`${componentCls}-loading-icon-motion`]:{"\x26-appear-start, \x26-enter-start":{marginInlineEnd:calc(marginXS).mul(-1).equal()},
"\x26-appear-active, \x26-enter-active":{marginInlineEnd:0},"\x26-leave-start":{marginInlineEnd:0},"\x26-leave-active":{marginInlineEnd:calc(marginXS).mul(-1).equal()}}},"\x26-icon-end":{flexDirection:"row-reverse",[`${componentCls}-loading-icon-motion`]:{"\x26-appear-start, \x26-enter-start":{marginInlineStart:calc(marginXS).mul(-1).equal()},"\x26-appear-active, \x26-enter-active":{marginInlineStart:0},"\x26-leave-start":{marginInlineStart:0},"\x26-leave-active":{marginInlineStart:calc(marginXS).mul(-1).equal()}}}}}},
genHoverActiveButtonStyle=(btnCls,hoverStyle,activeStyle)=>({[`&:not(:disabled):not(${btnCls}-disabled)`]:{"\x26:hover":hoverStyle,"\x26:active":activeStyle}}),genGhostButtonStyle=(btnCls,background,textColor,borderColor,textColorDisabled,borderColorDisabled,hoverStyle,activeStyle)=>({[`&${btnCls}-background-ghost`]:Object.assign(Object.assign({color:textColor||void 0,background,borderColor:borderColor||void 0,boxShadow:"none"},genHoverActiveButtonStyle(btnCls,Object.assign({background},hoverStyle),
Object.assign({background},activeStyle))),{"\x26:disabled":{cursor:"not-allowed",color:textColorDisabled||void 0,borderColor:borderColorDisabled||void 0}})}),genSolidDisabledButtonStyle=token=>({[`&:disabled, &${token.componentCls}-disabled`]:Object.assign({},{cursor:"not-allowed",borderColor:token.borderColorDisabled,color:token.colorTextDisabled,background:token.colorBgContainerDisabled,boxShadow:"none"})}),genPureDisabledButtonStyle=token=>({[`&:disabled, &${token.componentCls}-disabled`]:{cursor:"not-allowed",
color:token.colorTextDisabled}}),genVariantButtonStyle=(token,hoverStyle,activeStyle,variant)=>{variant=variant&&["link","text"].includes(variant)?genPureDisabledButtonStyle:genSolidDisabledButtonStyle;return Object.assign(Object.assign({},variant(token)),genHoverActiveButtonStyle(token.componentCls,hoverStyle,activeStyle))},genSolidButtonStyle=(token,textColor,background,hoverStyle,activeStyle)=>({[`&${token.componentCls}-variant-solid`]:Object.assign({color:textColor,background},genVariantButtonStyle(token,
hoverStyle,activeStyle))}),genOutlinedDashedButtonStyle=(token,borderColor,background,hoverStyle,activeStyle)=>({[`&${token.componentCls}-variant-outlined, &${token.componentCls}-variant-dashed`]:Object.assign({borderColor,background},genVariantButtonStyle(token,hoverStyle,activeStyle))}),genDashedButtonStyle=token=>({[`&${token.componentCls}-variant-dashed`]:{borderStyle:"dashed"}}),genFilledButtonStyle=(token,background,hoverStyle,activeStyle)=>({[`&${token.componentCls}-variant-filled`]:Object.assign({boxShadow:"none",
background},genVariantButtonStyle(token,hoverStyle,activeStyle))}),genTextLinkButtonStyle=(token,textColor,variant,hoverStyle,activeStyle)=>({[`&${token.componentCls}-variant-${variant}`]:Object.assign({color:textColor,boxShadow:"none"},genVariantButtonStyle(token,hoverStyle,activeStyle,variant))}),genPresetColorStyle=token=>{const {componentCls}=token;return _interface.PresetColors.reduce((prev,colorKey)=>{const darkColor=token[`${colorKey}6`],lightColor=token[`${colorKey}1`],hoverColor=token[`${colorKey}5`],
lightHoverColor=token[`${colorKey}2`],lightBorderColor=token[`${colorKey}3`],activeColor=token[`${colorKey}7`],boxShadow=`0 ${(0,_cssinjs.unit)(token.controlOutlineWidth)} 0 ${token[`${colorKey}1`]}`;return Object.assign(Object.assign({},prev),{[`&${componentCls}-color-${colorKey}`]:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({color:darkColor,boxShadow},genSolidButtonStyle(token,token.colorTextLightSolid,darkColor,{background:hoverColor},{background:activeColor})),
genOutlinedDashedButtonStyle(token,darkColor,token.colorBgContainer,{color:hoverColor,borderColor:hoverColor,background:token.colorBgContainer},{color:activeColor,borderColor:activeColor,background:token.colorBgContainer})),genDashedButtonStyle(token)),genFilledButtonStyle(token,lightColor,{background:lightHoverColor},{background:lightBorderColor})),genTextLinkButtonStyle(token,darkColor,"link",{color:hoverColor},{color:activeColor})),genTextLinkButtonStyle(token,darkColor,"text",{color:hoverColor,
background:lightColor},{color:activeColor,background:lightBorderColor}))})},{})},genButtonStyle=function(token){let prefixCls=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"";const {componentCls,controlHeight,fontSize,borderRadius,buttonPaddingHorizontal,iconCls,buttonPaddingVertical,buttonIconOnlyFontSize}=token;var JSCompiler_temp_const={[prefixCls]:{fontSize,height:controlHeight,padding:`${(0,_cssinjs.unit)(buttonPaddingVertical)} ${(0,_cssinjs.unit)(buttonPaddingHorizontal)}`,borderRadius,
[`&${componentCls}-icon-only`]:{width:controlHeight,[iconCls]:{fontSize:buttonIconOnlyFontSize}}}},JSCompiler_temp_const$jscomp$0={[`${componentCls}${componentCls}-circle${prefixCls}`]:{minWidth:token.controlHeight,paddingInlineStart:0,paddingInlineEnd:0,borderRadius:"50%"}};var JSCompiler_inline_result={borderRadius:token.controlHeight,paddingInlineStart:token.calc(token.controlHeight).div(2).equal(),paddingInlineEnd:token.calc(token.controlHeight).div(2).equal()};return[JSCompiler_temp_const,JSCompiler_temp_const$jscomp$0,
{[`${componentCls}${componentCls}-round${prefixCls}`]:JSCompiler_inline_result}]};exports.default=(0,_internal.genStyleHooks)("Button",token=>{token=(0,_token.prepareToken)(token);var JSCompiler_temp_const=genSharedButtonStyle(token);var JSCompiler_temp_const$jscomp$0=(0,_internal.mergeToken)(token,{fontSize:token.contentFontSize});JSCompiler_temp_const$jscomp$0=genButtonStyle(JSCompiler_temp_const$jscomp$0,token.componentCls);var JSCompiler_temp_const$jscomp$1=(0,_internal.mergeToken)(token,{controlHeight:token.controlHeightSM,
fontSize:token.contentFontSizeSM,padding:token.paddingXS,buttonPaddingHorizontal:token.paddingInlineSM,buttonPaddingVertical:0,borderRadius:token.borderRadiusSM,buttonIconOnlyFontSize:token.onlyIconSizeSM});JSCompiler_temp_const$jscomp$1=genButtonStyle(JSCompiler_temp_const$jscomp$1,`${token.componentCls}-sm`);var JSCompiler_temp_const$jscomp$2=(0,_internal.mergeToken)(token,{controlHeight:token.controlHeightLG,fontSize:token.contentFontSizeLG,buttonPaddingHorizontal:token.paddingInlineLG,buttonPaddingVertical:0,
borderRadius:token.borderRadiusLG,buttonIconOnlyFontSize:token.onlyIconSizeLG});JSCompiler_temp_const$jscomp$2=genButtonStyle(JSCompiler_temp_const$jscomp$2,`${token.componentCls}-lg`);({componentCls:JSCompiler_temp_const$jscomp$3}=token);var JSCompiler_temp_const$jscomp$3={[JSCompiler_temp_const$jscomp$3]:{[`&${JSCompiler_temp_const$jscomp$3}-block`]:{width:"100%"}}};({componentCls:JSCompiler_inline_result}=token);var JSCompiler_inline_result=Object.assign({[`${JSCompiler_inline_result}-color-default`]:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({color:token.defaultColor,
boxShadow:token.defaultShadow},genSolidButtonStyle(token,token.solidTextColor,token.colorBgSolid,{color:token.solidTextColor,background:token.colorBgSolidHover},{color:token.solidTextColor,background:token.colorBgSolidActive})),genDashedButtonStyle(token)),genFilledButtonStyle(token,token.colorFillTertiary,{background:token.colorFillSecondary},{background:token.colorFill})),genTextLinkButtonStyle(token,token.textTextColor,"link",{color:token.colorLinkHover,background:token.linkHoverBg},{color:token.colorLinkActive})),
genGhostButtonStyle(token.componentCls,token.ghostBg,token.defaultGhostColor,token.defaultGhostBorderColor,token.colorTextDisabled,token.colorBorder)),[`${JSCompiler_inline_result}-color-primary`]:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({color:token.colorPrimary,boxShadow:token.primaryShadow},genOutlinedDashedButtonStyle(token,token.colorPrimary,token.colorBgContainer,{color:token.colorPrimaryTextHover,borderColor:token.colorPrimaryHover,background:token.colorBgContainer},
{color:token.colorPrimaryTextActive,borderColor:token.colorPrimaryActive,background:token.colorBgContainer})),genDashedButtonStyle(token)),genFilledButtonStyle(token,token.colorPrimaryBg,{background:token.colorPrimaryBgHover},{background:token.colorPrimaryBorder})),genTextLinkButtonStyle(token,token.colorLink,"text",{color:token.colorPrimaryTextHover,background:token.colorPrimaryBg},{color:token.colorPrimaryTextActive,background:token.colorPrimaryBorder})),genGhostButtonStyle(token.componentCls,token.ghostBg,
token.colorPrimary,token.colorPrimary,token.colorTextDisabled,token.colorBorder,{color:token.colorPrimaryHover,borderColor:token.colorPrimaryHover},{color:token.colorPrimaryActive,borderColor:token.colorPrimaryActive})),[`${JSCompiler_inline_result}-color-dangerous`]:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({color:token.colorError,boxShadow:token.dangerShadow},genSolidButtonStyle(token,token.dangerColor,token.colorError,{background:token.colorErrorHover},
{background:token.colorErrorActive})),genOutlinedDashedButtonStyle(token,token.colorError,token.colorBgContainer,{color:token.colorErrorHover,borderColor:token.colorErrorBorderHover},{color:token.colorErrorActive,borderColor:token.colorErrorActive})),genDashedButtonStyle(token)),genFilledButtonStyle(token,token.colorErrorBg,{background:token.colorErrorBgFilledHover},{background:token.colorErrorBgActive})),genTextLinkButtonStyle(token,token.colorError,"text",{color:token.colorErrorHover,background:token.colorErrorBg},
{color:token.colorErrorHover,background:token.colorErrorBgActive})),genTextLinkButtonStyle(token,token.colorError,"link",{color:token.colorErrorHover},{color:token.colorErrorActive})),genGhostButtonStyle(token.componentCls,token.ghostBg,token.colorError,token.colorError,token.colorTextDisabled,token.colorBorder,{color:token.colorErrorHover,borderColor:token.colorErrorHover},{color:token.colorErrorActive,borderColor:token.colorErrorActive}))},genPresetColorStyle(token));return[JSCompiler_temp_const,
JSCompiler_temp_const$jscomp$0,JSCompiler_temp_const$jscomp$1,JSCompiler_temp_const$jscomp$2,JSCompiler_temp_const$jscomp$3,JSCompiler_inline_result,Object.assign(Object.assign(Object.assign(Object.assign({},genOutlinedDashedButtonStyle(token,token.defaultBorderColor,token.defaultBg,{color:token.defaultHoverColor,borderColor:token.defaultHoverBorderColor,background:token.defaultHoverBg},{color:token.defaultActiveColor,borderColor:token.defaultActiveBorderColor,background:token.defaultActiveBg})),
genTextLinkButtonStyle(token,token.textTextColor,"text",{color:token.textTextHoverColor,background:token.textHoverBg},{color:token.textTextActiveColor,background:token.colorBgTextActive})),genSolidButtonStyle(token,token.primaryColor,token.colorPrimary,{background:token.colorPrimaryHover,color:token.primaryColor},{background:token.colorPrimaryActive,color:token.primaryColor})),genTextLinkButtonStyle(token,token.colorLink,"link",{color:token.colorLinkHover,background:token.linkHoverBg},{color:token.colorLinkActive})),
(0,_group.default)(token)]},_token.prepareComponentToken,{unitless:{fontWeight:!0,contentLineHeight:!0,contentLineHeightSM:!0,contentLineHeightLG:!0}})}
//# sourceMappingURL=module$node_modules$antd$lib$button$style$index.js.map
