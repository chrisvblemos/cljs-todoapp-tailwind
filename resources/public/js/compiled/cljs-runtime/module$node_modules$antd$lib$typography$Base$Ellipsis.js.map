{
"version":3,
"file":"module$node_modules$antd$lib$typography$Base$Ellipsis.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/antd/lib/typography/Base/Ellipsis.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$antd$lib$typography$Base$Ellipsis\"] = function(global,require,module,exports) {\n\"use strict\";\n\"use client\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EllipsisMeasure;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\nvar _useLayoutEffect = _interopRequireDefault(require(\"rc-util/lib/hooks/useLayoutEffect\"));\nvar _util = require(\"./util\");\nconst MeasureText = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    style,\n    children\n  } = _ref;\n  const spanRef = React.useRef(null);\n  React.useImperativeHandle(ref, () => ({\n    isExceed: () => {\n      const span = spanRef.current;\n      return span.scrollHeight > span.clientHeight;\n    },\n    getHeight: () => spanRef.current.clientHeight\n  }));\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    ref: spanRef,\n    style: Object.assign({\n      position: 'fixed',\n      display: 'block',\n      left: 0,\n      top: 0,\n      pointerEvents: 'none',\n      backgroundColor: 'rgba(255, 0, 0, 0.65)'\n    }, style)\n  }, children);\n});\nconst getNodesLen = nodeList => nodeList.reduce((totalLen, node) => totalLen + ((0, _util.isValidText)(node) ? String(node).length : 1), 0);\nfunction sliceNodes(nodeList, len) {\n  let currLen = 0;\n  const currentNodeList = [];\n  for (let i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n    const node = nodeList[i];\n    const canCut = (0, _util.isValidText)(node);\n    const nodeLen = canCut ? String(node).length : 1;\n    const nextLen = currLen + nodeLen;\n    // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n    if (nextLen > len) {\n      const restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n  return nodeList;\n}\n// Measure for the `text` is exceed the `rows` or not\nconst STATUS_MEASURE_NONE = 0;\nconst STATUS_MEASURE_PREPARE = 1;\nconst STATUS_MEASURE_START = 2;\nconst STATUS_MEASURE_NEED_ELLIPSIS = 3;\nconst STATUS_MEASURE_NO_NEED_ELLIPSIS = 4;\nconst lineClipStyle = {\n  display: '-webkit-box',\n  overflow: 'hidden',\n  WebkitBoxOrient: 'vertical'\n};\nfunction EllipsisMeasure(props) {\n  const {\n    enableMeasure,\n    width,\n    text,\n    children,\n    rows,\n    expanded,\n    miscDeps,\n    onEllipsis\n  } = props;\n  const nodeList = React.useMemo(() => (0, _toArray.default)(text), [text]);\n  const nodeLen = React.useMemo(() => getNodesLen(nodeList), [text]);\n  // ========================= Full Content =========================\n  // Used for measure only, which means it's always render as no need ellipsis\n  const fullContent = React.useMemo(() => children(nodeList, false), [text]);\n  // ========================= Cut Content ==========================\n  const [ellipsisCutIndex, setEllipsisCutIndex] = React.useState(null);\n  const cutMidRef = React.useRef(null);\n  // ========================= NeedEllipsis =========================\n  const measureWhiteSpaceRef = React.useRef(null);\n  const needEllipsisRef = React.useRef(null);\n  // Measure for `rows-1` height, to avoid operation exceed the line height\n  const descRowsEllipsisRef = React.useRef(null);\n  const symbolRowEllipsisRef = React.useRef(null);\n  const [canEllipsis, setCanEllipsis] = React.useState(false);\n  const [needEllipsis, setNeedEllipsis] = React.useState(STATUS_MEASURE_NONE);\n  const [ellipsisHeight, setEllipsisHeight] = React.useState(0);\n  const [parentWhiteSpace, setParentWhiteSpace] = React.useState(null);\n  // Trigger start measure\n  (0, _useLayoutEffect.default)(() => {\n    if (enableMeasure && width && nodeLen) {\n      setNeedEllipsis(STATUS_MEASURE_PREPARE);\n    } else {\n      setNeedEllipsis(STATUS_MEASURE_NONE);\n    }\n  }, [width, text, rows, enableMeasure, nodeList]);\n  // Measure process\n  (0, _useLayoutEffect.default)(() => {\n    var _a, _b, _c, _d;\n    if (needEllipsis === STATUS_MEASURE_PREPARE) {\n      setNeedEllipsis(STATUS_MEASURE_START);\n      // Parent ref `white-space`\n      const nextWhiteSpace = measureWhiteSpaceRef.current && getComputedStyle(measureWhiteSpaceRef.current).whiteSpace;\n      setParentWhiteSpace(nextWhiteSpace);\n    } else if (needEllipsis === STATUS_MEASURE_START) {\n      const isOverflow = !!((_a = needEllipsisRef.current) === null || _a === void 0 ? void 0 : _a.isExceed());\n      setNeedEllipsis(isOverflow ? STATUS_MEASURE_NEED_ELLIPSIS : STATUS_MEASURE_NO_NEED_ELLIPSIS);\n      setEllipsisCutIndex(isOverflow ? [0, nodeLen] : null);\n      setCanEllipsis(isOverflow);\n      // Get the basic height of ellipsis rows\n      const baseRowsEllipsisHeight = ((_b = needEllipsisRef.current) === null || _b === void 0 ? void 0 : _b.getHeight()) || 0;\n      // Get the height of `rows - 1` + symbol height\n      const descRowsEllipsisHeight = rows === 1 ? 0 : ((_c = descRowsEllipsisRef.current) === null || _c === void 0 ? void 0 : _c.getHeight()) || 0;\n      const symbolRowEllipsisHeight = ((_d = symbolRowEllipsisRef.current) === null || _d === void 0 ? void 0 : _d.getHeight()) || 0;\n      const maxRowsHeight = Math.max(baseRowsEllipsisHeight,\n      // height of rows with ellipsis\n      descRowsEllipsisHeight + symbolRowEllipsisHeight);\n      setEllipsisHeight(maxRowsHeight + 1);\n      onEllipsis(isOverflow);\n    }\n  }, [needEllipsis]);\n  // ========================= Cut Measure ==========================\n  const cutMidIndex = ellipsisCutIndex ? Math.ceil((ellipsisCutIndex[0] + ellipsisCutIndex[1]) / 2) : 0;\n  (0, _useLayoutEffect.default)(() => {\n    var _a;\n    const [minIndex, maxIndex] = ellipsisCutIndex || [0, 0];\n    if (minIndex !== maxIndex) {\n      const midHeight = ((_a = cutMidRef.current) === null || _a === void 0 ? void 0 : _a.getHeight()) || 0;\n      const isOverflow = midHeight > ellipsisHeight;\n      let targetMidIndex = cutMidIndex;\n      if (maxIndex - minIndex === 1) {\n        targetMidIndex = isOverflow ? minIndex : maxIndex;\n      }\n      setEllipsisCutIndex(isOverflow ? [minIndex, targetMidIndex] : [targetMidIndex, maxIndex]);\n    }\n  }, [ellipsisCutIndex, cutMidIndex]);\n  // ========================= Text Content =========================\n  const finalContent = React.useMemo(() => {\n    // Skip everything if `enableMeasure` is disabled\n    if (!enableMeasure) {\n      return children(nodeList, false);\n    }\n    if (needEllipsis !== STATUS_MEASURE_NEED_ELLIPSIS || !ellipsisCutIndex || ellipsisCutIndex[0] !== ellipsisCutIndex[1]) {\n      const content = children(nodeList, false);\n      // Limit the max line count to avoid scrollbar blink unless no need ellipsis\n      // https://github.com/ant-design/ant-design/issues/42958\n      if ([STATUS_MEASURE_NO_NEED_ELLIPSIS, STATUS_MEASURE_NONE].includes(needEllipsis)) {\n        return content;\n      }\n      return /*#__PURE__*/React.createElement(\"span\", {\n        style: Object.assign(Object.assign({}, lineClipStyle), {\n          WebkitLineClamp: rows\n        })\n      }, content);\n    }\n    return children(expanded ? nodeList : sliceNodes(nodeList, ellipsisCutIndex[0]), canEllipsis);\n  }, [expanded, needEllipsis, ellipsisCutIndex, nodeList].concat((0, _toConsumableArray2.default)(miscDeps)));\n  // ============================ Render ============================\n  const measureStyle = {\n    width,\n    margin: 0,\n    padding: 0,\n    whiteSpace: parentWhiteSpace === 'nowrap' ? 'normal' : 'inherit'\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, finalContent, needEllipsis === STATUS_MEASURE_START && (/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows\n    }),\n    ref: needEllipsisRef\n  }, fullContent), /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows - 1\n    }),\n    ref: descRowsEllipsisRef\n  }, fullContent), /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: 1\n    }),\n    ref: symbolRowEllipsisRef\n  }, children([], true)))), needEllipsis === STATUS_MEASURE_NEED_ELLIPSIS && ellipsisCutIndex && ellipsisCutIndex[0] !== ellipsisCutIndex[1] && (/*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign({}, measureStyle), {\n      top: 400\n    }),\n    ref: cutMidRef\n  }, children(sliceNodes(nodeList, cutMidIndex), true))), needEllipsis === STATUS_MEASURE_PREPARE && (/*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      whiteSpace: 'inherit'\n    },\n    ref: measureWhiteSpaceRef\n  })));\n}\n};"],
"names":["shadow$provide","global","require","module","exports","sliceNodes","nodeList","len","currLen","currentNodeList","i","length","node","nodeLen","canCut","_util","isValidText","String","nextLen","push","slice","_interopRequireWildcard","default","_interopRequireDefault","Object","defineProperty","value","EllipsisMeasure","props","enableMeasure","width","text","children","rows","expanded","miscDeps","onEllipsis","React","useMemo","_toArray","getNodesLen","fullContent","ellipsisCutIndex","setEllipsisCutIndex","useState","cutMidRef","useRef","measureWhiteSpaceRef","needEllipsisRef","descRowsEllipsisRef","symbolRowEllipsisRef","canEllipsis","setCanEllipsis","needEllipsis","setNeedEllipsis","STATUS_MEASURE_NONE","ellipsisHeight","setEllipsisHeight","parentWhiteSpace","setParentWhiteSpace","_useLayoutEffect","STATUS_MEASURE_PREPARE","_a","_b","_c","STATUS_MEASURE_START","nextWhiteSpace","current","getComputedStyle","whiteSpace","isOverflow","isExceed","STATUS_MEASURE_NEED_ELLIPSIS","STATUS_MEASURE_NO_NEED_ELLIPSIS","baseRowsEllipsisHeight","getHeight","descRowsEllipsisHeight","symbolRowEllipsisHeight","_d","Math","max","maxRowsHeight","cutMidIndex","ceil","minIndex","maxIndex","targetMidIndex","finalContent","content","includes","createElement","style","assign","lineClipStyle","WebkitLineClamp","concat","_toConsumableArray2","measureStyle","margin","padding","Fragment","MeasureText","ref","top","forwardRef","_ref","spanRef","useImperativeHandle","span","scrollHeight","clientHeight","position","display","left","pointerEvents","backgroundColor","reduce","totalLen","overflow","WebkitBoxOrient"]
}
