shadow$provide.module$node_modules$antd$lib$table$hooks$useSelection=function(global,require,module,exports){"use client";global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=exports.SELECTION_NONE=exports.SELECTION_INVERT=exports.SELECTION_COLUMN=exports.SELECTION_ALL=void 0;var _toConsumableArray2=
module(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),_react=global(require("module$node_modules$react$index")),_DownOutlined=module(require("module$node_modules$$ant_design$icons$DownOutlined")),_classnames=module(require("module$node_modules$classnames$index")),_rcTable=require("module$node_modules$rc_table$lib$index"),_util=require("module$node_modules$rc_tree$lib$util"),_conductUtil=require("module$node_modules$rc_tree$lib$utils$conductUtil"),_treeUtil=require("module$node_modules$rc_tree$lib$utils$treeUtil"),
_useMergedState=module(require("module$node_modules$rc_util$lib$hooks$useMergedState")),_useMultipleSelect=module(require("module$node_modules$antd$lib$_util$hooks$useMultipleSelect")),_warning=require("module$node_modules$antd$lib$_util$warning"),_checkbox=module(require("module$node_modules$antd$lib$checkbox$index")),_dropdown=module(require("module$node_modules$antd$lib$dropdown$index")),_radio=module(require("module$node_modules$antd$lib$radio$index"));const SELECTION_COLUMN=exports.SELECTION_COLUMN=
{},SELECTION_ALL=exports.SELECTION_ALL="SELECT_ALL",SELECTION_INVERT=exports.SELECTION_INVERT="SELECT_INVERT",SELECTION_NONE=exports.SELECTION_NONE="SELECT_NONE",EMPTY_LIST=[],flattenData=(childrenColumnName,data)=>{let list=[];(data||[]).forEach(record=>{list.push(record);record&&"object"===typeof record&&childrenColumnName in record&&(list=[].concat((0,_toConsumableArray2.default)(list),(0,_toConsumableArray2.default)(flattenData(childrenColumnName,record[childrenColumnName]))))});return list};
exports.default=(config,rowSelection)=>{const {preserveSelectedRowKeys,selectedRowKeys,defaultSelectedRowKeys,getCheckboxProps,onChange:onSelectionChange,onSelect,onSelectAll,onSelectInvert,onSelectNone,onSelectMultiple,columnWidth:selectionColWidth,type:selectionType,selections,fixed,renderCell:customizeRenderCell,hideSelectAll,checkStrictly=!0}=rowSelection||{},{prefixCls,data,pageData,getRecordByKey,getRowKey,expandType,childrenColumnName,locale:tableLocale,getPopupContainer}=config,warning=(0,_warning.devUseWarning)("Table"),
[multipleSelect,updatePrevSelectedIndex]=(0,_useMultipleSelect.default)(item=>item),[mergedSelectedKeys,setMergedSelectedKeys]=(0,_useMergedState.default)(selectedRowKeys||defaultSelectedRowKeys||EMPTY_LIST,{value:selectedRowKeys}),preserveRecordsRef=_react.useRef(new Map),updatePreserveRecordsCache=(0,_react.useCallback)(keys=>{if(preserveSelectedRowKeys){const newCache=new Map;keys.forEach(key=>{let record=getRecordByKey(key);!record&&preserveRecordsRef.current.has(key)&&(record=preserveRecordsRef.current.get(key));
newCache.set(key,record)});preserveRecordsRef.current=newCache}},[getRecordByKey,preserveSelectedRowKeys]);_react.useEffect(()=>{updatePreserveRecordsCache(mergedSelectedKeys)},[mergedSelectedKeys]);const flattedData=(0,_react.useMemo)(()=>flattenData(childrenColumnName,pageData),[childrenColumnName,pageData]),{keyEntities}=(0,_react.useMemo)(()=>{if(checkStrictly)return{keyEntities:null};let convertData=data;if(preserveSelectedRowKeys){const keysSet=new Set(flattedData.map((record,index)=>getRowKey(record,
index))),preserveRecords=Array.from(preserveRecordsRef.current).reduce((total,_ref)=>{let [key,value]=_ref;return keysSet.has(key)?total:total.concat(value)},[]);convertData=[].concat((0,_toConsumableArray2.default)(convertData),(0,_toConsumableArray2.default)(preserveRecords))}return(0,_treeUtil.convertDataToEntities)(convertData,{externalGetKey:getRowKey,childrenPropName:childrenColumnName})},[data,getRowKey,checkStrictly,childrenColumnName,preserveSelectedRowKeys,flattedData]),checkboxPropsMap=
(0,_react.useMemo)(()=>{const map=new Map;flattedData.forEach((record,index)=>{index=getRowKey(record,index);record=(getCheckboxProps?getCheckboxProps(record):null)||{};map.set(index,record);warning(!("checked"in record||"defaultChecked"in record),"usage","Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.")});return map},[flattedData,getRowKey,getCheckboxProps]),isCheckboxDisabled=(0,_react.useCallback)(r=>{const rowKey=getRowKey(r);r=checkboxPropsMap.has(rowKey)?
checkboxPropsMap.get(getRowKey(r)):getCheckboxProps?getCheckboxProps(r):void 0;return!(null===r||void 0===r||!r.disabled)},[checkboxPropsMap,getRowKey]),[derivedSelectedKeys,derivedHalfSelectedKeys]=(0,_react.useMemo)(()=>{if(checkStrictly)return[mergedSelectedKeys||[],[]];const {checkedKeys,halfCheckedKeys}=(0,_conductUtil.conductCheck)(mergedSelectedKeys,!0,keyEntities,isCheckboxDisabled);return[checkedKeys||[],halfCheckedKeys]},[mergedSelectedKeys,checkStrictly,keyEntities,isCheckboxDisabled]),
derivedSelectedKeySet=(0,_react.useMemo)(()=>{const keys="radio"===selectionType?derivedSelectedKeys.slice(0,1):derivedSelectedKeys;return new Set(keys)},[derivedSelectedKeys,selectionType]),derivedHalfSelectedKeySet=(0,_react.useMemo)(()=>"radio"===selectionType?new Set:new Set(derivedHalfSelectedKeys),[derivedHalfSelectedKeys,selectionType]);_react.useEffect(()=>{rowSelection||setMergedSelectedKeys(EMPTY_LIST)},[!!rowSelection]);const setSelectedKeys=(0,_react.useCallback)((keys,method)=>{let availableKeys,
records;updatePreserveRecordsCache(keys);preserveSelectedRowKeys?(availableKeys=keys,records=keys.map(key=>preserveRecordsRef.current.get(key))):(availableKeys=[],records=[],keys.forEach(key=>{const record=getRecordByKey(key);void 0!==record&&(availableKeys.push(key),records.push(record))}));setMergedSelectedKeys(availableKeys);null===onSelectionChange||void 0===onSelectionChange?void 0:onSelectionChange(availableKeys,records,{type:method})},[setMergedSelectedKeys,getRecordByKey,onSelectionChange,
preserveSelectedRowKeys]),triggerSingleSelection=(0,_react.useCallback)((key,selected,keys,event)=>{if(onSelect){const rows=keys.map(k=>getRecordByKey(k));onSelect(getRecordByKey(key),selected,rows,event)}setSelectedKeys(keys,"single")},[onSelect,getRecordByKey,setSelectedKeys]),mergedSelections=(0,_react.useMemo)(()=>!selections||hideSelectAll?null:(!0===selections?[SELECTION_ALL,SELECTION_INVERT,SELECTION_NONE]:selections).map(selection=>selection===SELECTION_ALL?{key:"all",text:tableLocale.selectionAll,
onSelect(){setSelectedKeys(data.map((record,index)=>getRowKey(record,index)).filter(key=>{const checkProps=checkboxPropsMap.get(key);return!(null===checkProps||void 0===checkProps?0:checkProps.disabled)||derivedSelectedKeySet.has(key)}),"all")}}:selection===SELECTION_INVERT?{key:"invert",text:tableLocale.selectInvert,onSelect(){const keySet=new Set(derivedSelectedKeySet);pageData.forEach((record,index)=>{record=getRowKey(record,index);index=checkboxPropsMap.get(record);(null===index||void 0===index?
0:index.disabled)||(keySet.has(record)?keySet.delete(record):keySet.add(record))});const keys=Array.from(keySet);onSelectInvert&&(warning.deprecated(!1,"onSelectInvert","onChange"),onSelectInvert(keys));setSelectedKeys(keys,"invert")}}:selection===SELECTION_NONE?{key:"none",text:tableLocale.selectNone,onSelect(){null===onSelectNone||void 0===onSelectNone?void 0:onSelectNone();setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key=>{key=checkboxPropsMap.get(key);return null===key||void 0===key?
void 0:key.disabled}),"none")}}:selection).map(selection=>Object.assign(Object.assign({},selection),{onSelect:function(){for(var _a,_len=arguments.length,rest=Array(_len),_key=0;_key<_len;_key++)rest[_key]=arguments[_key];null===(_a=selection.onSelect)||void 0===_a?void 0:_a.call.apply(_a,[selection].concat(rest));updatePrevSelectedIndex(null)}})),[selections,derivedSelectedKeySet,pageData,getRowKey,onSelectInvert,setSelectedKeys]);return[(0,_react.useCallback)(columns=>{var _a;if(!rowSelection)return warning(!columns.includes(SELECTION_COLUMN),
"usage","`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`."),columns.filter(col=>col!==SELECTION_COLUMN);columns=(0,_toConsumableArray2.default)(columns);const keySet=new Set(derivedSelectedKeySet),recordKeys=flattedData.map(getRowKey).filter(key=>!checkboxPropsMap.get(key).disabled),checkedCurrentAll=recordKeys.every(key=>keySet.has(key));var checkedCurrentSome=recordKeys.some(key=>keySet.has(key)),onSelectAllChange=()=>{const changeKeys=[];checkedCurrentAll?recordKeys.forEach(key=>
{keySet.delete(key);changeKeys.push(key)}):recordKeys.forEach(key=>{keySet.has(key)||(keySet.add(key),changeKeys.push(key))});const keys=Array.from(keySet);null===onSelectAll||void 0===onSelectAll?void 0:onSelectAll(!checkedCurrentAll,keys.map(k=>getRecordByKey(k)),changeKeys.map(k=>getRecordByKey(k)));setSelectedKeys(keys,"all");updatePrevSelectedIndex(null)};if("radio"!==selectionType){if(mergedSelections){var title={getPopupContainer,items:mergedSelections.map((selection,index)=>{const {key,text,
onSelect:onSelectionClick}=selection;return{key:null!==key&&void 0!==key?key:index,onClick:()=>{null===onSelectionClick||void 0===onSelectionClick?void 0:onSelectionClick(recordKeys)},label:text}})};var customizeSelections=_react.createElement("div",{className:`${prefixCls}-selection-extra`},_react.createElement(_dropdown.default,{menu:title,getPopupContainer},_react.createElement("span",null,_react.createElement(_DownOutlined.default,null))))}var allDisabledData=flattedData.map((record,index)=>{record=
getRowKey(record,index);index=checkboxPropsMap.get(record)||{};return Object.assign({checked:keySet.has(record)},index)}).filter(_ref2=>{({disabled:_ref2}=_ref2);return _ref2});var columnTitleCheckbox=(title=!!allDisabledData.length&&allDisabledData.length===flattedData.length)&&allDisabledData.every(_ref3=>{({checked:_ref3}=_ref3);return _ref3});allDisabledData=title&&allDisabledData.some(_ref4=>{({checked:_ref4}=_ref4);return _ref4});columnTitleCheckbox=_react.createElement(_checkbox.default,{checked:title?
columnTitleCheckbox:!!flattedData.length&&checkedCurrentAll,indeterminate:title?!columnTitleCheckbox&&allDisabledData:!checkedCurrentAll&&checkedCurrentSome,onChange:onSelectAllChange,disabled:0===flattedData.length||title,"aria-label":customizeSelections?"Custom selection":"Select all",skipGroup:!0});title=!hideSelectAll&&_react.createElement("div",{className:`${prefixCls}-selection`},columnTitleCheckbox,customizeSelections)}let renderCell;renderCell="radio"===selectionType?(_,record,index)=>{const key=
getRowKey(record,index);_=keySet.has(key);const checkboxProps=checkboxPropsMap.get(key);return{node:_react.createElement(_radio.default,Object.assign({},checkboxProps,{checked:_,onClick:e=>{var _a;e.stopPropagation();null===(_a=null===checkboxProps||void 0===checkboxProps?void 0:checkboxProps.onClick)||void 0===_a?void 0:_a.call(checkboxProps,e)},onChange:event=>{var _a;keySet.has(key)||triggerSingleSelection(key,!0,[key],event.nativeEvent);null===(_a=null===checkboxProps||void 0===checkboxProps?
void 0:checkboxProps.onChange)||void 0===_a?void 0:_a.call(checkboxProps,event)}})),checked:_}}:(_,record,index)=>{var _a;const key=getRowKey(record,index),checked=keySet.has(key);_=derivedHalfSelectedKeySet.has(key);const checkboxProps=checkboxPropsMap.get(key);"nest"===expandType?(record=_,warning("boolean"!==typeof(null===checkboxProps||void 0===checkboxProps?void 0:checkboxProps.indeterminate),"usage","set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.")):
record=null!==(_a=null===checkboxProps||void 0===checkboxProps?void 0:checkboxProps.indeterminate)&&void 0!==_a?_a:_;return{node:_react.createElement(_checkbox.default,Object.assign({},checkboxProps,{indeterminate:record,checked,skipGroup:!0,onClick:e=>{var _a;e.stopPropagation();null===(_a=null===checkboxProps||void 0===checkboxProps?void 0:checkboxProps.onClick)||void 0===_a?void 0:_a.call(checkboxProps,e)},onChange:event=>{var _a,{nativeEvent}=event,{shiftKey}=nativeEvent;const currentSelectedIndex=
recordKeys.findIndex(item=>item===key),isMultiple=derivedSelectedKeys.some(item=>recordKeys.includes(item));if(shiftKey&&checkStrictly&&isMultiple)nativeEvent=multipleSelect(currentSelectedIndex,recordKeys,keySet),shiftKey=Array.from(keySet),null===onSelectMultiple||void 0===onSelectMultiple?void 0:onSelectMultiple(!checked,shiftKey.map(recordKey=>getRecordByKey(recordKey)),nativeEvent.map(recordKey=>getRecordByKey(recordKey))),setSelectedKeys(shiftKey,"multiple");else if(checkStrictly)shiftKey=checked?
(0,_util.arrDel)(derivedSelectedKeys,key):(0,_util.arrAdd)(derivedSelectedKeys,key),triggerSingleSelection(key,!checked,shiftKey,nativeEvent);else{shiftKey=(0,_conductUtil.conductCheck)([].concat((0,_toConsumableArray2.default)(derivedSelectedKeys),[key]),!0,keyEntities,isCheckboxDisabled);const {checkedKeys,halfCheckedKeys}=shiftKey;shiftKey=checkedKeys;checked&&(shiftKey=new Set(checkedKeys),shiftKey.delete(key),shiftKey=(0,_conductUtil.conductCheck)(Array.from(shiftKey),{checked:!1,halfCheckedKeys},
keyEntities,isCheckboxDisabled).checkedKeys);triggerSingleSelection(key,!checked,shiftKey,nativeEvent)}checked?updatePrevSelectedIndex(null):updatePrevSelectedIndex(currentSelectedIndex);null===(_a=null===checkboxProps||void 0===checkboxProps?void 0:checkboxProps.onChange)||void 0===_a?void 0:_a.call(checkboxProps,event)}})),checked}};if(!columns.includes(SELECTION_COLUMN))if(0===columns.findIndex(col=>{var _a;return"EXPAND_COLUMN"===(null===(_a=col[_rcTable.INTERNAL_COL_DEFINE])||void 0===_a?void 0:
_a.columnType)})){const [expandColumn,...restColumns]=columns;columns=[expandColumn,SELECTION_COLUMN].concat((0,_toConsumableArray2.default)(restColumns))}else columns=[SELECTION_COLUMN].concat((0,_toConsumableArray2.default)(columns));const selectionColumnIndex=columns.indexOf(SELECTION_COLUMN);warning(1>=columns.filter(col=>col===SELECTION_COLUMN).length,"usage","Multiple `SELECTION_COLUMN` exist in `columns`.");columns=columns.filter((column,index)=>column!==SELECTION_COLUMN||index===selectionColumnIndex);
onSelectAllChange=columns[selectionColumnIndex-1];customizeSelections=columns[selectionColumnIndex+1];checkedCurrentSome=fixed;void 0===checkedCurrentSome&&(void 0!==(null===customizeSelections||void 0===customizeSelections?void 0:customizeSelections.fixed)?checkedCurrentSome=customizeSelections.fixed:void 0!==(null===onSelectAllChange||void 0===onSelectAllChange?void 0:onSelectAllChange.fixed)&&(checkedCurrentSome=onSelectAllChange.fixed));checkedCurrentSome&&onSelectAllChange&&"EXPAND_COLUMN"===
(null===(_a=onSelectAllChange[_rcTable.INTERNAL_COL_DEFINE])||void 0===_a?void 0:_a.columnType)&&void 0===onSelectAllChange.fixed&&(onSelectAllChange.fixed=checkedCurrentSome);_a=(0,_classnames.default)(`${prefixCls}-selection-col`,{[`${prefixCls}-selection-col-with-dropdown`]:selections&&"checkbox"===selectionType});const selectionColumn={fixed:checkedCurrentSome,width:selectionColWidth,className:`${prefixCls}-selection-column`,title:null!==rowSelection&&void 0!==rowSelection&&rowSelection.columnTitle?
"function"===typeof rowSelection.columnTitle?rowSelection.columnTitle(columnTitleCheckbox):rowSelection.columnTitle:title,render:(_,record,index)=>{const {node,checked}=renderCell(_,record,index);return customizeRenderCell?customizeRenderCell(checked,record,index,node):node},onCell:rowSelection.onCell,[_rcTable.INTERNAL_COL_DEFINE]:{className:_a}};return columns.map(col=>col===SELECTION_COLUMN?selectionColumn:col)},[getRowKey,flattedData,rowSelection,derivedSelectedKeys,derivedSelectedKeySet,derivedHalfSelectedKeySet,
selectionColWidth,mergedSelections,expandType,checkboxPropsMap,onSelectMultiple,triggerSingleSelection,isCheckboxDisabled]),derivedSelectedKeySet]}}
//# sourceMappingURL=module$node_modules$antd$lib$table$hooks$useSelection.js.map
