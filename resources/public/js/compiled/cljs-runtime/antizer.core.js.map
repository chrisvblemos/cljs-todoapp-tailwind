{"version":3,"sources":["antizer/core.cljs"],"mappings":"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","names":["antizer.core/antd-module","js/antd","antizer.core/kebab-case->camel-case","input","words","clojure.string.split","capitalize","cljs.core/rest","p1__12400#","cljs.core.map","cljs.core.apply","cljs.core/str","clojure.string/upper-case","cljs.core/first","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","antizer.core/map-keys->camel-case","p__12403","map__12404","cljs.core/--destructure-map","cljs.core.get","seq12401","G__12402","cljs.core/next","self__5754__auto__","data","html-props","convert-to-camel","p__12405","vec__12406","cljs.core.nth","key","value","cljs.core/name","clojure.walk/postwalk","x","cljs.core/map?","new-map","clojure.set/rename-keys","cljs.core.into","antizer.core/get-module-path","module-name","antizer.core/get-prop","prop","antizer.core.goog$module$goog$object.getValueByKeys","cljs.core.conj","antizer.core/call-js-func","seq12409","G__12410","func","args","cljs.core/clj->js","antizer.core/call-func","seq12411","G__12412","path"],"sourcesContent":["(ns antizer.core\n  (:require [clojure.string :as s]\n            [clojure.set :refer [rename-keys]]\n            [clojure.walk :as w]\n            [goog.object :refer [getValueByKeys]]\n            [cljsjs.antd]))\n\n(def antd-module js/antd)\n\n(defn kebab-case->camel-case\n  \"Converts from kebab case to camel case, eg: on-click to onClick\"\n  [input]\n  (let [words (s/split input #\"-\")\n        capitalize (->> (rest words)\n                        (map #(apply str (s/upper-case (first %)) (rest %))))]\n    (apply str (first words) capitalize)))\n\n(defn map-keys->camel-case \n  \"Stringifys all the keys of a cljs hashmap and converts them\n   from kebab case to camel case. If :html-props option is specified, \n   then rename the html properties values to their dom equivalent\n   before conversion\"\n  [data & {:keys [html-props]}]\n  (let [convert-to-camel (fn [[key value]]\n                          [(kebab-case->camel-case (name key)) value])]\n    (w/postwalk (fn [x]\n                  (if (map? x)\n                    (let [new-map (if html-props\n                                    (rename-keys x {:class :className :for :htmlFor})\n                                    x)]\n                      (into {} (map convert-to-camel new-map)))\n                    x))\n      data)))\n\n(defn get-module-path [module-name]\n  (s/split module-name #\"\\.\"))\n\n(defn get-prop\n  \"Retreives the value of the module's property\"\n  [module-name prop]\n  (when prop\n    (apply getValueByKeys antd-module (conj (get-module-path module-name) (name prop)))))\n\n(defn call-js-func\n  \"Calls a javascript function, converting the keys for any arguments \n   that are hashmaps from kebab case to camel case\n\n   * func - the native javascript to be called\"\n  [func & args]\n  (apply func (clj->js (map map-keys->camel-case args))))\n\n(defn call-func\n  \"Calls the ant module function\"\n  [module-name & args]\n  (let [path (get-module-path module-name)\n        func (apply getValueByKeys antd-module path)]\n    (apply call-js-func func args)))\n"],"x_google_ignoreList":[0]}