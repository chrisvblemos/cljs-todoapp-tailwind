shadow$provide.module$node_modules$antd$lib$transfer$index=function(global,require,module,exports){"use client";module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _toConsumableArray2=global(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),_react=module(require("module$node_modules$react$index")),
_classnames=global(require("module$node_modules$classnames$index")),_useMultipleSelect=global(require("module$node_modules$antd$lib$_util$hooks$useMultipleSelect")),_statusUtils=require("module$node_modules$antd$lib$_util$statusUtils"),_transKeys=require("module$node_modules$antd$lib$_util$transKeys"),_warning=require("module$node_modules$antd$lib$_util$warning"),_configProvider=require("module$node_modules$antd$lib$config_provider$index"),_defaultRenderEmpty=global(require("module$node_modules$antd$lib$config_provider$defaultRenderEmpty")),
_context=require("module$node_modules$antd$lib$form$context"),_locale=require("module$node_modules$antd$lib$locale$index"),_en_US=global(require("module$node_modules$antd$lib$locale$en_US")),_useData=global(require("module$node_modules$antd$lib$transfer$hooks$useData")),_useSelection=global(require("module$node_modules$antd$lib$transfer$hooks$useSelection")),_list=global(require("module$node_modules$antd$lib$transfer$list")),_operation=global(require("module$node_modules$antd$lib$transfer$operation"));
module=global(require("module$node_modules$antd$lib$transfer$search"));var _style=global(require("module$node_modules$antd$lib$transfer$style$index"));require=props=>{const {dataSource,targetKeys=[],selectedKeys,selectAllLabels=[],operations=[],style={},listStyle={},locale={},titles,disabled,showSearch=!1,operationStyle,showSelectAll,oneWay,pagination,status:customStatus,prefixCls:customizePrefixCls,className,rootClassName,selectionsIcon,filterOption,render,footer,children,rowKey,onScroll,onChange,
onSearch,onSelectChange}=props,{getPrefixCls,renderEmpty,direction:dir,transfer}=(0,_react.useContext)(_configProvider.ConfigContext),prefixCls=getPrefixCls("transfer",customizePrefixCls),[wrapCSSVar,hashId,cssVarCls]=(0,_style.default)(prefixCls),[mergedDataSource,leftDataSource,rightDataSource]=(0,_useData.default)(dataSource,rowKey,targetKeys),[sourceSelectedKeys,targetSelectedKeys,setSourceSelectedKeys,setTargetSelectedKeys]=(0,_useSelection.default)(leftDataSource,rightDataSource,selectedKeys),
[leftMultipleSelect,updateLeftPrevSelectedIndex]=(0,_useMultipleSelect.default)(item=>item.key),[rightMultipleSelect,updateRightPrevSelectedIndex]=(0,_useMultipleSelect.default)(item=>item.key);(0,_warning.devUseWarning)("Transfer")(!pagination||!children,"usage","`pagination` not support customize render list.");const setStateKeys=(0,_react.useCallback)((direction,keys)=>{"left"===direction?(direction="function"===typeof keys?keys(sourceSelectedKeys||[]):keys,setSourceSelectedKeys(direction)):(direction=
"function"===typeof keys?keys(targetSelectedKeys||[]):keys,setTargetSelectedKeys(direction))},[sourceSelectedKeys,targetSelectedKeys]),handleSelectChange=(0,_react.useCallback)((direction,holder)=>{"left"===direction?null===onSelectChange||void 0===onSelectChange?void 0:onSelectChange(holder,targetSelectedKeys):null===onSelectChange||void 0===onSelectChange?void 0:onSelectChange(sourceSelectedKeys,holder)},[sourceSelectedKeys,targetSelectedKeys]),moveTo=direction=>{var moveKeys="right"===direction?
sourceSelectedKeys:targetSelectedKeys;const dataSourceDisabledKeysMap=(0,_transKeys.groupDisabledKeysMap)(mergedDataSource);moveKeys=moveKeys.filter(key=>!dataSourceDisabledKeysMap.has(key));const newMoveKeysMap=(0,_transKeys.groupKeysMap)(moveKeys),newTargetKeys="right"===direction?moveKeys.concat(targetKeys):targetKeys.filter(targetKey=>!newMoveKeysMap.has(targetKey)),oppositeDirection="right"===direction?"left":"right";setStateKeys(oppositeDirection,[]);handleSelectChange(oppositeDirection,[]);
null===onChange||void 0===onChange?void 0:onChange(newTargetKeys,direction,moveKeys)},onItemSelectAll=(direction,keys,checkAll)=>{setStateKeys(direction,prevKeys=>{let mergedCheckedKeys=[];if("replace"===checkAll)mergedCheckedKeys=keys;else if(checkAll)mergedCheckedKeys=Array.from(new Set([].concat((0,_toConsumableArray2.default)(prevKeys),(0,_toConsumableArray2.default)(keys))));else{const selectedKeysMap=(0,_transKeys.groupKeysMap)(keys);mergedCheckedKeys=prevKeys.filter(key=>!selectedKeysMap.has(key))}handleSelectChange(direction,
mergedCheckedKeys);return mergedCheckedKeys});("left"===direction?updateLeftPrevSelectedIndex:updateRightPrevSelectedIndex)(null)},handleSingleSelect=(direction,holder,selectedKey,checked,currentSelectedIndex)=>{holder.has(selectedKey)&&(holder.delete(selectedKey),("left"===direction?updateLeftPrevSelectedIndex:updateRightPrevSelectedIndex)(null));checked&&(holder.add(selectedKey),("left"===direction?updateLeftPrevSelectedIndex:updateRightPrevSelectedIndex)(currentSelectedIndex))},onItemSelect=(direction,
selectedKey,checked,multiple)=>{var isLeftDirection="left"===direction;const holder=(0,_toConsumableArray2.default)(isLeftDirection?sourceSelectedKeys:targetSelectedKeys),holderSet=new Set(holder);isLeftDirection=(0,_toConsumableArray2.default)(isLeftDirection?leftDataSource:rightDataSource).filter(item=>!(null===item||void 0===item?0:item.disabled));const currentSelectedIndex=isLeftDirection.findIndex(item=>item.key===selectedKey);multiple&&0<holder.length?("left"===direction?leftMultipleSelect:
rightMultipleSelect)(currentSelectedIndex,isLeftDirection,holderSet):handleSingleSelect(direction,holderSet,selectedKey,checked,currentSelectedIndex);checked=Array.from(holderSet);handleSelectChange(direction,checked);props.selectedKeys||setStateKeys(direction,checked)},handleListStyle=direction=>"function"===typeof listStyle?listStyle({direction}):listStyle||{};var formItemContext=(0,_react.useContext)(_context.FormItemInputContext);const {hasFeedback,status}=formItemContext;var mergedStatus=(0,_statusUtils.getMergedStatus)(status,
customStatus);formItemContext=!children&&pagination;const leftActive=0<rightDataSource.filter(d=>targetSelectedKeys.includes(d.key)&&!d.disabled).length,rightActive=0<leftDataSource.filter(d=>sourceSelectedKeys.includes(d.key)&&!d.disabled).length;mergedStatus=(0,_classnames.default)(prefixCls,{[`${prefixCls}-disabled`]:disabled,[`${prefixCls}-customize-list`]:!!children,[`${prefixCls}-rtl`]:"rtl"===dir},(0,_statusUtils.getStatusClassNames)(prefixCls,mergedStatus,hasFeedback),null===transfer||void 0===
transfer?void 0:transfer.className,className,rootClassName,hashId,cssVarCls);var [contextLocale]=(0,_locale.useLocale)("Transfer",_en_US.default.Transfer);contextLocale=Object.assign(Object.assign(Object.assign({},contextLocale),{notFoundContent:(null===renderEmpty||void 0===renderEmpty?void 0:renderEmpty("Transfer"))||_react.default.createElement(_defaultRenderEmpty.default,{componentName:"Transfer"})}),locale);const [leftTitle,rightTitle]=(transferLocale=>{var _a;return null!==(_a=null!==titles&&
void 0!==titles?titles:transferLocale.titles)&&void 0!==_a?_a:[]})(contextLocale),mergedSelectionsIcon=null!==selectionsIcon&&void 0!==selectionsIcon?selectionsIcon:null===transfer||void 0===transfer?void 0:transfer.selectionsIcon;return wrapCSSVar(_react.default.createElement("div",{className:mergedStatus,style:Object.assign(Object.assign({},null===transfer||void 0===transfer?void 0:transfer.style),style)},_react.default.createElement(_list.default,Object.assign({prefixCls:`${prefixCls}-list`,titleText:leftTitle,
dataSource:leftDataSource,filterOption,style:handleListStyle("left"),checkedKeys:sourceSelectedKeys,handleFilter:e=>null===onSearch||void 0===onSearch?void 0:onSearch("left",e.target.value),handleClear:()=>null===onSearch||void 0===onSearch?void 0:onSearch("left",""),onItemSelect:(selectedKey,checked,e)=>{onItemSelect("left",selectedKey,checked,null===e||void 0===e?void 0:e.shiftKey)},onItemSelectAll:(keys,checkAll)=>{onItemSelectAll("left",keys,checkAll)},render,showSearch,renderList:children,footer,
onScroll:e=>{null===onScroll||void 0===onScroll?void 0:onScroll("left",e)},disabled,direction:"rtl"===dir?"right":"left",showSelectAll,selectAllLabel:selectAllLabels[0],pagination:formItemContext,selectionsIcon:mergedSelectionsIcon},contextLocale)),_react.default.createElement(_operation.default,{className:`${prefixCls}-operation`,rightActive,rightArrowText:operations[0],moveToRight:()=>{moveTo("right");updateRightPrevSelectedIndex(null)},leftActive,leftArrowText:operations[1],moveToLeft:()=>{moveTo("left");
updateLeftPrevSelectedIndex(null)},style:operationStyle,disabled,direction:dir,oneWay}),_react.default.createElement(_list.default,Object.assign({prefixCls:`${prefixCls}-list`,titleText:rightTitle,dataSource:rightDataSource,filterOption,style:handleListStyle("right"),checkedKeys:targetSelectedKeys,handleFilter:e=>null===onSearch||void 0===onSearch?void 0:onSearch("right",e.target.value),handleClear:()=>null===onSearch||void 0===onSearch?void 0:onSearch("right",""),onItemSelect:(selectedKey,checked,
e)=>{onItemSelect("right",selectedKey,checked,null===e||void 0===e?void 0:e.shiftKey)},onItemSelectAll:(keys,checkAll)=>{onItemSelectAll("right",keys,checkAll)},onItemRemove:keys=>{setStateKeys("right",[]);null===onChange||void 0===onChange?void 0:onChange(targetKeys.filter(key=>!keys.includes(key)),"left",(0,_toConsumableArray2.default)(keys))},render,showSearch,renderList:children,footer,onScroll:e=>{null===onScroll||void 0===onScroll?void 0:onScroll("right",e)},disabled,direction:"rtl"===dir?"left":
"right",showSelectAll,selectAllLabel:selectAllLabels[1],showRemove:oneWay,pagination:formItemContext,selectionsIcon:mergedSelectionsIcon},contextLocale))))};require.displayName="Transfer";require.List=_list.default;require.Search=module.default;require.Operation=_operation.default;exports.default=require}
//# sourceMappingURL=module$node_modules$antd$lib$transfer$index.js.map
