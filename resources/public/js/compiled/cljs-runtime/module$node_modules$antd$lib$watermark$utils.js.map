{
"version":3,
"file":"module$node_modules$antd$lib$watermark$utils.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,4CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAWzGC,QAASA,qBAAoB,CAACC,GAAD,CAAM,CACjC,MAAOA,IAAIC,CAAAA,OAAJ,CAAY,UAAZ,CAAwB,KAAxB,CAA+BC,CAAAA,WAA/B,EAD0B,CARnCC,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQQ,CAAAA,aAAR,CAYAA,QAAsB,EAAG,CACvB,MAAOC,OAAOC,CAAAA,gBAAd,EAAkC,CADX,CAXzBV,QAAQW,CAAAA,WAAR,CAOAA,QAAoB,CAACC,KAAD,CAAQ,CAC1B,MAAOP,OAAOQ,CAAAA,IAAP,CAAYD,KAAZ,CAAmBE,CAAAA,GAAnB,CAAuBZ,GAAA,EAAQ,GAAED,oBAAA,CAAqBC,GAArB,CAAF,KAAgCU,KAAA,CAAMV,GAAN,CAAhC,GAA/B,CAA8Ea,CAAAA,IAA9E,CAAmF,GAAnF,CADmB,CAN5Bf,QAAQgB,CAAAA,WAAR,CAAsB,IAAK,EAC3BhB,QAAQC,CAAAA,oBAAR,CAA+BA,oBAyB/BD;OAAQgB,CAAAA,WAAR,CAZoB,CAACC,QAAD,CAAWC,cAAX,CAAAF,EAA8B,CAChD,IAAIG,KAAO,CAAA,CAEPF,SAASG,CAAAA,YAAaC,CAAAA,MAA1B,GACEF,IADF,CACSG,KAAMC,CAAAA,IAAN,CAAWN,QAASG,CAAAA,YAApB,CAAkCI,CAAAA,IAAlC,CAAuCC,IAAA,EAAQP,cAAA,CAAeO,IAAf,CAA/C,CADT,CAIsB,aAAtB,GAAIR,QAASS,CAAAA,IAAb,EAAsCR,cAAA,CAAeD,QAASU,CAAAA,MAAxB,CAAtC,GACER,IADF,CACS,CAAA,CADT,CAGA,OAAOA,KAVyC,CAtBuD;",
"sources":["node_modules/antd/lib/watermark/utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$antd$lib$watermark$utils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPixelRatio = getPixelRatio;\nexports.getStyleStr = getStyleStr;\nexports.reRendering = void 0;\nexports.toLowercaseSeparator = toLowercaseSeparator;\n/** converting camel-cased strings to be lowercase and link it with Separator */\nfunction toLowercaseSeparator(key) {\n  return key.replace(/([A-Z])/g, '-$1').toLowerCase();\n}\nfunction getStyleStr(style) {\n  return Object.keys(style).map(key => `${toLowercaseSeparator(key)}: ${style[key]};`).join(' ');\n}\n/** Returns the ratio of the device's physical pixel resolution to the css pixel resolution */\nfunction getPixelRatio() {\n  return window.devicePixelRatio || 1;\n}\n/** Whether to re-render the watermark */\nconst reRendering = (mutation, isWatermarkEle) => {\n  let flag = false;\n  // Whether to delete the watermark node\n  if (mutation.removedNodes.length) {\n    flag = Array.from(mutation.removedNodes).some(node => isWatermarkEle(node));\n  }\n  // Whether the watermark dom property value has been modified\n  if (mutation.type === 'attributes' && isWatermarkEle(mutation.target)) {\n    flag = true;\n  }\n  return flag;\n};\nexports.reRendering = reRendering;\n};"],
"names":["shadow$provide","global","require","module","exports","toLowercaseSeparator","key","replace","toLowerCase","Object","defineProperty","value","getPixelRatio","window","devicePixelRatio","getStyleStr","style","keys","map","join","reRendering","mutation","isWatermarkEle","flag","removedNodes","length","Array","from","some","node","type","target"]
}
