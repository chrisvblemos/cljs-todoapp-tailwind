{
"version":3,
"file":"module$node_modules$rc_tree_select$lib$hooks$useTreeData.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAarHC,QAASA,mBAAkB,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAAA,IACrCC,GAAKD,MAAOC,CAAAA,EADyB,CAEvCC,IAAMF,MAAOE,CAAAA,GAF0B,CAGvCC,QAAUH,MAAOG,CAAAA,OAHsB,CAIrCC,QAAU,IAAIC,GAJuB,CAKrCC,UAAY,EAChBP,MAAMQ,CAAAA,OAAN,CAAc,QAAS,CAACC,IAAD,CAAO,CAC5B,IAAIC,QAAUD,IAAA,CAAKP,EAAL,CACVS,KAAAA,CAAa,GAAIC,cAAeC,CAAAA,OAAnB,EAA4B,GAAID,cAAeC,CAAAA,OAAnB,EAA4B,EAA5B,CAAgCJ,IAAhC,CAA5B,CAAmE,EAAnE,CAAuE,CACtFK,IAAKL,IAAKK,CAAAA,GAAVA,EAAiBJ,OADqE,CAAvE,CAGjBL,QAAQU,CAAAA,GAAR,CAAYL,OAAZ,CAAqBC,IAArB,CAL4B,CAA9B,CAOAN,QAAQG,CAAAA,OAAR,CAAgB,QAAS,CAACC,IAAD,CAAO,CAC9B,IAAIO,UAAYP,IAAA,CAAKN,GAAL,CAAhB,CACIc,OAASZ,OAAQa,CAAAA,GAAR,CAAYF,SAAZ,CACTC,OAAJ;CACEA,MAAOE,CAAAA,QACP,CADkBF,MAAOE,CAAAA,QACzB,EADqC,EACrC,CAAAF,MAAOE,CAAAA,QAASC,CAAAA,IAAhB,CAAqBX,IAArB,CAFF,EAGWO,SAHX,GAGyBZ,OAHzB,EAGgD,IAHhD,GAGoCA,OAHpC,EAIEG,SAAUa,CAAAA,IAAV,CAAeX,IAAf,CAP4B,CAAhC,CAUA,OAAOF,UAvBkC,CAVvCc,MAAAA,CAA0BzB,OAAA,CAAQ,mEAAR,CAAyDiB,CAAAA,OACnFS,OAAAA,CAAyB1B,OAAA,CAAQ,kEAAR,CAAwDiB,CAAAA,OACrFU,OAAOC,CAAAA,cAAP,CAAsB1B,OAAtB,CAA+B,YAA/B,CAA6C,CAC3C2B,MAAO,CAAA,CADoC,CAA7C,CAGA3B,QAAQe,CAAAA,OAAR,CAmCAa,QAAoB,CAACC,QAAD,CAAWR,QAAX,CAAqBS,UAArB,CAAiC,CACnD,MAAOC,MAAMC,CAAAA,OAAN,CAAc,QAAS,EAAG,CAC/B,GAAIH,QAAJ,CAAc,CACZ,GAAIC,UAAJ,CAAgB,CACd,IAAI3B;AAAS,GAAIW,cAAeC,CAAAA,OAAnB,EAA4B,CACvCX,GAAI,IADmC,CAEvCC,IAAK,KAFkC,CAGvCC,QAAS,IAH8B,CAA5B,CAI4B,QAAtC,GAAA,GAAI2B,QAASlB,CAAAA,OAAb,EAAsBe,UAAtB,CAAA,CAAiDA,UAAjD,CAA8D,EAJpD,CAKb,OAAO7B,mBAAA,CAAmB4B,QAAnB,CAA6B1B,MAA7B,CANO,CAQhB,MAAO0B,SATK,CAWd,MAAO,GAAIK,WAAYC,CAAAA,qBAAhB,EAAuCd,QAAvC,CAZwB,CAA1B,CAaJ,CAACA,QAAD,CAAWS,UAAX,CAAuBD,QAAvB,CAbI,CAD4C,CAlCrD,KAAII,SAAWT,MAAA,CAAuB1B,OAAA,CAAQ,mDAAR,CAAvB,CAAf,CACIgB,eAAiBU,MAAA,CAAuB1B,OAAA,CAAQ,0DAAR,CAAvB,CADrB,CAEIiC,MAAQR,MAAA,CAAwBzB,OAAA,CAAQ,iCAAR,CAAxB,CAFZ,CAGIoC;AAAcpC,OAAA,CAAQ,yDAAR,CAZmG;",
"sources":["node_modules/rc-tree-select/lib/hooks/useTreeData.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$rc_tree_select$lib$hooks$useTreeData\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useTreeData;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _legacyUtil = require(\"../utils/legacyUtil\");\nfunction buildTreeStructure(nodes, config) {\n  var id = config.id,\n    pId = config.pId,\n    rootPId = config.rootPId;\n  var nodeMap = new Map();\n  var rootNodes = [];\n  nodes.forEach(function (node) {\n    var nodeKey = node[id];\n    var clonedNode = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, node), {}, {\n      key: node.key || nodeKey\n    });\n    nodeMap.set(nodeKey, clonedNode);\n  });\n  nodeMap.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = nodeMap.get(parentKey);\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } else if (parentKey === rootPId || rootPId === null) {\n      rootNodes.push(node);\n    }\n  });\n  return rootNodes;\n}\n\n/**\n * \u5c06 `treeData` \u6216 `children` \u8f6c\u6362\u4e3a\u683c\u5f0f\u5316\u7684 `treeData`\u3002\n * \u5982\u679c `treeData` \u6216 `children` \u6ca1\u6709\u53d8\u5316\uff0c\u5219\u4e0d\u4f1a\u91cd\u65b0\u8ba1\u7b97\u3002\n */\nfunction useTreeData(treeData, children, simpleMode) {\n  return React.useMemo(function () {\n    if (treeData) {\n      if (simpleMode) {\n        var config = (0, _objectSpread2.default)({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, (0, _typeof2.default)(simpleMode) === 'object' ? simpleMode : {});\n        return buildTreeStructure(treeData, config);\n      }\n      return treeData;\n    }\n    return (0, _legacyUtil.convertChildrenToData)(children);\n  }, [children, simpleMode, treeData]);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","buildTreeStructure","nodes","config","id","pId","rootPId","nodeMap","Map","rootNodes","forEach","node","nodeKey","clonedNode","_objectSpread2","default","key","set","parentKey","parent","get","children","push","_interopRequireWildcard","_interopRequireDefault","Object","defineProperty","value","useTreeData","treeData","simpleMode","React","useMemo","_typeof2","_legacyUtil","convertChildrenToData"]
}
