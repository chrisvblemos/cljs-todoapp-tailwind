{
"version":3,
"file":"module$node_modules$antd$lib$_util$placements.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/antd/lib/_util/placements.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$antd$lib$_util$placements\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getPlacements;\nexports.getOverflowOptions = getOverflowOptions;\nvar _placementArrow = require(\"../style/placementArrow\");\nfunction getOverflowOptions(placement, arrowOffset, arrowWidth, autoAdjustOverflow) {\n  if (autoAdjustOverflow === false) {\n    return {\n      adjustX: false,\n      adjustY: false\n    };\n  }\n  const overflow = autoAdjustOverflow && typeof autoAdjustOverflow === 'object' ? autoAdjustOverflow : {};\n  const baseOverflow = {};\n  switch (placement) {\n    case 'top':\n    case 'bottom':\n      baseOverflow.shiftX = arrowOffset.arrowOffsetHorizontal * 2 + arrowWidth;\n      baseOverflow.shiftY = true;\n      baseOverflow.adjustY = true;\n      break;\n    case 'left':\n    case 'right':\n      baseOverflow.shiftY = arrowOffset.arrowOffsetVertical * 2 + arrowWidth;\n      baseOverflow.shiftX = true;\n      baseOverflow.adjustX = true;\n      break;\n  }\n  const mergedOverflow = Object.assign(Object.assign({}, baseOverflow), overflow);\n  // Support auto shift\n  if (!mergedOverflow.shiftX) {\n    mergedOverflow.adjustX = true;\n  }\n  if (!mergedOverflow.shiftY) {\n    mergedOverflow.adjustY = true;\n  }\n  return mergedOverflow;\n}\nconst PlacementAlignMap = {\n  left: {\n    points: ['cr', 'cl']\n  },\n  right: {\n    points: ['cl', 'cr']\n  },\n  top: {\n    points: ['bc', 'tc']\n  },\n  bottom: {\n    points: ['tc', 'bc']\n  },\n  topLeft: {\n    points: ['bl', 'tl']\n  },\n  leftTop: {\n    points: ['tr', 'tl']\n  },\n  topRight: {\n    points: ['br', 'tr']\n  },\n  rightTop: {\n    points: ['tl', 'tr']\n  },\n  bottomRight: {\n    points: ['tr', 'br']\n  },\n  rightBottom: {\n    points: ['bl', 'br']\n  },\n  bottomLeft: {\n    points: ['tl', 'bl']\n  },\n  leftBottom: {\n    points: ['br', 'bl']\n  }\n};\nconst ArrowCenterPlacementAlignMap = {\n  topLeft: {\n    points: ['bl', 'tc']\n  },\n  leftTop: {\n    points: ['tr', 'cl']\n  },\n  topRight: {\n    points: ['br', 'tc']\n  },\n  rightTop: {\n    points: ['tl', 'cr']\n  },\n  bottomRight: {\n    points: ['tr', 'bc']\n  },\n  rightBottom: {\n    points: ['bl', 'cr']\n  },\n  bottomLeft: {\n    points: ['tl', 'bc']\n  },\n  leftBottom: {\n    points: ['br', 'cl']\n  }\n};\nconst DisableAutoArrowList = new Set(['topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'leftTop', 'leftBottom', 'rightTop', 'rightBottom']);\nfunction getPlacements(config) {\n  const {\n    arrowWidth,\n    autoAdjustOverflow,\n    arrowPointAtCenter,\n    offset,\n    borderRadius,\n    visibleFirst\n  } = config;\n  const halfArrowWidth = arrowWidth / 2;\n  const placementMap = {};\n  Object.keys(PlacementAlignMap).forEach(key => {\n    const template = arrowPointAtCenter && ArrowCenterPlacementAlignMap[key] || PlacementAlignMap[key];\n    const placementInfo = Object.assign(Object.assign({}, template), {\n      offset: [0, 0],\n      dynamicInset: true\n    });\n    placementMap[key] = placementInfo;\n    // Disable autoArrow since design is fixed position\n    if (DisableAutoArrowList.has(key)) {\n      placementInfo.autoArrow = false;\n    }\n    // Static offset\n    switch (key) {\n      case 'top':\n      case 'topLeft':\n      case 'topRight':\n        placementInfo.offset[1] = -halfArrowWidth - offset;\n        break;\n      case 'bottom':\n      case 'bottomLeft':\n      case 'bottomRight':\n        placementInfo.offset[1] = halfArrowWidth + offset;\n        break;\n      case 'left':\n      case 'leftTop':\n      case 'leftBottom':\n        placementInfo.offset[0] = -halfArrowWidth - offset;\n        break;\n      case 'right':\n      case 'rightTop':\n      case 'rightBottom':\n        placementInfo.offset[0] = halfArrowWidth + offset;\n        break;\n    }\n    // Dynamic offset\n    const arrowOffset = (0, _placementArrow.getArrowOffsetToken)({\n      contentRadius: borderRadius,\n      limitVerticalRadius: true\n    });\n    if (arrowPointAtCenter) {\n      switch (key) {\n        case 'topLeft':\n        case 'bottomLeft':\n          placementInfo.offset[0] = -arrowOffset.arrowOffsetHorizontal - halfArrowWidth;\n          break;\n        case 'topRight':\n        case 'bottomRight':\n          placementInfo.offset[0] = arrowOffset.arrowOffsetHorizontal + halfArrowWidth;\n          break;\n        case 'leftTop':\n        case 'rightTop':\n          placementInfo.offset[1] = -arrowOffset.arrowOffsetHorizontal * 2 + halfArrowWidth;\n          break;\n        case 'leftBottom':\n        case 'rightBottom':\n          placementInfo.offset[1] = arrowOffset.arrowOffsetHorizontal * 2 - halfArrowWidth;\n          break;\n      }\n    }\n    // Overflow\n    placementInfo.overflow = getOverflowOptions(key, arrowOffset, arrowWidth, autoAdjustOverflow);\n    // VisibleFirst\n    if (visibleFirst) {\n      placementInfo.htmlRegion = 'visibleFirst';\n    }\n  });\n  return placementMap;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","getOverflowOptions","placement","arrowOffset","arrowWidth","autoAdjustOverflow","adjustX","adjustY","overflow","baseOverflow","shiftX","arrowOffsetHorizontal","shiftY","arrowOffsetVertical","mergedOverflow","Object","assign","defineProperty","value","default","getPlacements","config","arrowPointAtCenter","offset","borderRadius","visibleFirst","halfArrowWidth","placementMap","keys","PlacementAlignMap","forEach","key","placementInfo","ArrowCenterPlacementAlignMap","dynamicInset","DisableAutoArrowList","has","autoArrow","_placementArrow","getArrowOffsetToken","contentRadius","limitVerticalRadius","htmlRegion","left","points","right","top","bottom","topLeft","leftTop","topRight","rightTop","bottomRight","rightBottom","bottomLeft","leftBottom","Set"]
}
