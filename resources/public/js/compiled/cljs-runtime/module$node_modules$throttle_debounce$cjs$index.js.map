{
"version":3,
"file":"module$node_modules$throttle_debounce$cjs$index.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/throttle-debounce/cjs/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$throttle_debounce$cjs$index\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nfunction throttle (delay, callback, options) {\n  var _ref = options || {},\n    _ref$noTrailing = _ref.noTrailing,\n    noTrailing = _ref$noTrailing === void 0 ? false : _ref$noTrailing,\n    _ref$noLeading = _ref.noLeading,\n    noLeading = _ref$noLeading === void 0 ? false : _ref$noLeading,\n    _ref$debounceMode = _ref.debounceMode,\n    debounceMode = _ref$debounceMode === void 0 ? undefined : _ref$debounceMode;\n  /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */\n  var timeoutID;\n  var cancelled = false;\n\n  // Keep track of the last time `callback` was executed.\n  var lastExec = 0;\n\n  // Function to clear existing timeout\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  }\n\n  // Function to cancel next exec\n  function cancel(options) {\n    var _ref2 = options || {},\n      _ref2$upcomingOnly = _ref2.upcomingOnly,\n      upcomingOnly = _ref2$upcomingOnly === void 0 ? false : _ref2$upcomingOnly;\n    clearExistingTimeout();\n    cancelled = !upcomingOnly;\n  }\n\n  /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */\n  function wrapper() {\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n    if (cancelled) {\n      return;\n    }\n\n    // Execute `callback` and update the `lastExec` timestamp.\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, arguments_);\n    }\n\n    /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */\n    function clear() {\n      timeoutID = undefined;\n    }\n    if (!noLeading && debounceMode && !timeoutID) {\n      /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`\n       * and noLeading != true.\n       */\n      exec();\n    }\n    clearExistingTimeout();\n    if (debounceMode === undefined && elapsed > delay) {\n      if (noLeading) {\n        /*\n         * In throttle mode with noLeading, if `delay` time has\n         * been exceeded, update `lastExec` and schedule `callback`\n         * to execute after `delay` ms.\n         */\n        lastExec = Date.now();\n        if (!noTrailing) {\n          timeoutID = setTimeout(debounceMode ? clear : exec, delay);\n        }\n      } else {\n        /*\n         * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n         * `callback`.\n         */\n        exec();\n      }\n    } else if (noTrailing !== true) {\n      /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n  wrapper.cancel = cancel;\n\n  // Return the wrapper function.\n  return wrapper;\n}\n\n/* eslint-disable no-undefined */\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                        to `callback` when the debounced-function is executed.\n * @param {object} [options] -           An object to configure options.\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n *\n * @returns {Function} A new, debounced function.\n */\nfunction debounce (delay, callback, options) {\n  var _ref = options || {},\n    _ref$atBegin = _ref.atBegin,\n    atBegin = _ref$atBegin === void 0 ? false : _ref$atBegin;\n  return throttle(delay, callback, {\n    debounceMode: atBegin !== false\n  });\n}\n\nexports.debounce = debounce;\nexports.throttle = throttle;\n//# sourceMappingURL=index.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","throttle","delay","callback","options","wrapper","exec","lastExec","Date","now","apply","self","arguments_","clear","timeoutID","undefined","_len","arguments","length","Array","_key","elapsed","cancelled","noLeading","debounceMode","clearTimeout","noTrailing","setTimeout","_ref","_ref$noTrailing","_ref$noLeading","_ref$debounceMode","cancel","_ref2$upcomingOnly","upcomingOnly","Object","defineProperty","value","debounce","_ref$atBegin","atBegin"]
}
