shadow$provide.module$node_modules$antd$lib$tag$index=function(global,require,module,exports){"use client";global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var React=module(require("module$node_modules$react$index")),_classnames=global(require("module$node_modules$classnames$index")),_omit=
global(require("module$node_modules$rc_util$lib$omit")),_colors=require("module$node_modules$antd$lib$_util$colors"),_useClosable=module(require("module$node_modules$antd$lib$_util$hooks$useClosable")),_reactNode=require("module$node_modules$antd$lib$_util$reactNode"),_warning=require("module$node_modules$antd$lib$_util$warning"),_wave=global(require("module$node_modules$antd$lib$_util$wave$index")),_configProvider=require("module$node_modules$antd$lib$config_provider$index");module=global(require("module$node_modules$antd$lib$tag$CheckableTag"));
var _style=global(require("module$node_modules$antd$lib$tag$style$index")),_presetCmp=global(require("module$node_modules$antd$lib$tag$style$presetCmp")),_statusCmp=global(require("module$node_modules$antd$lib$tag$style$statusCmp")),__rest=function(s,e){var t={},p;for(p in s)Object.prototype.hasOwnProperty.call(s,p)&&0>e.indexOf(p)&&(t[p]=s[p]);if(null!=s&&"function"===typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)0>e.indexOf(p[i])&&Object.prototype.propertyIsEnumerable.call(s,
p[i])&&(t[p[i]]=s[p[i]])}return t};require=React.forwardRef((tagProps,ref)=>{const {prefixCls:customizePrefixCls,className,rootClassName,style,children,icon,color,onClose,bordered=!0,visible:deprecatedVisible}=tagProps;var props=__rest(tagProps,"prefixCls className rootClassName style children icon color onClose bordered visible".split(" "));const {getPrefixCls,direction,tag:tagContext}=React.useContext(_configProvider.ConfigContext),[visible,setVisible]=React.useState(!0),domProps=(0,_omit.default)(props,
["closeIcon","closable"]);(0,_warning.devUseWarning)("Tag").deprecated(!("visible"in tagProps),"visible","visible \x26\x26 \x3cTag /\x3e");React.useEffect(()=>{void 0!==deprecatedVisible&&setVisible(deprecatedVisible)},[deprecatedVisible]);const isPreset=(0,_colors.isPresetColor)(color),isStatus=(0,_colors.isPresetStatusColor)(color);var isInternalColor=isPreset||isStatus;const tagStyle=Object.assign(Object.assign({backgroundColor:color&&!isInternalColor?color:void 0},null===tagContext||void 0===
tagContext?void 0:tagContext.style),style),prefixCls=getPrefixCls("tag",customizePrefixCls),[wrapCSSVar,hashId,cssVarCls]=(0,_style.default)(prefixCls);isInternalColor=(0,_classnames.default)(prefixCls,null===tagContext||void 0===tagContext?void 0:tagContext.className,{[`${prefixCls}-${color}`]:isInternalColor,[`${prefixCls}-has-color`]:color&&!isInternalColor,[`${prefixCls}-hidden`]:!visible,[`${prefixCls}-rtl`]:"rtl"===direction,[`${prefixCls}-borderless`]:!bordered},className,rootClassName,hashId,
cssVarCls);const handleCloseClick=e=>{e.stopPropagation();null===onClose||void 0===onClose?void 0:onClose(e);e.defaultPrevented||setVisible(!1)};[,tagProps]=(0,_useClosable.default)((0,_useClosable.pickClosable)(tagProps),(0,_useClosable.pickClosable)(tagContext),{closable:!1,closeIconRender:iconNode=>{const replacement=React.createElement("span",{className:`${prefixCls}-close-icon`,onClick:handleCloseClick},iconNode);return(0,_reactNode.replaceElement)(iconNode,replacement,originProps=>({onClick:e=>
{var _a;null===(_a=null===originProps||void 0===originProps?void 0:originProps.onClick)||void 0===_a?void 0:_a.call(originProps,e);handleCloseClick(e)},className:(0,_classnames.default)(null===originProps||void 0===originProps?void 0:originProps.className,`${prefixCls}-close-icon`)}))}});props="function"===typeof props.onClick||children&&"a"===children.type;var iconNode=icon||null;iconNode=iconNode?React.createElement(React.Fragment,null,iconNode,children&&React.createElement("span",null,children)):
children;ref=React.createElement("span",Object.assign({},domProps,{ref,className:isInternalColor,style:tagStyle}),iconNode,tagProps,isPreset&&React.createElement(_presetCmp.default,{key:"preset",prefixCls}),isStatus&&React.createElement(_statusCmp.default,{key:"status",prefixCls}));return wrapCSSVar(props?React.createElement(_wave.default,{component:"Tag"},ref):ref)});require.displayName="Tag";require.CheckableTag=module.default;exports.default=require}
//# sourceMappingURL=module$node_modules$antd$lib$tag$index.js.map
