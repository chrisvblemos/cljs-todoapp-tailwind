shadow$provide.module$node_modules$antd$lib$segmented$index=function(global,require,module,exports){"use client";global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var React=module(require("module$node_modules$react$index")),_classnames=global(require("module$node_modules$classnames$index")),
_rcSegmented=global(require("module$node_modules$rc_segmented$lib$index")),_configProvider=require("module$node_modules$antd$lib$config_provider$index"),_useSize=global(require("module$node_modules$antd$lib$config_provider$hooks$useSize")),_style=global(require("module$node_modules$antd$lib$segmented$style$index")),_useId=global(require("module$node_modules$rc_util$lib$hooks$useId")),__rest=function(s,e){var t={},p;for(p in s)Object.prototype.hasOwnProperty.call(s,p)&&0>e.indexOf(p)&&(t[p]=s[p]);
if(null!=s&&"function"===typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)0>e.indexOf(p[i])&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};require=React.forwardRef((props,ref)=>{var defaultName=(0,_useId.default)();const {prefixCls:customizePrefixCls,className,rootClassName,block,options=[],size:customSize="middle",style,vertical,name=defaultName}=props;props=__rest(props,"prefixCls className rootClassName block options size style vertical name".split(" "));
const {getPrefixCls,direction,segmented}=React.useContext(_configProvider.ConfigContext),prefixCls=getPrefixCls("segmented",customizePrefixCls),[wrapCSSVar,hashId,cssVarCls]=(0,_style.default)(prefixCls);var mergedSize=(0,_useSize.default)(customSize);defaultName=React.useMemo(()=>options.map(option=>{if("object"===typeof option&&(null===option||void 0===option?0:option.icon)){const {icon,label}=option;option=__rest(option,["icon","label"]);return Object.assign(Object.assign({},option),{label:React.createElement(React.Fragment,
null,React.createElement("span",{className:`${prefixCls}-item-icon`},icon),label&&React.createElement("span",null,label))})}return option}),[options,prefixCls]);mergedSize=(0,_classnames.default)(className,rootClassName,null===segmented||void 0===segmented?void 0:segmented.className,{[`${prefixCls}-block`]:block,[`${prefixCls}-sm`]:"small"===mergedSize,[`${prefixCls}-lg`]:"large"===mergedSize,[`${prefixCls}-vertical`]:vertical},hashId,cssVarCls);const mergedStyle=Object.assign(Object.assign({},null===
segmented||void 0===segmented?void 0:segmented.style),style);return wrapCSSVar(React.createElement(_rcSegmented.default,Object.assign({},props,{name,className:mergedSize,style:mergedStyle,options:defaultName,ref,prefixCls,direction,vertical})))});require.displayName="Segmented";exports.default=require}
//# sourceMappingURL=module$node_modules$antd$lib$segmented$index.js.map
