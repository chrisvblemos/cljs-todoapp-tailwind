{
"version":3,
"file":"module$node_modules$antd$lib$color_picker$util.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/antd/lib/color-picker/util.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$antd$lib$color_picker$util\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRoundNumber = exports.getGradientPercentColor = exports.getColorAlpha = exports.generateColor = exports.genAlphaColor = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _colorPicker = require(\"@rc-component/color-picker\");\nvar _color = require(\"./color\");\nconst generateColor = color => {\n  if (color instanceof _color.AggregationColor) {\n    return color;\n  }\n  return new _color.AggregationColor(color);\n};\nexports.generateColor = generateColor;\nconst getRoundNumber = value => Math.round(Number(value || 0));\nexports.getRoundNumber = getRoundNumber;\nconst getColorAlpha = color => getRoundNumber(color.toHsb().a * 100);\n/** Return the color whose `alpha` is 1 */\nexports.getColorAlpha = getColorAlpha;\nconst genAlphaColor = (color, alpha) => {\n  const rgba = color.toRgb();\n  // Color from hsb input may get `rgb` is (0/0/0) when `hsb.b` is 0\n  // So if rgb is empty, we should get from hsb\n  if (!rgba.r && !rgba.g && !rgba.b) {\n    const hsba = color.toHsb();\n    hsba.a = alpha || 1;\n    return generateColor(hsba);\n  }\n  rgba.a = alpha || 1;\n  return generateColor(rgba);\n};\n/**\n * Get percent position color. e.g. [10%-#fff, 20%-#000], 15% => #888\n */\nexports.genAlphaColor = genAlphaColor;\nconst getGradientPercentColor = (colors, percent) => {\n  const filledColors = [{\n    percent: 0,\n    color: colors[0].color\n  }].concat((0, _toConsumableArray2.default)(colors), [{\n    percent: 100,\n    color: colors[colors.length - 1].color\n  }]);\n  for (let i = 0; i < filledColors.length - 1; i += 1) {\n    const startPtg = filledColors[i].percent;\n    const endPtg = filledColors[i + 1].percent;\n    const startColor = filledColors[i].color;\n    const endColor = filledColors[i + 1].color;\n    if (startPtg <= percent && percent <= endPtg) {\n      const dist = endPtg - startPtg;\n      if (dist === 0) {\n        return startColor;\n      }\n      const ratio = (percent - startPtg) / dist * 100;\n      const startRcColor = new _colorPicker.Color(startColor);\n      const endRcColor = new _colorPicker.Color(endColor);\n      return startRcColor.mix(endRcColor, ratio).toRgbString();\n    }\n  }\n  // This will never reach\n  /* istanbul ignore next */\n  return '';\n};\nexports.getGradientPercentColor = getGradientPercentColor;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","default","Object","defineProperty","value","getRoundNumber","getGradientPercentColor","getColorAlpha","generateColor","genAlphaColor","_toConsumableArray2","_colorPicker","_color","color","AggregationColor","Math","round","Number","toHsb","a","alpha","rgba","toRgb","r","g","b","hsba","colors","percent","filledColors","concat","length","i","startPtg","endPtg","startColor","endColor","dist","ratio","startRcColor","Color","endRcColor","mix","toRgbString"]
}
