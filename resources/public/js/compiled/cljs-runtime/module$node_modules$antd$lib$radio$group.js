shadow$provide.module$node_modules$antd$lib$radio$group=function(global,require,module,exports){"use client";global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var React=module(require("module$node_modules$react$index")),_classnames=global(require("module$node_modules$classnames$index")),_useMergedState=
global(require("module$node_modules$rc_util$lib$hooks$useMergedState")),_pickAttrs=global(require("module$node_modules$rc_util$lib$pickAttrs")),_configProvider=require("module$node_modules$antd$lib$config_provider$index"),_useCSSVarCls=global(require("module$node_modules$antd$lib$config_provider$hooks$useCSSVarCls")),_useSize=global(require("module$node_modules$antd$lib$config_provider$hooks$useSize")),_context=require("module$node_modules$antd$lib$radio$context"),_radio=global(require("module$node_modules$antd$lib$radio$radio")),
_style=global(require("module$node_modules$antd$lib$radio$style$index")),_useId=global(require("module$node_modules$rc_util$lib$hooks$useId"));require=React.forwardRef((props,ref)=>{const {getPrefixCls,direction}=React.useContext(_configProvider.ConfigContext);var defaultName=(0,_useId.default)();const {prefixCls:customizePrefixCls,className,rootClassName,options,buttonStyle="outline",disabled,children,size:customizeSize,style,id,optionType,name=defaultName,defaultValue,value:customizedValue,block=
!1,onChange,onMouseEnter,onMouseLeave,onFocus,onBlur}=props,[value,setValue]=(0,_useMergedState.default)(defaultValue,{value:customizedValue}),onRadioChange=React.useCallback(event=>{const val=event.target.value;"value"in props||setValue(val);val!==value&&(null===onChange||void 0===onChange?void 0:onChange(event))},[value,setValue,onChange]),prefixCls=getPrefixCls("radio",customizePrefixCls);var groupPrefixCls=`${prefixCls}-group`,rootCls=(0,_useCSSVarCls.default)(prefixCls);const [wrapCSSVar,hashId,
cssVarCls]=(0,_style.default)(prefixCls,rootCls);defaultName=children;options&&0<options.length&&(defaultName=options.map(option=>"string"===typeof option||"number"===typeof option?React.createElement(_radio.default,{key:option.toString(),prefixCls,disabled,value:option,checked:value===option},option):React.createElement(_radio.default,{key:`radio-group-value-options-${option.value}`,prefixCls,disabled:option.disabled||disabled,value:option.value,checked:value===option.value,title:option.title,style:option.style,
id:option.id,required:option.required},option.label)));const mergedSize=(0,_useSize.default)(customizeSize);groupPrefixCls=(0,_classnames.default)(groupPrefixCls,`${groupPrefixCls}-${buttonStyle}`,{[`${groupPrefixCls}-${mergedSize}`]:mergedSize,[`${groupPrefixCls}-rtl`]:"rtl"===direction,[`${groupPrefixCls}-block`]:block},className,rootClassName,hashId,cssVarCls,rootCls);rootCls=React.useMemo(()=>({onChange:onRadioChange,value,disabled,name,optionType,block}),[onRadioChange,value,disabled,name,optionType,
block]);return wrapCSSVar(React.createElement("div",Object.assign({},(0,_pickAttrs.default)(props,{aria:!0,data:!0}),{className:groupPrefixCls,style,onMouseEnter,onMouseLeave,onFocus,onBlur,id,ref}),React.createElement(_context.RadioGroupContextProvider,{value:rootCls},defaultName)))});exports.default=React.memo(require)}
//# sourceMappingURL=module$node_modules$antd$lib$radio$group.js.map
