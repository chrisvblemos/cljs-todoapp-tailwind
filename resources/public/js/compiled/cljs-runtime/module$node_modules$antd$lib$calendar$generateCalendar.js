shadow$provide.module$node_modules$antd$lib$calendar$generateCalendar=function(global,require,module,exports){"use client";global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var React=module(require("module$node_modules$react$index")),_classnames=global(require("module$node_modules$classnames$index")),
_rcPicker=require("module$node_modules$rc_picker$lib$index"),_useMergedState=global(require("module$node_modules$rc_util$lib$hooks$useMergedState")),_warning=require("module$node_modules$antd$lib$_util$warning"),_configProvider=require("module$node_modules$antd$lib$config_provider$index"),_locale=require("module$node_modules$antd$lib$locale$index"),_Header=global(require("module$node_modules$antd$lib$calendar$Header")),_en_US=global(require("module$node_modules$antd$lib$calendar$locale$en_US")),_style=
global(require("module$node_modules$antd$lib$calendar$style$index"));const isSameYear=(date1,date2,config)=>{({getYear:config}=config);return date1&&date2&&config(date1)===config(date2)},isSameMonth=(date1,date2,config)=>{const {getMonth}=config;return isSameYear(date1,date2,config)&&getMonth(date1)===getMonth(date2)},isSameDate=(date1,date2,config)=>{const {getDate}=config;return isSameMonth(date1,date2,config)&&getDate(date1)===getDate(date2)};exports.default=generateConfig=>{const Calendar=props=>
{const {prefixCls:customizePrefixCls,className,rootClassName,style,dateFullCellRender,dateCellRender,monthFullCellRender,monthCellRender,cellRender,fullCellRender,headerRender,value,defaultValue,disabledDate,mode,validRange,fullscreen=!0,showWeek,onChange,onPanelChange,onSelect}=props,{getPrefixCls,direction,calendar}=React.useContext(_configProvider.ConfigContext),prefixCls=getPrefixCls("picker",customizePrefixCls),calendarPrefixCls=`${prefixCls}-calendar`,[wrapCSSVar,hashId,cssVarCls]=(0,_style.default)(prefixCls,
calendarPrefixCls),today=generateConfig.getNow();var warning=(0,_warning.devUseWarning)("Calendar");warning.deprecated(!dateFullCellRender,"dateFullCellRender","fullCellRender");warning.deprecated(!dateCellRender,"dateCellRender","cellRender");warning.deprecated(!monthFullCellRender,"monthFullCellRender","fullCellRender");warning.deprecated(!monthCellRender,"monthCellRender","cellRender");const [mergedValue,setMergedValue]=(0,_useMergedState.default)(()=>value||generateConfig.getNow(),{defaultValue,
value}),[mergedMode,setMergedMode]=(0,_useMergedState.default)("month",{value:mode}),panelMode=React.useMemo(()=>"year"===mergedMode?"month":"date",[mergedMode]);warning=React.useCallback(date=>(validRange?generateConfig.isAfter(validRange[0],date)||generateConfig.isAfter(date,validRange[1]):!1)||!(null===disabledDate||void 0===disabledDate||!disabledDate(date)),[disabledDate,validRange]);const triggerModeChange=newMode=>{setMergedMode(newMode);null===onPanelChange||void 0===onPanelChange?void 0:
onPanelChange(mergedValue,newMode)},onInternalSelect=(date,source)=>{setMergedValue(date);if(!isSameDate(date,mergedValue,generateConfig)){if("date"===panelMode&&!isSameMonth(date,mergedValue,generateConfig)||"month"===panelMode&&!isSameYear(date,mergedValue,generateConfig))null===onPanelChange||void 0===onPanelChange?void 0:onPanelChange(date,mergedMode);null===onChange||void 0===onChange?void 0:onChange(date)}null===onSelect||void 0===onSelect?void 0:onSelect(date,{source})},dateRender=React.useCallback((date,
info)=>fullCellRender?fullCellRender(date,info):dateFullCellRender?dateFullCellRender(date):React.createElement("div",{className:(0,_classnames.default)(`${prefixCls}-cell-inner`,`${calendarPrefixCls}-date`,{[`${calendarPrefixCls}-date-today`]:isSameDate(today,date,generateConfig)})},React.createElement("div",{className:`${calendarPrefixCls}-date-value`},String(generateConfig.getDate(date)).padStart(2,"0")),React.createElement("div",{className:`${calendarPrefixCls}-date-content`},cellRender?cellRender(date,
info):null===dateCellRender||void 0===dateCellRender?void 0:dateCellRender(date))),[dateFullCellRender,dateCellRender,cellRender,fullCellRender]),monthRender=React.useCallback((date,info)=>{if(fullCellRender)return fullCellRender(date,info);if(monthFullCellRender)return monthFullCellRender(date);const months=info.locale.shortMonths||generateConfig.locale.getShortMonths(info.locale.locale);return React.createElement("div",{className:(0,_classnames.default)(`${prefixCls}-cell-inner`,`${calendarPrefixCls}-date`,
{[`${calendarPrefixCls}-date-today`]:isSameMonth(today,date,generateConfig)})},React.createElement("div",{className:`${calendarPrefixCls}-date-value`},months[generateConfig.getMonth(date)]),React.createElement("div",{className:`${calendarPrefixCls}-date-content`},cellRender?cellRender(date,info):null===monthCellRender||void 0===monthCellRender?void 0:monthCellRender(date)))},[monthFullCellRender,monthCellRender,cellRender,fullCellRender]),[contextLocale]=(0,_locale.useLocale)("Calendar",_en_US.default),
locale=Object.assign(Object.assign({},contextLocale),props.locale);return wrapCSSVar(React.createElement("div",{className:(0,_classnames.default)(calendarPrefixCls,{[`${calendarPrefixCls}-full`]:fullscreen,[`${calendarPrefixCls}-mini`]:!fullscreen,[`${calendarPrefixCls}-rtl`]:"rtl"===direction},null===calendar||void 0===calendar?void 0:calendar.className,className,rootClassName,hashId,cssVarCls),style:Object.assign(Object.assign({},null===calendar||void 0===calendar?void 0:calendar.style),style)},
headerRender?headerRender({value:mergedValue,type:mergedMode,onChange:nextDate=>{onInternalSelect(nextDate,"customize")},onTypeChange:triggerModeChange}):React.createElement(_Header.default,{prefixCls:calendarPrefixCls,value:mergedValue,generateConfig,mode:mergedMode,fullscreen,locale:null===locale||void 0===locale?void 0:locale.lang,validRange,onChange:onInternalSelect,onModeChange:triggerModeChange}),React.createElement(_rcPicker.PickerPanel,{value:mergedValue,prefixCls,locale:null===locale||void 0===
locale?void 0:locale.lang,generateConfig,cellRender:(current,info)=>{if("date"===info.type)return dateRender(current,info);if("month"===info.type)return monthRender(current,Object.assign(Object.assign({},info),{locale:null===locale||void 0===locale?void 0:locale.lang}))},onSelect:nextDate=>{onInternalSelect(nextDate,panelMode)},mode:panelMode,picker:panelMode,disabledDate:warning,hideHeader:!0,showWeek})))};Calendar.displayName="Calendar";return Calendar}}
//# sourceMappingURL=module$node_modules$antd$lib$calendar$generateCalendar.js.map
