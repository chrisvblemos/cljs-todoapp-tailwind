shadow$provide.module$node_modules$antd$lib$table$hooks$useFilter$index=function(global,require,module,exports){function injectFilter(prefixCls,dropdownPrefixCls,columns,filterStates,locale,triggerFilter,getPopupContainer,pos,rootClassName){return columns.map((column,index)=>{index=(0,_util.getColumnPos)(index,pos);const {filterOnClose=!0,filterMultiple=!0,filterMode,filterSearch}=column;let newColumn=column;if(newColumn.filters||newColumn.filterDropdown){const columnKey=(0,_util.getColumnKey)(newColumn,
index),filterState=filterStates.find(_ref=>{({key:_ref}=_ref);return columnKey===_ref});newColumn=Object.assign(Object.assign({},newColumn),{title:renderProps=>React.createElement(_FilterDropdown.default,{tablePrefixCls:prefixCls,prefixCls:`${prefixCls}-filter`,dropdownPrefixCls,column:newColumn,columnKey,filterState,filterOnClose,filterMultiple,filterMode,filterSearch,triggerFilter,locale,getPopupContainer,rootClassName},(0,_util.renderColumnTitle)(column.title,renderProps))})}"children"in newColumn&&
(newColumn=Object.assign(Object.assign({},newColumn),{children:injectFilter(prefixCls,dropdownPrefixCls,newColumn.children,filterStates,locale,triggerFilter,getPopupContainer,index,rootClassName)}));return newColumn})}"use client";global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;Object.defineProperty(exports,
"flattenKeys",{enumerable:!0,get:function(){return _FilterDropdown.flattenKeys}});exports.getFilterData=void 0;var _toConsumableArray2=module(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),React=global(require("module$node_modules$react$index")),_warning=require("module$node_modules$antd$lib$_util$warning"),_util=require("module$node_modules$antd$lib$table$util"),_FilterDropdown=global(require("module$node_modules$antd$lib$table$hooks$useFilter$FilterDropdown"));const collectFilterStates=
(columns,init,pos)=>{let filterStates=[];(columns||[]).forEach((column,index)=>{var _a;index=(0,_util.getColumnPos)(index,pos);if(column.filters||"filterDropdown"in column||"onFilter"in column)if("filteredValue"in column){let filteredValues=column.filteredValue;"filterDropdown"in column||(filteredValues=null!==(_a=null===filteredValues||void 0===filteredValues?void 0:filteredValues.map(String))&&void 0!==_a?_a:filteredValues);filterStates.push({column,key:(0,_util.getColumnKey)(column,index),filteredKeys:filteredValues,
forceFiltered:column.filtered})}else filterStates.push({column,key:(0,_util.getColumnKey)(column,index),filteredKeys:init&&column.defaultFilteredValue?column.defaultFilteredValue:void 0,forceFiltered:column.filtered});"children"in column&&(filterStates=[].concat((0,_toConsumableArray2.default)(filterStates),(0,_toConsumableArray2.default)(collectFilterStates(column.children,init,index))))});return filterStates},generateFilterInfo=filterStates=>{const currentFilters={};filterStates.forEach(_ref2=>
{let {key,filteredKeys,column}=_ref2;const {filters,filterDropdown}=column;filterDropdown?currentFilters[key]=filteredKeys||null:Array.isArray(filteredKeys)?(_ref2=(0,_FilterDropdown.flattenKeys)(filters),currentFilters[key]=_ref2.filter(originKey=>filteredKeys.includes(String(originKey)))):currentFilters[key]=null});return currentFilters},getFilterData=(data,filterStates,childrenColumnName)=>filterStates.reduce((currentData,filterState)=>{const {column:{onFilter,filters},filteredKeys}=filterState;
return onFilter&&filteredKeys&&filteredKeys.length?currentData.map(record=>Object.assign({},record)).filter(record=>filteredKeys.some(key=>{var keys=(0,_FilterDropdown.flattenKeys)(filters);const keyIndex=keys.findIndex(k=>String(k)===String(key));keys=-1!==keyIndex?keys[keyIndex]:key;record[childrenColumnName]&&(record[childrenColumnName]=getFilterData(record[childrenColumnName],filterStates,childrenColumnName));return onFilter(keys,record)})):currentData},data);exports.getFilterData=getFilterData;
const getMergedColumns=rawMergedColumns=>rawMergedColumns.flatMap(column=>"children"in column?[column].concat((0,_toConsumableArray2.default)(getMergedColumns(column.children||[]))):[column]);exports.default=props=>{const {prefixCls,dropdownPrefixCls,mergedColumns:rawMergedColumns,onFilterChange,getPopupContainer,locale:tableLocale,rootClassName}=props,warning=(0,_warning.devUseWarning)("Table"),mergedColumns=React.useMemo(()=>getMergedColumns(rawMergedColumns||[]),[rawMergedColumns]),[filterStates,
setFilterStates]=React.useState(()=>collectFilterStates(mergedColumns,!0)),mergedFilterStates=React.useMemo(()=>{const collectedStates=collectFilterStates(mergedColumns,!1);if(0===collectedStates.length)return collectedStates;let filteredKeysIsAllNotControlled=!0,filteredKeysIsAllControlled=!0;collectedStates.forEach(_ref3=>{({filteredKeys:_ref3}=_ref3);void 0!==_ref3?filteredKeysIsAllNotControlled=!1:filteredKeysIsAllControlled=!1});if(filteredKeysIsAllNotControlled){const keyList=(mergedColumns||
[]).map((column,index)=>(0,_util.getColumnKey)(column,(0,_util.getColumnPos)(index)));return filterStates.filter(_ref4=>{({key:_ref4}=_ref4);return keyList.includes(_ref4)}).map(item=>{const col=mergedColumns[keyList.findIndex(key=>key===item.key)];return Object.assign(Object.assign({},item),{column:Object.assign(Object.assign({},item.column),col),forceFiltered:col.filtered})})}warning(filteredKeysIsAllControlled,"usage","Columns should all contain `filteredValue` or not contain `filteredValue`.");
return collectedStates},[mergedColumns,filterStates]);props=React.useMemo(()=>generateFilterInfo(mergedFilterStates),[mergedFilterStates]);const triggerFilter=filterState=>{const newFilterStates=mergedFilterStates.filter(_ref5=>{({key:_ref5}=_ref5);return _ref5!==filterState.key});newFilterStates.push(filterState);setFilterStates(newFilterStates);onFilterChange(generateFilterInfo(newFilterStates),newFilterStates)};return[innerColumns=>injectFilter(prefixCls,dropdownPrefixCls,innerColumns,mergedFilterStates,
tableLocale,triggerFilter,getPopupContainer,void 0,rootClassName),mergedFilterStates,props]}}
//# sourceMappingURL=module$node_modules$antd$lib$table$hooks$useFilter$index.js.map
