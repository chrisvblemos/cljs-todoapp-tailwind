shadow$provide.module$node_modules$antd$lib$notification$index=function(global,require,module,exports){function getGlobalContext(){const {getContainer,rtl,maxCount,top,bottom,showProgress,pauseOnHover}=defaultGlobalConfig,mergedContainer=(null===getContainer||void 0===getContainer?void 0:getContainer())||document.body;return{getContainer:()=>mergedContainer,rtl,maxCount,top,bottom,showProgress,pauseOnHover}}function flushNotice(){if(notification)notification.instance&&(taskQueue.forEach(task=>{switch(task.type){case "open":notification.instance.open(Object.assign(Object.assign({},
defaultGlobalConfig),task.config));break;case "destroy":null===notification||void 0===notification?void 0:notification.instance.destroy(task.key)}}),taskQueue=[]);else{const holderFragment=document.createDocumentFragment(),newNotification={fragment:holderFragment};notification=newNotification;(()=>{(0,_UnstableContext.getReactRender)()(_react.default.createElement(GlobalHolderWrapper,{ref:node=>{const {instance,sync}=node||{};Promise.resolve().then(()=>{!newNotification.instance&&instance&&(newNotification.instance=
instance,newNotification.sync=sync,flushNotice())})}}),holderFragment)})()}}function open(config){(0,_configProvider.globalConfig)().holderRender||(0,_configProvider.warnContext)("notification");taskQueue.push({type:"open",config});flushNotice()}"use client";module=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=
exports.actWrapper=exports.actDestroy=void 0;var _react=global(require("module$node_modules$react$index")),_context=require("module$node_modules$antd$lib$app$context"),_configProvider=global(require("module$node_modules$antd$lib$config_provider$index")),_UnstableContext=require("module$node_modules$antd$lib$config_provider$UnstableContext");module=module(require("module$node_modules$antd$lib$notification$PurePanel"));var _useNotification=global(require("module$node_modules$antd$lib$notification$useNotification"));
let notification=null,taskQueue=[],defaultGlobalConfig={};const GlobalHolder=_react.default.forwardRef((props,ref)=>{const {notificationConfig,sync}=props;({getPrefixCls:props}=(0,_react.useContext)(_configProvider.ConfigContext));props=defaultGlobalConfig.prefixCls||props("notification");const appConfig=(0,_react.useContext)(_context.AppConfigContext),[api,holder]=(0,_useNotification.useInternalNotification)(Object.assign(Object.assign(Object.assign({},notificationConfig),{prefixCls:props}),appConfig.notification));
_react.default.useEffect(sync,[]);_react.default.useImperativeHandle(ref,()=>{const instance=Object.assign({},api);Object.keys(instance).forEach(method=>{instance[method]=function(){sync();return api[method].apply(api,arguments)}});return{instance,sync}});return holder}),GlobalHolderWrapper=_react.default.forwardRef((_,ref)=>{const [notificationConfig,setNotificationConfig]=_react.default.useState(getGlobalContext),sync=()=>{setNotificationConfig(getGlobalContext)};_react.default.useEffect(sync,[]);
_=(0,_configProvider.globalConfig)();const rootPrefixCls=_.getRootPrefixCls(),rootIconPrefixCls=_.getIconPrefixCls(),theme=_.getTheme();ref=_react.default.createElement(GlobalHolder,{ref,sync,notificationConfig});return _react.default.createElement(_configProvider.default,{prefixCls:rootPrefixCls,iconPrefixCls:rootIconPrefixCls,theme},_.holderRender?_.holderRender(ref):ref)}),staticMethods={open,destroy:key=>{taskQueue.push({type:"destroy",key});flushNotice()},config:function(config){defaultGlobalConfig=
Object.assign(Object.assign({},defaultGlobalConfig),config);var _a;null===(_a=null===notification||void 0===notification?void 0:notification.sync)||void 0===_a?void 0:_a.call(notification)},useNotification:_useNotification.default,_InternalPanelDoNotUseOrYouWillBeFired:module.default};["success","info","warning","error"].forEach(type=>{staticMethods[type]=config=>open(Object.assign(Object.assign({},config),{type}))});require=()=>{};exports.actWrapper=require;exports.actDestroy=require;exports.default=
staticMethods}
//# sourceMappingURL=module$node_modules$antd$lib$notification$index.js.map
