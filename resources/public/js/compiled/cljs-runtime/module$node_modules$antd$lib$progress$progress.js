shadow$provide.module$node_modules$antd$lib$progress$progress=function(global,require,module,exports){"use client";global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=exports.ProgressTypes=void 0;var React=module(require("module$node_modules$react$index")),_CheckCircleFilled=global(require("module$node_modules$$ant_design$icons$CheckCircleFilled")),
_CheckOutlined=global(require("module$node_modules$$ant_design$icons$CheckOutlined")),_CloseCircleFilled=global(require("module$node_modules$$ant_design$icons$CloseCircleFilled")),_CloseOutlined=global(require("module$node_modules$$ant_design$icons$CloseOutlined")),_fastColor=require("module$node_modules$$ant_design$fast_color$lib$index"),_classnames=global(require("module$node_modules$classnames$index")),_omit=global(require("module$node_modules$rc_util$lib$omit")),_warning=require("module$node_modules$antd$lib$_util$warning"),
_configProvider=require("module$node_modules$antd$lib$config_provider$index"),_Circle=global(require("module$node_modules$antd$lib$progress$Circle")),_Line=global(require("module$node_modules$antd$lib$progress$Line")),_Steps=global(require("module$node_modules$antd$lib$progress$Steps")),_style=global(require("module$node_modules$antd$lib$progress$style$index")),_utils=require("module$node_modules$antd$lib$progress$utils"),__rest=function(s,e){var t={},p;for(p in s)Object.prototype.hasOwnProperty.call(s,
p)&&0>e.indexOf(p)&&(t[p]=s[p]);if(null!=s&&"function"===typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)0>e.indexOf(p[i])&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};exports.ProgressTypes=["line","circle","dashboard"];const ProgressStatuses=["normal","exception","active","success"];require=React.forwardRef((props,ref)=>{const {prefixCls:customizePrefixCls,className,rootClassName,steps,strokeColor,percent=0,size=
"default",showInfo=!0,type="line",status,format,style,percentPosition={}}=props,restProps=__rest(props,"prefixCls className rootClassName steps strokeColor percent size showInfo type status format style percentPosition".split(" ")),{align:infoAlign="end",type:infoPosition="outer"}=percentPosition,strokeColorNotArray=Array.isArray(strokeColor)?strokeColor[0]:strokeColor;var strokeColorNotGradient="string"===typeof strokeColor||Array.isArray(strokeColor)?strokeColor:void 0;const strokeColorIsBright=
React.useMemo(()=>{if(strokeColorNotArray){const color="string"===typeof strokeColorNotArray?strokeColorNotArray:Object.values(strokeColorNotArray)[0];return(new _fastColor.FastColor(color)).isLight()}return!1},[strokeColor]),percentNumber=React.useMemo(()=>{var _a,_b;const successPercent=(0,_utils.getSuccessPercent)(props);return parseInt(void 0!==successPercent?null===(_a=null!==successPercent&&void 0!==successPercent?successPercent:0)||void 0===_a?void 0:_a.toString():null===(_b=null!==percent&&
void 0!==percent?percent:0)||void 0===_b?void 0:_b.toString(),10)},[percent,props.success,props.successPercent]),progressStatus=React.useMemo(()=>!ProgressStatuses.includes(status)&&100<=percentNumber?"success":status||"normal",[status,percentNumber]),{getPrefixCls,direction,progress:progressStyle}=React.useContext(_configProvider.ConfigContext),prefixCls=getPrefixCls("progress",customizePrefixCls),[wrapCSSVar,hashId,cssVarCls]=(0,_style.default)(prefixCls),isLineType="line"===type,isPureLineType=
isLineType&&!steps,progressInfo=React.useMemo(()=>{if(!showInfo)return null;const successPercent=(0,_utils.getSuccessPercent)(props);let text;const textFormatter=format||(number=>`${number}%`),isBrightInnerColor=isLineType&&strokeColorIsBright&&"inner"===infoPosition;"inner"===infoPosition||format||"exception"!==progressStatus&&"success"!==progressStatus?text=textFormatter((0,_utils.validProgress)(percent),(0,_utils.validProgress)(successPercent)):"exception"===progressStatus?text=isLineType?React.createElement(_CloseCircleFilled.default,
null):React.createElement(_CloseOutlined.default,null):"success"===progressStatus&&(text=isLineType?React.createElement(_CheckCircleFilled.default,null):React.createElement(_CheckOutlined.default,null));return React.createElement("span",{className:(0,_classnames.default)(`${prefixCls}-text`,{[`${prefixCls}-text-bright`]:isBrightInnerColor,[`${prefixCls}-text-${infoAlign}`]:isPureLineType,[`${prefixCls}-text-${infoPosition}`]:isPureLineType}),title:"string"===typeof text?text:void 0},text)},[showInfo,
percent,percentNumber,progressStatus,type,prefixCls,format]),warning=(0,_warning.devUseWarning)("Progress");warning.deprecated(!("successPercent"in props),"successPercent","success.percent");warning.deprecated(!("width"in props),"width","size");if("circle"===type||"dashboard"===type)Array.isArray(size)?warning(!1,"usage",'Type "circle" and "dashboard" do not accept array as `size`, please use number or preset size instead.'):"object"===typeof size&&warning(!1,"usage",'Type "circle" and "dashboard" do not accept object as `size`, please use number or preset size instead.');
props.success&&"progress"in props.success&&warning.deprecated(!1,"success.progress","success.percent");let progress;if("line"===type)progress=steps?React.createElement(_Steps.default,Object.assign({},props,{strokeColor:strokeColorNotGradient,prefixCls,steps:"object"===typeof steps?steps.count:steps}),progressInfo):React.createElement(_Line.default,Object.assign({},props,{strokeColor:strokeColorNotArray,prefixCls,direction,percentPosition:{align:infoAlign,type:infoPosition}}),progressInfo);else if("circle"===
type||"dashboard"===type)progress=React.createElement(_Circle.default,Object.assign({},props,{strokeColor:strokeColorNotArray,prefixCls,progressStatus}),progressInfo);strokeColorNotGradient=(0,_classnames.default)(prefixCls,`${prefixCls}-status-${progressStatus}`,{[`${prefixCls}-${"dashboard"===type&&"circle"||type}`]:"line"!==type,[`${prefixCls}-inline-circle`]:"circle"===type&&20>=(0,_utils.getSize)(size,"circle")[0],[`${prefixCls}-line`]:isPureLineType,[`${prefixCls}-line-align-${infoAlign}`]:isPureLineType,
[`${prefixCls}-line-position-${infoPosition}`]:isPureLineType,[`${prefixCls}-steps`]:steps,[`${prefixCls}-show-info`]:showInfo,[`${prefixCls}-${size}`]:"string"===typeof size,[`${prefixCls}-rtl`]:"rtl"===direction},null===progressStyle||void 0===progressStyle?void 0:progressStyle.className,className,rootClassName,hashId,cssVarCls);return wrapCSSVar(React.createElement("div",Object.assign({ref,style:Object.assign(Object.assign({},null===progressStyle||void 0===progressStyle?void 0:progressStyle.style),
style),className:strokeColorNotGradient,role:"progressbar","aria-valuenow":percentNumber,"aria-valuemin":0,"aria-valuemax":100},(0,_omit.default)(restProps,"trailColor strokeWidth width gapDegree gapPosition strokeLinecap success successPercent".split(" "))),progress))});require.displayName="Progress";exports.default=require}
//# sourceMappingURL=module$node_modules$antd$lib$progress$progress.js.map
