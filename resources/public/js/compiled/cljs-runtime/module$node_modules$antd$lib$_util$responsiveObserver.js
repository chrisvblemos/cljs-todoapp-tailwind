shadow$provide.module$node_modules$antd$lib$_util$responsiveObserver=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=function(){const [,token]=(0,_internal.useToken)(),responsiveMap=getResponsiveMap(validateBreakpoints(token));return _react.default.useMemo(()=>{const subscribers=new Map;let subUid=-1,screens={};return{matchHandlers:{},dispatch(pointMap){screens=
pointMap;subscribers.forEach(func=>func(screens));return 1<=subscribers.size},subscribe(func){subscribers.size||this.register();subUid+=1;subscribers.set(subUid,func);func(screens);return subUid},unsubscribe(paramToken){subscribers.delete(paramToken);subscribers.size||this.unregister()},unregister(){Object.keys(responsiveMap).forEach(screen=>{screen=this.matchHandlers[responsiveMap[screen]];null===screen||void 0===screen?void 0:screen.mql.removeListener(null===screen||void 0===screen?void 0:screen.listener)});
subscribers.clear()},register(){Object.keys(responsiveMap).forEach(screen=>{const matchMediaQuery=responsiveMap[screen],listener=_ref=>{({matches:_ref}=_ref);this.dispatch(Object.assign(Object.assign({},screens),{[screen]:_ref}))},mql=window.matchMedia(matchMediaQuery);mql.addListener(listener);this.matchHandlers[matchMediaQuery]={mql,listener};listener(mql)})},responsiveMap}},[token])};exports.responsiveArray=exports.matchScreen=void 0;var _react=global(require("module$node_modules$react$index")),
_internal=require("module$node_modules$antd$lib$theme$internal");const responsiveArray=exports.responsiveArray="xxl xl lg md sm xs".split(" "),getResponsiveMap=token=>({xs:`(max-width: ${token.screenXSMax}px)`,sm:`(min-width: ${token.screenSM}px)`,md:`(min-width: ${token.screenMD}px)`,lg:`(min-width: ${token.screenLG}px)`,xl:`(min-width: ${token.screenXL}px)`,xxl:`(min-width: ${token.screenXXL}px)`}),validateBreakpoints=token=>{const revBreakpoints=[].concat(responsiveArray).reverse();revBreakpoints.forEach((breakpoint,
i)=>{var breakpointUpper=breakpoint.toUpperCase();const screenMin=`screen${breakpointUpper}Min`;breakpoint=`screen${breakpointUpper}`;if(!(token[screenMin]<=token[breakpoint]))throw Error(`${screenMin}<=${breakpoint} fails : !(${token[screenMin]}<=${token[breakpoint]})`);if(i<revBreakpoints.length-1){breakpointUpper=`screen${breakpointUpper}Max`;if(!(token[breakpoint]<=token[breakpointUpper]))throw Error(`${breakpoint}<=${breakpointUpper} fails : !(${token[breakpoint]}<=${token[breakpointUpper]})`);
i=`screen${revBreakpoints[i+1].toUpperCase()}Min`;if(!(token[breakpointUpper]<=token[i]))throw Error(`${breakpointUpper}<=${i} fails : !(${token[breakpointUpper]}<=${token[i]})`);}});return token};exports.matchScreen=(screens,screenSizes)=>{if(screenSizes&&"object"===typeof screenSizes)for(let i=0;i<responsiveArray.length;i++){const breakpoint=responsiveArray[i];if(screens[breakpoint]&&void 0!==screenSizes[breakpoint])return screenSizes[breakpoint]}}}
//# sourceMappingURL=module$node_modules$antd$lib$_util$responsiveObserver.js.map
