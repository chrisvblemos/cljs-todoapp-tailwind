shadow$provide.module$node_modules$antd$lib$tree$DirectoryTree=function(global,require,module,exports){function getIcon(props){const {isLeaf,expanded}=props;return isLeaf?React.createElement(_FileOutlined.default,null):expanded?React.createElement(_FolderOpenOutlined.default,null):React.createElement(_FolderOutlined.default,null)}function getTreeData(_ref){let {treeData,children}=_ref;return treeData||(0,_treeUtil.convertTreeToData)(children)}"use client";global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
module=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _toConsumableArray2=module(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),React=global(require("module$node_modules$react$index")),_FileOutlined=module(require("module$node_modules$$ant_design$icons$FileOutlined")),_FolderOpenOutlined=module(require("module$node_modules$$ant_design$icons$FolderOpenOutlined")),
_FolderOutlined=module(require("module$node_modules$$ant_design$icons$FolderOutlined")),_classnames=module(require("module$node_modules$classnames$index")),_util=require("module$node_modules$rc_tree$lib$util"),_treeUtil=require("module$node_modules$rc_tree$lib$utils$treeUtil"),_configProvider=require("module$node_modules$antd$lib$config_provider$index"),_Tree=module(require("module$node_modules$antd$lib$tree$Tree")),_dictUtil=require("module$node_modules$antd$lib$tree$utils$dictUtil"),__rest=function(s,
e){var t={},p;for(p in s)Object.prototype.hasOwnProperty.call(s,p)&&0>e.indexOf(p)&&(t[p]=s[p]);if(null!=s&&"function"===typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)0>e.indexOf(p[i])&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};require=React.forwardRef((_a,ref)=>{var {defaultExpandAll,defaultExpandParent,defaultExpandedKeys}=_a,props=__rest(_a,["defaultExpandAll","defaultExpandParent","defaultExpandedKeys"]);
const lastSelectedKey=React.useRef(null),cachedSelectedKeys=React.useRef(null),[selectedKeys,setSelectedKeys]=React.useState(props.selectedKeys||props.defaultSelectedKeys||[]),[expandedKeys,setExpandedKeys]=React.useState(()=>{const {keyEntities}=(0,_treeUtil.convertDataToEntities)(getTreeData(props));return defaultExpandAll?Object.keys(keyEntities):defaultExpandParent?(0,_util.conductExpandParent)(props.expandedKeys||defaultExpandedKeys||[],keyEntities):props.expandedKeys||defaultExpandedKeys||[]});
React.useEffect(()=>{"selectedKeys"in props&&setSelectedKeys(props.selectedKeys)},[props.selectedKeys]);React.useEffect(()=>{"expandedKeys"in props&&setExpandedKeys(props.expandedKeys)},[props.expandedKeys]);const {getPrefixCls,direction}=React.useContext(_configProvider.ConfigContext),{prefixCls:customizePrefixCls,className,showIcon=!0,expandAction="click"}=props;_a=__rest(props,["prefixCls","className","showIcon","expandAction"]);const prefixCls=getPrefixCls("tree",customizePrefixCls),connectClassName=
(0,_classnames.default)(`${prefixCls}-directory`,{[`${prefixCls}-directory-rtl`]:"rtl"===direction},className);return React.createElement(_Tree.default,Object.assign({icon:getIcon,ref,blockNode:!0},_a,{showIcon,expandAction,prefixCls,className:connectClassName,expandedKeys,selectedKeys,onSelect:(keys,event)=>{var _a;const {multiple,fieldNames}=props,{node,nativeEvent}=event,{key=""}=node,treeData=getTreeData(props);event=Object.assign(Object.assign({},event),{selected:!0});const ctrlPick=(null===
nativeEvent||void 0===nativeEvent?void 0:nativeEvent.ctrlKey)||(null===nativeEvent||void 0===nativeEvent?void 0:nativeEvent.metaKey),shiftPick=null===nativeEvent||void 0===nativeEvent?void 0:nativeEvent.shiftKey;multiple&&ctrlPick?(lastSelectedKey.current=key,cachedSelectedKeys.current=keys):multiple&&shiftPick?keys=Array.from(new Set([].concat((0,_toConsumableArray2.default)(cachedSelectedKeys.current||[]),(0,_toConsumableArray2.default)((0,_dictUtil.calcRangeKeys)({treeData,expandedKeys,startKey:key,
endKey:lastSelectedKey.current,fieldNames}))))):(keys=[key],lastSelectedKey.current=key,cachedSelectedKeys.current=keys);event.selectedNodes=(0,_dictUtil.convertDirectoryKeysToNodes)(treeData,keys,fieldNames);null===(_a=props.onSelect)||void 0===_a?void 0:_a.call(props,keys,event);"selectedKeys"in props||setSelectedKeys(keys)},onExpand:(keys,info)=>{var _a;"expandedKeys"in props||setExpandedKeys(keys);return null===(_a=props.onExpand)||void 0===_a?void 0:_a.call(props,keys,info)}}))});require.displayName=
"DirectoryTree";exports.default=require}
//# sourceMappingURL=module$node_modules$antd$lib$tree$DirectoryTree.js.map
