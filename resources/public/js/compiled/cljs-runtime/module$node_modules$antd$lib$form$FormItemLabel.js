shadow$provide.module$node_modules$antd$lib$form$FormItemLabel=function(global,require,module,exports){function toTooltipProps(tooltip){return tooltip?"object"!==typeof tooltip||React.isValidElement(tooltip)?{title:tooltip}:tooltip:null}"use client";global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=
void 0;var React=module(require("module$node_modules$react$index")),_QuestionCircleOutlined=global(require("module$node_modules$$ant_design$icons$QuestionCircleOutlined")),_classnames=global(require("module$node_modules$classnames$index")),_col=global(require("module$node_modules$antd$lib$grid$col")),_locale=require("module$node_modules$antd$lib$locale$index"),_en_US=global(require("module$node_modules$antd$lib$locale$en_US")),_tooltip=global(require("module$node_modules$antd$lib$tooltip$index")),
_context=require("module$node_modules$antd$lib$form$context"),__rest=function(s,e){var t={},p;for(p in s)Object.prototype.hasOwnProperty.call(s,p)&&0>e.indexOf(p)&&(t[p]=s[p]);if(null!=s&&"function"===typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)0>e.indexOf(p[i])&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};exports.default=_ref=>{let {prefixCls,label,htmlFor,labelCol,labelAlign,colon,required,requiredMark,tooltip,
vertical}=_ref;var _a;const [formLocale]=(0,_locale.useLocale)("Form"),{labelAlign:contextLabelAlign,labelCol:contextLabelCol,labelWrap,colon:contextColon}=React.useContext(_context.FormContext);if(!label)return null;_ref=labelCol||contextLabelCol||{};var labelClsBasic=`${prefixCls}-item-label`;labelClsBasic=(0,_classnames.default)(labelClsBasic,"left"===(labelAlign||contextLabelAlign)&&`${labelClsBasic}-left`,_ref.className,{[`${labelClsBasic}-wrap`]:!!labelWrap});let labelChildren=label;const computedColon=
!0===colon||!1!==contextColon&&!1!==colon;computedColon&&!vertical&&"string"===typeof label&&label.trim()&&(labelChildren=label.replace(/[:|ï¼š]\s*$/,""));var tooltipProps=toTooltipProps(tooltip);if(tooltipProps){var {icon=React.createElement(_QuestionCircleOutlined.default,null)}=tooltipProps;tooltipProps=__rest(tooltipProps,["icon"]);icon=React.createElement(_tooltip.default,Object.assign({},tooltipProps),React.cloneElement(icon,{className:`${prefixCls}-item-tooltip`,title:"",onClick:e=>{e.preventDefault()},
tabIndex:null}));labelChildren=React.createElement(React.Fragment,null,labelChildren,icon)}icon="optional"===requiredMark;(tooltipProps="function"===typeof requiredMark)?labelChildren=requiredMark(labelChildren,{required:!!required}):icon&&!required&&(labelChildren=React.createElement(React.Fragment,null,labelChildren,React.createElement("span",{className:`${prefixCls}-item-optional`,title:""},(null===formLocale||void 0===formLocale?void 0:formLocale.optional)||(null===(_a=_en_US.default.Form)||void 0===
_a?void 0:_a.optional))));_a=(0,_classnames.default)({[`${prefixCls}-item-required`]:required,[`${prefixCls}-item-required-mark-optional`]:icon||tooltipProps,[`${prefixCls}-item-no-colon`]:!computedColon});return React.createElement(_col.default,Object.assign({},_ref,{className:labelClsBasic}),React.createElement("label",{htmlFor,className:_a,title:"string"===typeof label?label:""},labelChildren))}}
//# sourceMappingURL=module$node_modules$antd$lib$form$FormItemLabel.js.map
