shadow$provide.module$node_modules$antd$lib$color_picker$components$PanelPicker$GradientColorBar=function(global,require,module,exports){function sortColors(colors){return(0,_toConsumableArray2.default)(colors).sort((a,b)=>a.percent-b.percent)}"use client";global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=
void 0;var _toConsumableArray2=module(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),React=global(require("module$node_modules$react$index")),_color=require("module$node_modules$antd$lib$color_picker$color"),_util=require("module$node_modules$antd$lib$color_picker$util"),_ColorSlider=require("module$node_modules$antd$lib$color_picker$components$ColorSlider");exports.default=React.memo(props=>{const {prefixCls,mode,onChange,onChangeComplete,onActive,activeIndex,onGradientDragging,
colors}=props;props="gradient"===mode;const colorList=React.useMemo(()=>colors.map(info=>({percent:info.percent,color:info.color.toRgbString()})),[colors]),values=React.useMemo(()=>colorList.map(info=>info.percent),[colorList]),colorsRef=React.useRef(colorList);return props?React.createElement(_ColorSlider.GradientColorSlider,{min:0,max:100,prefixCls,className:`${prefixCls}-gradient-slider`,colors:colorList,color:null,value:values,range:!0,onChangeComplete:nextValues=>{onChangeComplete(new _color.AggregationColor(colorList));
activeIndex>=nextValues.length&&onActive(nextValues.length-1);onGradientDragging(!1)},disabled:!1,type:"gradient",activeIndex,onActive,onDragStart:_ref=>{let {rawValues,draggingIndex,draggingValue}=_ref;if(rawValues.length>colorList.length){_ref=(0,_util.getGradientPercentColor)(colorList,draggingValue);const nextColors=(0,_toConsumableArray2.default)(colorList);nextColors.splice(draggingIndex,0,{percent:draggingValue,color:_ref});colorsRef.current=nextColors}else colorsRef.current=colorList;onGradientDragging(!0);
onChange(new _color.AggregationColor(sortColors(colorsRef.current)),!0)},onDragChange:_ref2=>{let {deleteIndex,draggingIndex,draggingValue}=_ref2;_ref2=(0,_toConsumableArray2.default)(colorsRef.current);-1!==deleteIndex?_ref2.splice(deleteIndex,1):(_ref2[draggingIndex]=Object.assign(Object.assign({},_ref2[draggingIndex]),{percent:draggingValue}),_ref2=sortColors(_ref2));onChange(new _color.AggregationColor(_ref2),!0)},onKeyDelete:index=>{const nextColors=(0,_toConsumableArray2.default)(colorList);
nextColors.splice(index,1);index=new _color.AggregationColor(nextColors);onChange(index);onChangeComplete(index)}}):null})}
//# sourceMappingURL=module$node_modules$antd$lib$color_picker$components$PanelPicker$GradientColorBar.js.map
