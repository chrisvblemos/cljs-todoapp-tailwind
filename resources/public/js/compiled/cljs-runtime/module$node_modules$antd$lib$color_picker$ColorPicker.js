shadow$provide.module$node_modules$antd$lib$color_picker$ColorPicker=function(global,require,module,exports){"use client";global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _react=module(require("module$node_modules$react$index")),_classnames=global(require("module$node_modules$classnames$index")),
_useMergedState=global(require("module$node_modules$rc_util$lib$hooks$useMergedState")),_ContextIsolator=global(require("module$node_modules$antd$lib$_util$ContextIsolator"));module=global(require("module$node_modules$antd$lib$_util$PurePanel"));var _statusUtils=require("module$node_modules$antd$lib$_util$statusUtils"),_warning=require("module$node_modules$antd$lib$_util$warning"),_context=require("module$node_modules$antd$lib$config_provider$context"),_DisabledContext=global(require("module$node_modules$antd$lib$config_provider$DisabledContext")),
_useCSSVarCls=global(require("module$node_modules$antd$lib$config_provider$hooks$useCSSVarCls")),_useSize=global(require("module$node_modules$antd$lib$config_provider$hooks$useSize")),_context2=require("module$node_modules$antd$lib$form$context"),_popover=global(require("module$node_modules$antd$lib$popover$index")),_Compact=require("module$node_modules$antd$lib$space$Compact"),_color=require("module$node_modules$antd$lib$color_picker$color"),_ColorPickerPanel=global(require("module$node_modules$antd$lib$color_picker$ColorPickerPanel")),
_ColorTrigger=global(require("module$node_modules$antd$lib$color_picker$components$ColorTrigger")),_useModeColor=global(require("module$node_modules$antd$lib$color_picker$hooks$useModeColor")),_style=global(require("module$node_modules$antd$lib$color_picker$style$index")),_util=require("module$node_modules$antd$lib$color_picker$util"),__rest=function(s,e){var t={},p;for(p in s)Object.prototype.hasOwnProperty.call(s,p)&&0>e.indexOf(p)&&(t[p]=s[p]);if(null!=s&&"function"===typeof Object.getOwnPropertySymbols){var i=
0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)0>e.indexOf(p[i])&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};require=props=>{const {mode,value,defaultValue,format,defaultFormat,allowClear=!1,presets,children,trigger="click",open,disabled,placement="bottomLeft",arrow=!0,panelRender,showText,style,className,size:customizeSize,rootClassName,prefixCls:customizePrefixCls,styles,disabledAlpha=!1,onFormatChange,onChange,onClear,onOpenChange,onChangeComplete,getPopupContainer,
autoAdjustOverflow=!0,destroyTooltipOnHide,disabledFormat}=props;props=__rest(props,"mode value defaultValue format defaultFormat allowClear presets children trigger open disabled placement arrow panelRender showText style className size rootClassName prefixCls styles disabledAlpha onFormatChange onChange onClear onOpenChange onChangeComplete getPopupContainer autoAdjustOverflow destroyTooltipOnHide disabledFormat".split(" "));const {getPrefixCls,direction,colorPicker}=(0,_react.useContext)(_context.ConfigContext);
var contextDisabled=(0,_react.useContext)(_DisabledContext.default);const mergedDisabled=null!==disabled&&void 0!==disabled?disabled:contextDisabled,[popupOpen,setPopupOpen]=(0,_useMergedState.default)(!1,{value:open,postState:openData=>!mergedDisabled&&openData,onChange:onOpenChange}),[formatValue,setFormatValue]=(0,_useMergedState.default)(format,{value:format,defaultValue:defaultFormat,onChange:onFormatChange});contextDisabled=getPrefixCls("color-picker",customizePrefixCls);const [mergedColor,
setColor,modeState,setModeState,modeOptions]=(0,_useModeColor.default)(defaultValue,value,mode),isAlphaColor=(0,_react.useMemo)(()=>100>(0,_util.getColorAlpha)(mergedColor),[mergedColor]),[cachedGradientColor,setCachedGradientColor]=_react.default.useState(null),onInternalChangeComplete=color=>{if(onChangeComplete){let changeColor=(0,_util.generateColor)(color);disabledAlpha&&isAlphaColor&&(changeColor=(0,_util.genAlphaColor)(color));onChangeComplete(changeColor)}},onInternalChange=(data,changeFromPickerDrag)=>
{data=(0,_util.generateColor)(data);disabledAlpha&&isAlphaColor&&(data=(0,_util.genAlphaColor)(data));setColor(data);setCachedGradientColor(null);onChange&&onChange(data,data.toCssString());changeFromPickerDrag||onInternalChangeComplete(data)},[activeIndex,setActiveIndex]=_react.default.useState(0),[gradientDragging,setGradientDragging]=_react.default.useState(!1);var {status:contextStatus}=_react.default.useContext(_context2.FormItemInputContext);const {compactSize,compactItemClassnames}=(0,_Compact.useCompactItemContext)(contextDisabled,
direction);var mergedSize=(0,_useSize.default)(ctx=>{var _a;return null!==(_a=null!==customizeSize&&void 0!==customizeSize?customizeSize:compactSize)&&void 0!==_a?_a:ctx}),rootCls=(0,_useCSSVarCls.default)(contextDisabled);const [wrapCSSVar,hashId,cssVarCls]=(0,_style.default)(contextDisabled,rootCls);rootCls=(0,_classnames.default)(rootClassName,cssVarCls,rootCls,{[`${contextDisabled}-rtl`]:direction});contextStatus=(0,_classnames.default)((0,_statusUtils.getStatusClassNames)(contextDisabled,contextStatus),
{[`${contextDisabled}-sm`]:"small"===mergedSize,[`${contextDisabled}-lg`]:"large"===mergedSize},compactItemClassnames,null===colorPicker||void 0===colorPicker?void 0:colorPicker.className,rootCls,className,hashId);mergedSize=(0,_classnames.default)(contextDisabled,rootCls);(0,_warning.devUseWarning)("ColorPicker")(!(disabledAlpha&&isAlphaColor),"usage","`disabledAlpha` will make the alpha to be 100% when use alpha color.");rootCls={open:popupOpen,trigger,placement,arrow,rootClassName,getPopupContainer,
autoAdjustOverflow,destroyTooltipOnHide};const mergedStyle=Object.assign(Object.assign({},null===colorPicker||void 0===colorPicker?void 0:colorPicker.style),style);return wrapCSSVar(_react.default.createElement(_popover.default,Object.assign({style:null===styles||void 0===styles?void 0:styles.popup,styles:{body:null===styles||void 0===styles?void 0:styles.popupOverlayInner},onOpenChange:visible=>{visible&&mergedDisabled||setPopupOpen(visible)},content:_react.default.createElement(_ContextIsolator.default,
{form:!0},_react.default.createElement(_ColorPickerPanel.default,{mode:modeState,onModeChange:newMode=>{setModeState(newMode);"single"===newMode&&mergedColor.isGradient()?(setActiveIndex(0),onInternalChange(new _color.AggregationColor(mergedColor.getColors()[0].color)),setCachedGradientColor(mergedColor)):"gradient"!==newMode||mergedColor.isGradient()||(newMode=isAlphaColor?(0,_util.genAlphaColor)(mergedColor):mergedColor,onInternalChange(new _color.AggregationColor(cachedGradientColor||[{percent:0,
color:newMode},{percent:100,color:newMode}])))},modeOptions,prefixCls:contextDisabled,value:mergedColor,allowClear,disabled:mergedDisabled,disabledAlpha,presets,panelRender,format:formatValue,onFormatChange:setFormatValue,onChange:onInternalChange,onChangeComplete:onInternalChangeComplete,onClear,activeIndex,onActive:setActiveIndex,gradientDragging,onGradientDragging:setGradientDragging,disabledFormat})),classNames:{root:mergedSize}},rootCls),children||_react.default.createElement(_ColorTrigger.default,
Object.assign({activeIndex:popupOpen?activeIndex:-1,open:popupOpen,className:contextStatus,style:mergedStyle,prefixCls:contextDisabled,disabled:mergedDisabled,showText,format:formatValue},props,{color:mergedColor}))))};require.displayName="ColorPicker";global=(0,module.default)(require,void 0,props=>Object.assign(Object.assign({},props),{placement:"bottom",autoAdjustOverflow:!1}),"color-picker",prefixCls=>prefixCls);require._InternalPanelDoNotUseOrYouWillBeFired=global;exports.default=require}
//# sourceMappingURL=module$node_modules$antd$lib$color_picker$ColorPicker.js.map
