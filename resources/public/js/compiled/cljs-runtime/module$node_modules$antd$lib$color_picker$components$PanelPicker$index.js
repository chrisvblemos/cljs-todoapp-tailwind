shadow$provide.module$node_modules$antd$lib$color_picker$components$PanelPicker$index=function(global,require,module,exports){"use client";module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _toConsumableArray2=global(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),
_react=module(require("module$node_modules$react$index")),_colorPicker=global(require("module$node_modules$$rc_component$color_picker$lib$index")),_useLayoutEffect=global(require("module$node_modules$rc_util$lib$hooks$useLayoutEffect")),_segmented=global(require("module$node_modules$antd$lib$segmented$index")),_color=require("module$node_modules$antd$lib$color_picker$color"),_context=require("module$node_modules$antd$lib$color_picker$context"),_util=require("module$node_modules$antd$lib$color_picker$util"),
_ColorClear=global(require("module$node_modules$antd$lib$color_picker$components$ColorClear")),_ColorInput=global(require("module$node_modules$antd$lib$color_picker$components$ColorInput"));module=global(require("module$node_modules$antd$lib$color_picker$components$ColorSlider"));var _GradientColorBar=global(require("module$node_modules$antd$lib$color_picker$components$PanelPicker$GradientColorBar")),__rest=function(s,e){var t={},p;for(p in s)Object.prototype.hasOwnProperty.call(s,p)&&0>e.indexOf(p)&&
(t[p]=s[p]);if(null!=s&&"function"===typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)0>e.indexOf(p[i])&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};const components={slider:module.default};exports.default=()=>{const panelPickerContext=(0,_react.useContext)(_context.PanelPickerContext),{mode,onModeChange,modeOptions,prefixCls,allowClear,value,disabledAlpha,onChange,onClear,onChangeComplete,activeIndex,gradientDragging}=
panelPickerContext,injectProps=__rest(panelPickerContext,"mode onModeChange modeOptions prefixCls allowClear value disabledAlpha onChange onClear onChangeComplete activeIndex gradientDragging".split(" ")),colors=_react.default.useMemo(()=>value.cleared?[{percent:0,color:new _color.AggregationColor("")},{percent:100,color:new _color.AggregationColor("")}]:value.getColors(),[value]),isSingle=!value.isGradient(),[lockedColor,setLockedColor]=_react.default.useState(value);(0,_useLayoutEffect.default)(()=>
{var _a;isSingle||setLockedColor(null===(_a=colors[activeIndex])||void 0===_a?void 0:_a.color)},[gradientDragging,activeIndex]);const activeColor=_react.default.useMemo(()=>{var _a;return isSingle?value:gradientDragging?lockedColor:null===(_a=colors[activeIndex])||void 0===_a?void 0:_a.color},[value,activeIndex,isSingle,lockedColor,gradientDragging]),[pickerColor,setPickerColor]=_react.default.useState(activeColor),[forceSync,setForceSync]=_react.default.useState(0),mergedPickerColor=(null===pickerColor||
void 0===pickerColor?0:pickerColor.equals(activeColor))?activeColor:pickerColor;(0,_useLayoutEffect.default)(()=>{setPickerColor(activeColor)},[forceSync,null===activeColor||void 0===activeColor?void 0:activeColor.toHexString()]);const fillColor=(nextColor,info)=>{nextColor=(0,_util.generateColor)(nextColor);if(value.cleared){const rgb=nextColor.toRgb();if(rgb.r||rgb.g||rgb.b||!info)nextColor=(0,_util.genAlphaColor)(nextColor);else{const {type:infoType,value:infoValue=0}=info;nextColor=new _color.AggregationColor({h:"hue"===
infoType?infoValue:0,s:1,b:1,a:"alpha"===infoType?infoValue/100:1})}}if("single"===mode)return nextColor;info=(0,_toConsumableArray2.default)(colors);info[activeIndex]=Object.assign(Object.assign({},info[activeIndex]),{color:nextColor});return new _color.AggregationColor(info)},onInternalChangeComplete=(nextColor,info)=>{onChangeComplete(fillColor(nextColor,info));setForceSync(ori=>ori+1)};let operationNode=null;const showMode=1<modeOptions.length;if(allowClear||showMode)operationNode=_react.default.createElement("div",
{className:`${prefixCls}-operation`},showMode&&_react.default.createElement(_segmented.default,{size:"small",options:modeOptions,value:mode,onChange:onModeChange}),_react.default.createElement(_ColorClear.default,Object.assign({prefixCls,value,onChange:clearColor=>{onChange(clearColor);null===onClear||void 0===onClear?void 0:onClear()}},injectProps)));return _react.default.createElement(_react.default.Fragment,null,operationNode,_react.default.createElement(_GradientColorBar.default,Object.assign({},
panelPickerContext,{colors})),_react.default.createElement(_colorPicker.default,{prefixCls,value:null===mergedPickerColor||void 0===mergedPickerColor?void 0:mergedPickerColor.toHsb(),disabledAlpha,onChange:(colorValue,info)=>{colorValue=fillColor(colorValue,info);setPickerColor(colorValue.isGradient()?colorValue.getColors()[activeIndex].color:colorValue);onChange(colorValue,!0)},onChangeComplete:(colorValue,info)=>{onInternalChangeComplete(colorValue,info)},components}),_react.default.createElement(_ColorInput.default,
Object.assign({value:activeColor,onChange:colorValue=>{onChange(fillColor(colorValue))},prefixCls,disabledAlpha},injectProps)))}}
//# sourceMappingURL=module$node_modules$antd$lib$color_picker$components$PanelPicker$index.js.map
