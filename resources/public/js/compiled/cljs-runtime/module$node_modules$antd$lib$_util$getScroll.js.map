{
"version":3,
"file":"module$node_modules$antd$lib$_util$getScroll.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,4CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQzGC,QAASA,SAAQ,CAACC,GAAD,CAAM,CACrB,MAAe,KAAf,GAAOA,GAAP,EAA+BC,IAAAA,EAA/B,GAAuBD,GAAvB,EAA4CA,GAA5C,GAAoDA,GAAIE,CAAAA,MADnC,CALvBC,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQQ,CAAAA,OAAR,CAAkB,IAAK,EACvBR,QAAQC,CAAAA,QAAR,CAAmBA,QA8BJD,QAAQQ,CAAAA,OAAR,CA1BGC,MAAAC,EAAU,CAAA,IACtBC,EADsB,CAClBC,EACR,IAAsB,WAAtB,GAAI,MAAOR,OAAX,CACE,MAAO,EAET,KAAIS,OAAS,CACTZ,SAAA,CAASQ,MAAT,CAAJ,CACEI,MADF,CACWJ,MAAOK,CAAAA,WADlB,CAEWL,MAAJ,WAAsBM,SAAtB,CACLF,MADK,CACIJ,MAAOO,CAAAA,eAAgBC,CAAAA,SAD3B,CAEIR,MAAJ,WAAsBS,YAAtB;AACLL,MADK,CACIJ,MAAOQ,CAAAA,SADX,CAEIR,MAFJ,GASLI,MATK,CASIJ,MAAA,CAAA,SATJ,CAWHA,OAAJ,EAAc,CAACR,QAAA,CAASQ,MAAT,CAAf,EAAqD,QAArD,GAAmC,MAAOI,OAA1C,GACEA,MADF,CAC4G,IAAjG,IAACD,EAAD,CAA4EI,CAArC,IAAhC,IAACL,EAAD,CAAMF,MAAOU,CAAAA,aAAb,GAA+C,IAAK,EAApD,GAAwCR,EAAxC,CAAwDA,EAAxD,CAA6DF,MAAQO,EAAAA,eAA5E,GAAgH,IAAK,EAArH,GAAyGJ,EAAzG,CAAyH,IAAK,EAA9H,CAAkIA,EAAGK,CAAAA,SADhJ,CAGA,OAAOJ,OAxBmB,CAX6E;",
"sources":["node_modules/antd/lib/_util/getScroll.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$antd$lib$_util$getScroll\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.isWindow = isWindow;\nfunction isWindow(obj) {\n  return obj !== null && obj !== undefined && obj === obj.window;\n}\nconst getScroll = target => {\n  var _a, _b;\n  if (typeof window === 'undefined') {\n    return 0;\n  }\n  let result = 0;\n  if (isWindow(target)) {\n    result = target.pageYOffset;\n  } else if (target instanceof Document) {\n    result = target.documentElement.scrollTop;\n  } else if (target instanceof HTMLElement) {\n    result = target.scrollTop;\n  } else if (target) {\n    // According to the type inference, the `target` is `never` type.\n    // Since we configured the loose mode type checking, and supports mocking the target with such shape below::\n    //    `{ documentElement: { scrollLeft: 200, scrollTop: 400 } }`,\n    //    the program may falls into this branch.\n    // Check the corresponding tests for details. Don't sure what is the real scenario this happens.\n    /* biome-ignore lint/complexity/useLiteralKeys: target is a never type */ /* eslint-disable-next-line dot-notation */\n    result = target['scrollTop'];\n  }\n  if (target && !isWindow(target) && typeof result !== 'number') {\n    result = (_b = ((_a = target.ownerDocument) !== null && _a !== void 0 ? _a : target).documentElement) === null || _b === void 0 ? void 0 : _b.scrollTop;\n  }\n  return result;\n};\nvar _default = exports.default = getScroll;\n};"],
"names":["shadow$provide","global","require","module","exports","isWindow","obj","undefined","window","Object","defineProperty","value","default","target","getScroll","_a","_b","result","pageYOffset","Document","documentElement","scrollTop","HTMLElement","ownerDocument"]
}
