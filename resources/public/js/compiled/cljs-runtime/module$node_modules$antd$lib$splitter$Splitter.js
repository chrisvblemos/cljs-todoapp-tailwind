shadow$provide.module$node_modules$antd$lib$splitter$Splitter=function(global,require,module,exports){"use client";global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _react=module(require("module$node_modules$react$index")),_classnames=global(require("module$node_modules$classnames$index")),
_rcResizeObserver=global(require("module$node_modules$rc_resize_observer$lib$index")),_useEvent=global(require("module$node_modules$rc_util$lib$hooks$useEvent")),_warning=require("module$node_modules$antd$lib$_util$warning"),_configProvider=require("module$node_modules$antd$lib$config_provider$index"),_useCSSVarCls=global(require("module$node_modules$antd$lib$config_provider$hooks$useCSSVarCls")),_useItems=global(require("module$node_modules$antd$lib$splitter$hooks$useItems")),_useResizable=global(require("module$node_modules$antd$lib$splitter$hooks$useResizable")),
_useResize=global(require("module$node_modules$antd$lib$splitter$hooks$useResize")),_useSizes=global(require("module$node_modules$antd$lib$splitter$hooks$useSizes")),_Panel=require("module$node_modules$antd$lib$splitter$Panel"),_SplitBar=global(require("module$node_modules$antd$lib$splitter$SplitBar")),_style=global(require("module$node_modules$antd$lib$splitter$style$index"));require=props=>{const {prefixCls:customizePrefixCls,className,style,layout="horizontal",children,rootClassName,onResizeStart,
onResize,onResizeEnd,lazy}=props,{getPrefixCls,direction,splitter}=_react.default.useContext(_configProvider.ConfigContext),prefixCls=getPrefixCls("splitter",customizePrefixCls);props=(0,_useCSSVarCls.default)(prefixCls);const [wrapCSSVar,hashId,cssVarCls]=(0,_style.default)(prefixCls,props),isVertical="vertical"===layout;var isRTL="rtl"===direction;const reverse=!isVertical&&isRTL,items=(0,_useItems.default)(children);var warning=(0,_warning.devUseWarning)("Splitter");let existSize=!1,existUndefinedSize=
!1;items.forEach(item=>{void 0!==item.size?existSize=!0:existUndefinedSize=!0});existSize&&existUndefinedSize&&!onResize&&warning(!1,"usage","When part of `Splitter.Panel` has `size`, `onResize` is required or change `size` to `defaultSize`.");const [containerSize,setContainerSize]=(0,_react.useState)(),[panelSizes,itemPxSizes,itemPtgSizes,itemPtgMinSizes,itemPtgMaxSizes,updateSizes]=(0,_useSizes.default)(items,containerSize),resizableInfos=(0,_useResizable.default)(items,itemPxSizes),[onOffsetStart,
onOffsetUpdate,onOffsetEnd,onCollapse,movingIndex]=(0,_useResize.default)(items,resizableInfos,itemPtgSizes,containerSize,updateSizes),onInternalResizeStart=(0,_useEvent.default)(index=>{onOffsetStart(index);null===onResizeStart||void 0===onResizeStart?void 0:onResizeStart(itemPxSizes)}),onInternalResizeUpdate=(0,_useEvent.default)((index,offset)=>{index=onOffsetUpdate(index,offset);null===onResize||void 0===onResize?void 0:onResize(index)}),onInternalResizeEnd=(0,_useEvent.default)(()=>{onOffsetEnd();
null===onResizeEnd||void 0===onResizeEnd?void 0:onResizeEnd(itemPxSizes)}),onInternalCollapse=(0,_useEvent.default)((index,type)=>{index=onCollapse(index,type);null===onResize||void 0===onResize?void 0:onResize(index);null===onResizeEnd||void 0===onResizeEnd?void 0:onResizeEnd(index)});props=(0,_classnames.default)(prefixCls,className,`${prefixCls}-${layout}`,{[`${prefixCls}-rtl`]:isRTL},rootClassName,null===splitter||void 0===splitter?void 0:splitter.className,cssVarCls,props,hashId);isRTL=`${prefixCls}-mask`;
const stackSizes=_react.default.useMemo(()=>{const mergedSizes=[];let stack=0;for(let i=0;i<items.length;i+=1)stack+=itemPtgSizes[i],mergedSizes.push(stack);return mergedSizes},[itemPtgSizes]);warning=Object.assign(Object.assign({},null===splitter||void 0===splitter?void 0:splitter.style),style);return wrapCSSVar(_react.default.createElement(_rcResizeObserver.default,{onResize:size=>{const {offsetWidth,offsetHeight}=size;size=isVertical?offsetHeight:offsetWidth;0!==size&&setContainerSize(size)}},
_react.default.createElement("div",{style:warning,className:props},items.map((item,idx)=>{item=_react.default.createElement(_Panel.InternalPanel,Object.assign({},item,{prefixCls,size:panelSizes[idx]}));let splitBar=null;const resizableInfo=resizableInfos[idx];resizableInfo&&(splitBar=_react.default.createElement(_SplitBar.default,{lazy,index:idx,active:movingIndex===idx,prefixCls,vertical:isVertical,resizable:resizableInfo.resizable,ariaNow:100*stackSizes[idx],ariaMin:100*Math.max((stackSizes[idx-
1]||0)+itemPtgMinSizes[idx],(stackSizes[idx+1]||100)-itemPtgMaxSizes[idx+1]),ariaMax:100*Math.min((stackSizes[idx-1]||0)+itemPtgMaxSizes[idx],(stackSizes[idx+1]||100)-itemPtgMinSizes[idx+1]),startCollapsible:resizableInfo.startCollapsible,endCollapsible:resizableInfo.endCollapsible,onOffsetStart:onInternalResizeStart,onOffsetUpdate:(index,offsetX,offsetY)=>{offsetX=isVertical?offsetY:offsetX;reverse&&(offsetX=-offsetX);onInternalResizeUpdate(index,offsetX)},onOffsetEnd:onInternalResizeEnd,onCollapse:onInternalCollapse,
containerSize:containerSize||0}));return _react.default.createElement(_react.default.Fragment,{key:`split-panel-${idx}`},item,splitBar)}),"number"===typeof movingIndex&&_react.default.createElement("div",{"aria-hidden":!0,className:(0,_classnames.default)(isRTL,`${isRTL}-${layout}`)}))))};require.displayName="Splitter";exports.default=require}
//# sourceMappingURL=module$node_modules$antd$lib$splitter$Splitter.js.map
