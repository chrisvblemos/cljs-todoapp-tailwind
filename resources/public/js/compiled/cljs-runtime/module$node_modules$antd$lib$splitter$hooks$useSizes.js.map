{
"version":3,
"file":"module$node_modules$antd$lib$splitter$hooks$useSizes.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/antd/lib/splitter/hooks/useSizes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$antd$lib$splitter$hooks$useSizes\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useSizes;\nexports.getPtg = getPtg;\nvar _react = _interopRequireDefault(require(\"react\"));\nfunction getPtg(str) {\n  return Number(str.slice(0, -1)) / 100;\n}\nfunction isPtg(itemSize) {\n  return typeof itemSize === 'string' && itemSize.endsWith('%');\n}\n/**\n * Save the size state.\n * Align the size into flex percentage base.\n */\nfunction useSizes(items, containerSize) {\n  const propSizes = items.map(item => item.size);\n  const itemsCount = items.length;\n  const mergedContainerSize = containerSize || 0;\n  const ptg2px = ptg => ptg * mergedContainerSize;\n  // We do not need care the size state match the `items` length in `useState`.\n  // It will calculate later.\n  const [innerSizes, setInnerSizes] = _react.default.useState(() => items.map(item => item.defaultSize));\n  const sizes = _react.default.useMemo(() => {\n    var _a;\n    const mergedSizes = [];\n    for (let i = 0; i < itemsCount; i += 1) {\n      mergedSizes[i] = (_a = propSizes[i]) !== null && _a !== void 0 ? _a : innerSizes[i];\n    }\n    return mergedSizes;\n  }, [itemsCount, innerSizes, propSizes]);\n  // Post handle the size. Will do:\n  // 1. Convert all the px into percentage if not empty.\n  // 2. Get rest percentage for exist percentage.\n  // 3. Fill the rest percentage into empty item.\n  const postPercentSizes = _react.default.useMemo(() => {\n    let ptgList = [];\n    let emptyCount = 0;\n    // Fill default percentage\n    for (let i = 0; i < itemsCount; i += 1) {\n      const itemSize = sizes[i];\n      if (isPtg(itemSize)) {\n        ptgList[i] = getPtg(itemSize);\n      } else if (itemSize || itemSize === 0) {\n        const num = Number(itemSize);\n        if (!Number.isNaN(num)) {\n          ptgList[i] = num / mergedContainerSize;\n        }\n      } else {\n        emptyCount += 1;\n        ptgList[i] = undefined;\n      }\n    }\n    const totalPtg = ptgList.reduce((acc, ptg) => acc + (ptg || 0), 0);\n    if (totalPtg > 1 || !emptyCount) {\n      // If total percentage is larger than 1, we will scale it down.\n      const scale = 1 / totalPtg;\n      ptgList = ptgList.map(ptg => ptg === undefined ? 0 : ptg * scale);\n    } else {\n      // If total percentage is smaller than 1, we will fill the rest.\n      const avgRest = (1 - totalPtg) / emptyCount;\n      ptgList = ptgList.map(ptg => ptg === undefined ? avgRest : ptg);\n    }\n    return ptgList;\n  }, [sizes, mergedContainerSize]);\n  const postPxSizes = _react.default.useMemo(() => postPercentSizes.map(ptg2px), [postPercentSizes, mergedContainerSize]);\n  const postPercentMinSizes = _react.default.useMemo(() => items.map(item => {\n    if (isPtg(item.min)) {\n      return getPtg(item.min);\n    }\n    return (item.min || 0) / mergedContainerSize;\n  }), [items, mergedContainerSize]);\n  const postPercentMaxSizes = _react.default.useMemo(() => items.map(item => {\n    if (isPtg(item.max)) {\n      return getPtg(item.max);\n    }\n    return (item.max || mergedContainerSize) / mergedContainerSize;\n  }), [items, mergedContainerSize]);\n  // If ssr, we will use the size from developer config first.\n  const panelSizes = _react.default.useMemo(() => containerSize ? postPxSizes : sizes, [postPxSizes, containerSize]);\n  return [panelSizes, postPxSizes, postPercentSizes, postPercentMinSizes, postPercentMaxSizes, setInnerSizes];\n}\n};"],
"names":["shadow$provide","global","require","module","exports","getPtg","str","Number","slice","isPtg","itemSize","endsWith","_interopRequireDefault","default","Object","defineProperty","value","useSizes","items","containerSize","propSizes","map","item","size","itemsCount","length","mergedContainerSize","ptg2px","ptg","innerSizes","setInnerSizes","_react","useState","defaultSize","sizes","useMemo","_a","mergedSizes","i","postPercentSizes","ptgList","emptyCount","num","isNaN","undefined","totalPtg","reduce","acc","scale","avgRest","postPxSizes","postPercentMinSizes","min","postPercentMaxSizes","max","panelSizes"]
}
