shadow$provide.module$node_modules$antd$lib$color_picker$util=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;Object.defineProperty(exports,"__esModule",{value:!0});exports.getRoundNumber=exports.getGradientPercentColor=exports.getColorAlpha=exports.generateColor=exports.genAlphaColor=void 0;var _toConsumableArray2=global(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),_colorPicker=require("module$node_modules$$rc_component$color_picker$lib$index"),
_color=require("module$node_modules$antd$lib$color_picker$color");const generateColor=color=>color instanceof _color.AggregationColor?color:new _color.AggregationColor(color);exports.generateColor=generateColor;const getRoundNumber=value=>Math.round(Number(value||0));exports.getRoundNumber=getRoundNumber;exports.getColorAlpha=color=>getRoundNumber(100*color.toHsb().a);exports.genAlphaColor=(color,alpha)=>{const rgba=color.toRgb();if(!rgba.r&&!rgba.g&&!rgba.b)return color=color.toHsb(),color.a=alpha||
1,generateColor(color);rgba.a=alpha||1;return generateColor(rgba)};exports.getGradientPercentColor=(colors,percent)=>{var filledColors=[{percent:0,color:colors[0].color}].concat((0,_toConsumableArray2.default)(colors),[{percent:100,color:colors[colors.length-1].color}]);for(let i=0;i<filledColors.length-1;i+=1){const startPtg=filledColors[i].percent,endPtg=filledColors[i+1].percent;var startColor=filledColors[i].color;colors=filledColors[i+1].color;if(startPtg<=percent&&percent<=endPtg){filledColors=
endPtg-startPtg;if(0===filledColors)return startColor;percent=(percent-startPtg)/filledColors*100;startColor=new _colorPicker.Color(startColor);colors=new _colorPicker.Color(colors);return startColor.mix(colors,percent).toRgbString()}}return""}}
//# sourceMappingURL=module$node_modules$antd$lib$color_picker$util.js.map
